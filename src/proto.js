/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["@cosmos-client/ibc"] || ($protobuf.roots["@cosmos-client/ibc"] = {});

export const ibc = $root.ibc = (() => {

    /**
     * Namespace ibc.
     * @exports ibc
     * @namespace
     */
    const ibc = {};

    ibc.applications = (function() {

        /**
         * Namespace applications.
         * @memberof ibc
         * @namespace
         */
        const applications = {};

        applications.transfer = (function() {

            /**
             * Namespace transfer.
             * @memberof ibc.applications
             * @namespace
             */
            const transfer = {};

            transfer.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.applications.transfer
                 * @namespace
                 */
                const v1 = {};

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Query#denomTrace}.
                     * @memberof ibc.applications.transfer.v1.Query
                     * @typedef DenomTraceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.QueryDenomTraceResponse} [response] QueryDenomTraceResponse
                     */

                    /**
                     * Calls DenomTrace.
                     * @function denomTrace
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                     * @param {ibc.applications.transfer.v1.Query.DenomTraceCallback} callback Node-style callback called with the error, if any, and QueryDenomTraceResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.denomTrace = function denomTrace(request, callback) {
                        return this.rpcCall(denomTrace, $root.ibc.applications.transfer.v1.QueryDenomTraceRequest, $root.ibc.applications.transfer.v1.QueryDenomTraceResponse, request, callback);
                    }, "name", { value: "DenomTrace" });

                    /**
                     * Calls DenomTrace.
                     * @function denomTrace
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTraceResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Query#denomTraces}.
                     * @memberof ibc.applications.transfer.v1.Query
                     * @typedef DenomTracesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.QueryDenomTracesResponse} [response] QueryDenomTracesResponse
                     */

                    /**
                     * Calls DenomTraces.
                     * @function denomTraces
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                     * @param {ibc.applications.transfer.v1.Query.DenomTracesCallback} callback Node-style callback called with the error, if any, and QueryDenomTracesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.denomTraces = function denomTraces(request, callback) {
                        return this.rpcCall(denomTraces, $root.ibc.applications.transfer.v1.QueryDenomTracesRequest, $root.ibc.applications.transfer.v1.QueryDenomTracesResponse, request, callback);
                    }, "name", { value: "DenomTraces" });

                    /**
                     * Calls DenomTraces.
                     * @function denomTraces
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTracesResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Query#params}.
                     * @memberof ibc.applications.transfer.v1.Query
                     * @typedef ParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.QueryParamsResponse} [response] QueryParamsResponse
                     */

                    /**
                     * Calls Params.
                     * @function params
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @param {ibc.applications.transfer.v1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.params = function params(request, callback) {
                        return this.rpcCall(params, $root.ibc.applications.transfer.v1.QueryParamsRequest, $root.ibc.applications.transfer.v1.QueryParamsResponse, request, callback);
                    }, "name", { value: "Params" });

                    /**
                     * Calls Params.
                     * @function params
                     * @memberof ibc.applications.transfer.v1.Query
                     * @instance
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.QueryParamsResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryDenomTraceRequest = (function() {

                    /**
                     * Properties of a QueryDenomTraceRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTraceRequest
                     * @property {string|null} [hash] QueryDenomTraceRequest hash
                     */

                    /**
                     * Constructs a new QueryDenomTraceRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTraceRequest.
                     * @implements IQueryDenomTraceRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest=} [properties] Properties to set
                     */
                    function QueryDenomTraceRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTraceRequest hash.
                     * @member {string} hash
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @instance
                     */
                    QueryDenomTraceRequest.prototype.hash = "";

                    /**
                     * Encodes the specified QueryDenomTraceRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} message QueryDenomTraceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTraceRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} message QueryDenomTraceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTraceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTraceRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.hash = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTraceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTraceRequest message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTraceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            if (!$util.isString(message.hash))
                                return "hash: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTraceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                     */
                    QueryDenomTraceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTraceRequest)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTraceRequest();
                        if (object.hash != null)
                            message.hash = String(object.hash);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTraceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTraceRequest} message QueryDenomTraceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTraceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.hash = "";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            object.hash = message.hash;
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTraceRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTraceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTraceRequest;
                })();

                v1.QueryDenomTraceResponse = (function() {

                    /**
                     * Properties of a QueryDenomTraceResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTraceResponse
                     * @property {ibc.applications.transfer.v1.IDenomTrace|null} [denom_trace] QueryDenomTraceResponse denom_trace
                     */

                    /**
                     * Constructs a new QueryDenomTraceResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTraceResponse.
                     * @implements IQueryDenomTraceResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse=} [properties] Properties to set
                     */
                    function QueryDenomTraceResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTraceResponse denom_trace.
                     * @member {ibc.applications.transfer.v1.IDenomTrace|null|undefined} denom_trace
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @instance
                     */
                    QueryDenomTraceResponse.prototype.denom_trace = null;

                    /**
                     * Encodes the specified QueryDenomTraceResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse} message QueryDenomTraceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom_trace != null && Object.hasOwnProperty.call(message, "denom_trace"))
                            $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_trace, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTraceResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse} message QueryDenomTraceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTraceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTraceResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTraceResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTraceResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTraceResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTraceResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTraceResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom_trace != null && message.hasOwnProperty("denom_trace")) {
                            let error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_trace);
                            if (error)
                                return "denom_trace." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTraceResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                     */
                    QueryDenomTraceResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTraceResponse)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTraceResponse();
                        if (object.denom_trace != null) {
                            if (typeof object.denom_trace !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace: object expected");
                            message.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_trace);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTraceResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTraceResponse} message QueryDenomTraceResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTraceResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.denom_trace = null;
                        if (message.denom_trace != null && message.hasOwnProperty("denom_trace"))
                            object.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_trace, options);
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTraceResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTraceResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTraceResponse;
                })();

                v1.QueryDenomTracesRequest = (function() {

                    /**
                     * Properties of a QueryDenomTracesRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTracesRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDenomTracesRequest pagination
                     */

                    /**
                     * Constructs a new QueryDenomTracesRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTracesRequest.
                     * @implements IQueryDenomTracesRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest=} [properties] Properties to set
                     */
                    function QueryDenomTracesRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTracesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @instance
                     */
                    QueryDenomTracesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryDenomTracesRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} message QueryDenomTracesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTracesRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} message QueryDenomTracesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTracesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTracesRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTracesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTracesRequest message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTracesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTracesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                     */
                    QueryDenomTracesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTracesRequest)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTracesRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTracesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTracesRequest} message QueryDenomTracesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTracesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTracesRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTracesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTracesRequest;
                })();

                v1.QueryDenomTracesResponse = (function() {

                    /**
                     * Properties of a QueryDenomTracesResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryDenomTracesResponse
                     * @property {Array.<ibc.applications.transfer.v1.IDenomTrace>|null} [denom_traces] QueryDenomTracesResponse denom_traces
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDenomTracesResponse pagination
                     */

                    /**
                     * Constructs a new QueryDenomTracesResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryDenomTracesResponse.
                     * @implements IQueryDenomTracesResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse=} [properties] Properties to set
                     */
                    function QueryDenomTracesResponse(properties) {
                        this.denom_traces = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryDenomTracesResponse denom_traces.
                     * @member {Array.<ibc.applications.transfer.v1.IDenomTrace>} denom_traces
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     */
                    QueryDenomTracesResponse.prototype.denom_traces = $util.emptyArray;

                    /**
                     * QueryDenomTracesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     */
                    QueryDenomTracesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryDenomTracesResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse} message QueryDenomTracesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom_traces != null && message.denom_traces.length)
                            for (let i = 0; i < message.denom_traces.length; ++i)
                                $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_traces[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryDenomTracesResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse} message QueryDenomTracesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomTracesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryDenomTracesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTracesResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.denom_traces && message.denom_traces.length))
                                    message.denom_traces = [];
                                message.denom_traces.push($root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryDenomTracesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomTracesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryDenomTracesResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomTracesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom_traces != null && message.hasOwnProperty("denom_traces")) {
                            if (!Array.isArray(message.denom_traces))
                                return "denom_traces: array expected";
                            for (let i = 0; i < message.denom_traces.length; ++i) {
                                let error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_traces[i]);
                                if (error)
                                    return "denom_traces." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryDenomTracesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                     */
                    QueryDenomTracesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTracesResponse)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryDenomTracesResponse();
                        if (object.denom_traces) {
                            if (!Array.isArray(object.denom_traces))
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces: array expected");
                            message.denom_traces = [];
                            for (let i = 0; i < object.denom_traces.length; ++i) {
                                if (typeof object.denom_traces[i] !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces: object expected");
                                message.denom_traces[i] = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_traces[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryDenomTracesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryDenomTracesResponse} message QueryDenomTracesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomTracesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.denom_traces = [];
                        if (options.defaults)
                            object.pagination = null;
                        if (message.denom_traces && message.denom_traces.length) {
                            object.denom_traces = [];
                            for (let j = 0; j < message.denom_traces.length; ++j)
                                object.denom_traces[j] = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_traces[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryDenomTracesResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomTracesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryDenomTracesResponse;
                })();

                v1.QueryParamsRequest = (function() {

                    /**
                     * Properties of a QueryParamsRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryParamsRequest
                     */

                    /**
                     * Constructs a new QueryParamsRequest.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryParamsRequest.
                     * @implements IQueryParamsRequest
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest=} [properties] Properties to set
                     */
                    function QueryParamsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryParamsRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryParamsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryParamsRequest message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                     */
                    QueryParamsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryParamsRequest)
                            return object;
                        return new $root.ibc.applications.transfer.v1.QueryParamsRequest();
                    };

                    /**
                     * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryParamsRequest} message QueryParamsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryParamsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryParamsRequest;
                })();

                v1.QueryParamsResponse = (function() {

                    /**
                     * Properties of a QueryParamsResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IQueryParamsResponse
                     * @property {ibc.applications.transfer.v1.IParams|null} [params] QueryParamsResponse params
                     */

                    /**
                     * Constructs a new QueryParamsResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a QueryParamsResponse.
                     * @implements IQueryParamsResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse=} [properties] Properties to set
                     */
                    function QueryParamsResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryParamsResponse params.
                     * @member {ibc.applications.transfer.v1.IParams|null|undefined} params
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @instance
                     */
                    QueryParamsResponse.prototype.params = null;

                    /**
                     * Encodes the specified QueryParamsResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.applications.transfer.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryParamsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.ibc.applications.transfer.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryParamsResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.applications.transfer.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                     */
                    QueryParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.QueryParamsResponse)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.QueryParamsResponse();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.QueryParamsResponse.params: object expected");
                            message.params = $root.ibc.applications.transfer.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.QueryParamsResponse} message QueryParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.params = null;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.applications.transfer.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this QueryParamsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryParamsResponse;
                })();

                v1.FungibleTokenPacketData = (function() {

                    /**
                     * Properties of a FungibleTokenPacketData.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IFungibleTokenPacketData
                     * @property {string|null} [denom] FungibleTokenPacketData denom
                     * @property {Long|null} [amount] FungibleTokenPacketData amount
                     * @property {string|null} [sender] FungibleTokenPacketData sender
                     * @property {string|null} [receiver] FungibleTokenPacketData receiver
                     */

                    /**
                     * Constructs a new FungibleTokenPacketData.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a FungibleTokenPacketData.
                     * @implements IFungibleTokenPacketData
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IFungibleTokenPacketData=} [properties] Properties to set
                     */
                    function FungibleTokenPacketData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * FungibleTokenPacketData denom.
                     * @member {string} denom
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.denom = "";

                    /**
                     * FungibleTokenPacketData amount.
                     * @member {Long} amount
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * FungibleTokenPacketData sender.
                     * @member {string} sender
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.sender = "";

                    /**
                     * FungibleTokenPacketData receiver.
                     * @member {string} receiver
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     */
                    FungibleTokenPacketData.prototype.receiver = "";

                    /**
                     * Encodes the specified FungibleTokenPacketData message. Does not implicitly {@link ibc.applications.transfer.v1.FungibleTokenPacketData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {ibc.applications.transfer.v1.IFungibleTokenPacketData} message FungibleTokenPacketData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FungibleTokenPacketData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.amount);
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.sender);
                        if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.receiver);
                        return writer;
                    };

                    /**
                     * Encodes the specified FungibleTokenPacketData message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.FungibleTokenPacketData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {ibc.applications.transfer.v1.IFungibleTokenPacketData} message FungibleTokenPacketData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    FungibleTokenPacketData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a FungibleTokenPacketData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.FungibleTokenPacketData} FungibleTokenPacketData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FungibleTokenPacketData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.FungibleTokenPacketData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.amount = reader.uint64();
                                break;
                            case 3:
                                message.sender = reader.string();
                                break;
                            case 4:
                                message.receiver = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a FungibleTokenPacketData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.FungibleTokenPacketData} FungibleTokenPacketData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    FungibleTokenPacketData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a FungibleTokenPacketData message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    FungibleTokenPacketData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                                return "amount: integer|Long expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            if (!$util.isString(message.receiver))
                                return "receiver: string expected";
                        return null;
                    };

                    /**
                     * Creates a FungibleTokenPacketData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.FungibleTokenPacketData} FungibleTokenPacketData
                     */
                    FungibleTokenPacketData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.FungibleTokenPacketData)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.FungibleTokenPacketData();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.amount != null)
                            if ($util.Long)
                                (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                            else if (typeof object.amount === "string")
                                message.amount = parseInt(object.amount, 10);
                            else if (typeof object.amount === "number")
                                message.amount = object.amount;
                            else if (typeof object.amount === "object")
                                message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.receiver != null)
                            message.receiver = String(object.receiver);
                        return message;
                    };

                    /**
                     * Creates a plain object from a FungibleTokenPacketData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @static
                     * @param {ibc.applications.transfer.v1.FungibleTokenPacketData} message FungibleTokenPacketData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    FungibleTokenPacketData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.denom = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.amount = options.longs === String ? "0" : 0;
                            object.sender = "";
                            object.receiver = "";
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (typeof message.amount === "number")
                                object.amount = options.longs === String ? String(message.amount) : message.amount;
                            else
                                object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            object.receiver = message.receiver;
                        return object;
                    };

                    /**
                     * Converts this FungibleTokenPacketData to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.FungibleTokenPacketData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    FungibleTokenPacketData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return FungibleTokenPacketData;
                })();

                v1.DenomTrace = (function() {

                    /**
                     * Properties of a DenomTrace.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IDenomTrace
                     * @property {string|null} [path] DenomTrace path
                     * @property {string|null} [base_denom] DenomTrace base_denom
                     */

                    /**
                     * Constructs a new DenomTrace.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a DenomTrace.
                     * @implements IDenomTrace
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IDenomTrace=} [properties] Properties to set
                     */
                    function DenomTrace(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * DenomTrace path.
                     * @member {string} path
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     */
                    DenomTrace.prototype.path = "";

                    /**
                     * DenomTrace base_denom.
                     * @member {string} base_denom
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     */
                    DenomTrace.prototype.base_denom = "";

                    /**
                     * Encodes the specified DenomTrace message. Does not implicitly {@link ibc.applications.transfer.v1.DenomTrace.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {ibc.applications.transfer.v1.IDenomTrace} message DenomTrace message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomTrace.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                        if (message.base_denom != null && Object.hasOwnProperty.call(message, "base_denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.base_denom);
                        return writer;
                    };

                    /**
                     * Encodes the specified DenomTrace message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.DenomTrace.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {ibc.applications.transfer.v1.IDenomTrace} message DenomTrace message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomTrace.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a DenomTrace message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomTrace.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.DenomTrace();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.string();
                                break;
                            case 2:
                                message.base_denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a DenomTrace message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomTrace.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a DenomTrace message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DenomTrace.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!$util.isString(message.path))
                                return "path: string expected";
                        if (message.base_denom != null && message.hasOwnProperty("base_denom"))
                            if (!$util.isString(message.base_denom))
                                return "base_denom: string expected";
                        return null;
                    };

                    /**
                     * Creates a DenomTrace message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                     */
                    DenomTrace.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.DenomTrace)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.DenomTrace();
                        if (object.path != null)
                            message.path = String(object.path);
                        if (object.base_denom != null)
                            message.base_denom = String(object.base_denom);
                        return message;
                    };

                    /**
                     * Creates a plain object from a DenomTrace message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @static
                     * @param {ibc.applications.transfer.v1.DenomTrace} message DenomTrace
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DenomTrace.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.path = "";
                            object.base_denom = "";
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = message.path;
                        if (message.base_denom != null && message.hasOwnProperty("base_denom"))
                            object.base_denom = message.base_denom;
                        return object;
                    };

                    /**
                     * Converts this DenomTrace to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.DenomTrace
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DenomTrace.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return DenomTrace;
                })();

                v1.Params = (function() {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IParams
                     * @property {boolean|null} [send_enabled] Params send_enabled
                     * @property {boolean|null} [receive_enabled] Params receive_enabled
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Params send_enabled.
                     * @member {boolean} send_enabled
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     */
                    Params.prototype.send_enabled = false;

                    /**
                     * Params receive_enabled.
                     * @member {boolean} receive_enabled
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     */
                    Params.prototype.receive_enabled = false;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.applications.transfer.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {ibc.applications.transfer.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.send_enabled != null && Object.hasOwnProperty.call(message, "send_enabled"))
                            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.send_enabled);
                        if (message.receive_enabled != null && Object.hasOwnProperty.call(message, "receive_enabled"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.receive_enabled);
                        return writer;
                    };

                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {ibc.applications.transfer.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.Params();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.send_enabled = reader.bool();
                                break;
                            case 2:
                                message.receive_enabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.send_enabled != null && message.hasOwnProperty("send_enabled"))
                            if (typeof message.send_enabled !== "boolean")
                                return "send_enabled: boolean expected";
                        if (message.receive_enabled != null && message.hasOwnProperty("receive_enabled"))
                            if (typeof message.receive_enabled !== "boolean")
                                return "receive_enabled: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.Params)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.Params();
                        if (object.send_enabled != null)
                            message.send_enabled = Boolean(object.send_enabled);
                        if (object.receive_enabled != null)
                            message.receive_enabled = Boolean(object.receive_enabled);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.Params
                     * @static
                     * @param {ibc.applications.transfer.v1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.send_enabled = false;
                            object.receive_enabled = false;
                        }
                        if (message.send_enabled != null && message.hasOwnProperty("send_enabled"))
                            object.send_enabled = message.send_enabled;
                        if (message.receive_enabled != null && message.hasOwnProperty("receive_enabled"))
                            object.receive_enabled = message.receive_enabled;
                        return object;
                    };

                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Params;
                })();

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.applications.transfer.v1.Msg#transfer}.
                     * @memberof ibc.applications.transfer.v1.Msg
                     * @typedef TransferCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.applications.transfer.v1.MsgTransferResponse} [response] MsgTransferResponse
                     */

                    /**
                     * Calls Transfer.
                     * @function transfer
                     * @memberof ibc.applications.transfer.v1.Msg
                     * @instance
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} request MsgTransfer message or plain object
                     * @param {ibc.applications.transfer.v1.Msg.TransferCallback} callback Node-style callback called with the error, if any, and MsgTransferResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.transfer = function transfer(request, callback) {
                        return this.rpcCall(transfer, $root.ibc.applications.transfer.v1.MsgTransfer, $root.ibc.applications.transfer.v1.MsgTransferResponse, request, callback);
                    }, "name", { value: "Transfer" });

                    /**
                     * Calls Transfer.
                     * @function transfer
                     * @memberof ibc.applications.transfer.v1.Msg
                     * @instance
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} request MsgTransfer message or plain object
                     * @returns {Promise<ibc.applications.transfer.v1.MsgTransferResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgTransfer = (function() {

                    /**
                     * Properties of a MsgTransfer.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IMsgTransfer
                     * @property {string|null} [source_port] MsgTransfer source_port
                     * @property {string|null} [source_channel] MsgTransfer source_channel
                     * @property {cosmos.base.v1beta1.ICoin|null} [token] MsgTransfer token
                     * @property {string|null} [sender] MsgTransfer sender
                     * @property {string|null} [receiver] MsgTransfer receiver
                     * @property {ibc.core.client.v1.IHeight|null} [timeout_height] MsgTransfer timeout_height
                     * @property {Long|null} [timeout_timestamp] MsgTransfer timeout_timestamp
                     */

                    /**
                     * Constructs a new MsgTransfer.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a MsgTransfer.
                     * @implements IMsgTransfer
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IMsgTransfer=} [properties] Properties to set
                     */
                    function MsgTransfer(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgTransfer source_port.
                     * @member {string} source_port
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.source_port = "";

                    /**
                     * MsgTransfer source_channel.
                     * @member {string} source_channel
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.source_channel = "";

                    /**
                     * MsgTransfer token.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} token
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.token = null;

                    /**
                     * MsgTransfer sender.
                     * @member {string} sender
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.sender = "";

                    /**
                     * MsgTransfer receiver.
                     * @member {string} receiver
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.receiver = "";

                    /**
                     * MsgTransfer timeout_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.timeout_height = null;

                    /**
                     * MsgTransfer timeout_timestamp.
                     * @member {Long} timeout_timestamp
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     */
                    MsgTransfer.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified MsgTransfer message. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransfer.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} message MsgTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransfer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.source_port != null && Object.hasOwnProperty.call(message, "source_port"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.source_port);
                        if (message.source_channel != null && Object.hasOwnProperty.call(message, "source_channel"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_channel);
                        if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.token, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.sender);
                        if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.receiver);
                        if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                            $root.ibc.core.client.v1.Height.encode(message.timeout_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.timeout_timestamp != null && Object.hasOwnProperty.call(message, "timeout_timestamp"))
                            writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.timeout_timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTransfer message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransfer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransfer} message MsgTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTransfer message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.MsgTransfer} MsgTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransfer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.MsgTransfer();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.source_port = reader.string();
                                break;
                            case 2:
                                message.source_channel = reader.string();
                                break;
                            case 3:
                                message.token = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.sender = reader.string();
                                break;
                            case 5:
                                message.receiver = reader.string();
                                break;
                            case 6:
                                message.timeout_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.timeout_timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTransfer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.MsgTransfer} MsgTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTransfer message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTransfer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            if (!$util.isString(message.source_port))
                                return "source_port: string expected";
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            if (!$util.isString(message.source_channel))
                                return "source_channel: string expected";
                        if (message.token != null && message.hasOwnProperty("token")) {
                            let error = $root.cosmos.base.v1beta1.Coin.verify(message.token);
                            if (error)
                                return "token." + error;
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            if (!$util.isString(message.receiver))
                                return "receiver: string expected";
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.timeout_height);
                            if (error)
                                return "timeout_height." + error;
                        }
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (!$util.isInteger(message.timeout_timestamp) && !(message.timeout_timestamp && $util.isInteger(message.timeout_timestamp.low) && $util.isInteger(message.timeout_timestamp.high)))
                                return "timeout_timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTransfer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.MsgTransfer} MsgTransfer
                     */
                    MsgTransfer.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.MsgTransfer)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.MsgTransfer();
                        if (object.source_port != null)
                            message.source_port = String(object.source_port);
                        if (object.source_channel != null)
                            message.source_channel = String(object.source_channel);
                        if (object.token != null) {
                            if (typeof object.token !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.MsgTransfer.token: object expected");
                            message.token = $root.cosmos.base.v1beta1.Coin.fromObject(object.token);
                        }
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.receiver != null)
                            message.receiver = String(object.receiver);
                        if (object.timeout_height != null) {
                            if (typeof object.timeout_height !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.MsgTransfer.timeout_height: object expected");
                            message.timeout_height = $root.ibc.core.client.v1.Height.fromObject(object.timeout_height);
                        }
                        if (object.timeout_timestamp != null)
                            if ($util.Long)
                                (message.timeout_timestamp = $util.Long.fromValue(object.timeout_timestamp)).unsigned = true;
                            else if (typeof object.timeout_timestamp === "string")
                                message.timeout_timestamp = parseInt(object.timeout_timestamp, 10);
                            else if (typeof object.timeout_timestamp === "number")
                                message.timeout_timestamp = object.timeout_timestamp;
                            else if (typeof object.timeout_timestamp === "object")
                                message.timeout_timestamp = new $util.LongBits(object.timeout_timestamp.low >>> 0, object.timeout_timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgTransfer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @static
                     * @param {ibc.applications.transfer.v1.MsgTransfer} message MsgTransfer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTransfer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.source_port = "";
                            object.source_channel = "";
                            object.token = null;
                            object.sender = "";
                            object.receiver = "";
                            object.timeout_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timeout_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timeout_timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            object.source_port = message.source_port;
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            object.source_channel = message.source_channel;
                        if (message.token != null && message.hasOwnProperty("token"))
                            object.token = $root.cosmos.base.v1beta1.Coin.toObject(message.token, options);
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.receiver != null && message.hasOwnProperty("receiver"))
                            object.receiver = message.receiver;
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                            object.timeout_height = $root.ibc.core.client.v1.Height.toObject(message.timeout_height, options);
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (typeof message.timeout_timestamp === "number")
                                object.timeout_timestamp = options.longs === String ? String(message.timeout_timestamp) : message.timeout_timestamp;
                            else
                                object.timeout_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_timestamp) : options.longs === Number ? new $util.LongBits(message.timeout_timestamp.low >>> 0, message.timeout_timestamp.high >>> 0).toNumber(true) : message.timeout_timestamp;
                        return object;
                    };

                    /**
                     * Converts this MsgTransfer to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.MsgTransfer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTransfer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTransfer;
                })();

                v1.MsgTransferResponse = (function() {

                    /**
                     * Properties of a MsgTransferResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IMsgTransferResponse
                     */

                    /**
                     * Constructs a new MsgTransferResponse.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a MsgTransferResponse.
                     * @implements IMsgTransferResponse
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse=} [properties] Properties to set
                     */
                    function MsgTransferResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgTransferResponse message. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransferResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse} message MsgTransferResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransferResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTransferResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.MsgTransferResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.IMsgTransferResponse} message MsgTransferResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTransferResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTransferResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.MsgTransferResponse} MsgTransferResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransferResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.MsgTransferResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTransferResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.MsgTransferResponse} MsgTransferResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTransferResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTransferResponse message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTransferResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTransferResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.MsgTransferResponse} MsgTransferResponse
                     */
                    MsgTransferResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.MsgTransferResponse)
                            return object;
                        return new $root.ibc.applications.transfer.v1.MsgTransferResponse();
                    };

                    /**
                     * Creates a plain object from a MsgTransferResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @static
                     * @param {ibc.applications.transfer.v1.MsgTransferResponse} message MsgTransferResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTransferResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgTransferResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.MsgTransferResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTransferResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTransferResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.applications.transfer.v1
                     * @interface IGenesisState
                     * @property {string|null} [port_id] GenesisState port_id
                     * @property {Array.<ibc.applications.transfer.v1.IDenomTrace>|null} [denom_traces] GenesisState denom_traces
                     * @property {ibc.applications.transfer.v1.IParams|null} [params] GenesisState params
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.applications.transfer.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.applications.transfer.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.denom_traces = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState port_id.
                     * @member {string} port_id
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.port_id = "";

                    /**
                     * GenesisState denom_traces.
                     * @member {Array.<ibc.applications.transfer.v1.IDenomTrace>} denom_traces
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.denom_traces = $util.emptyArray;

                    /**
                     * GenesisState params.
                     * @member {ibc.applications.transfer.v1.IParams|null|undefined} params
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.applications.transfer.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {ibc.applications.transfer.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.denom_traces != null && message.denom_traces.length)
                            for (let i = 0; i < message.denom_traces.length; ++i)
                                $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_traces[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.applications.transfer.v1.Params.encode(message.params, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {ibc.applications.transfer.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.applications.transfer.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                if (!(message.denom_traces && message.denom_traces.length))
                                    message.denom_traces = [];
                                message.denom_traces.push($root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.params = $root.ibc.applications.transfer.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.applications.transfer.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.denom_traces != null && message.hasOwnProperty("denom_traces")) {
                            if (!Array.isArray(message.denom_traces))
                                return "denom_traces: array expected";
                            for (let i = 0; i < message.denom_traces.length; ++i) {
                                let error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_traces[i]);
                                if (error)
                                    return "denom_traces." + error;
                            }
                        }
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.applications.transfer.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.applications.transfer.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.applications.transfer.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.applications.transfer.v1.GenesisState();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.denom_traces) {
                            if (!Array.isArray(object.denom_traces))
                                throw TypeError(".ibc.applications.transfer.v1.GenesisState.denom_traces: array expected");
                            message.denom_traces = [];
                            for (let i = 0; i < object.denom_traces.length; ++i) {
                                if (typeof object.denom_traces[i] !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.GenesisState.denom_traces: object expected");
                                message.denom_traces[i] = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_traces[i]);
                            }
                        }
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.applications.transfer.v1.GenesisState.params: object expected");
                            message.params = $root.ibc.applications.transfer.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @static
                     * @param {ibc.applications.transfer.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.denom_traces = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.params = null;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.denom_traces && message.denom_traces.length) {
                            object.denom_traces = [];
                            for (let j = 0; j < message.denom_traces.length; ++j)
                                object.denom_traces[j] = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_traces[j], options);
                        }
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.applications.transfer.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.applications.transfer.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                return v1;
            })();

            return transfer;
        })();

        return applications;
    })();

    ibc.core = (function() {

        /**
         * Namespace core.
         * @memberof ibc
         * @namespace
         */
        const core = {};

        core.client = (function() {

            /**
             * Namespace client.
             * @memberof ibc.core
             * @namespace
             */
            const client = {};

            client.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.client
                 * @namespace
                 */
                const v1 = {};

                v1.IdentifiedClientState = (function() {

                    /**
                     * Properties of an IdentifiedClientState.
                     * @memberof ibc.core.client.v1
                     * @interface IIdentifiedClientState
                     * @property {string|null} [client_id] IdentifiedClientState client_id
                     * @property {google.protobuf.IAny|null} [client_state] IdentifiedClientState client_state
                     */

                    /**
                     * Constructs a new IdentifiedClientState.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an IdentifiedClientState.
                     * @implements IIdentifiedClientState
                     * @constructor
                     * @param {ibc.core.client.v1.IIdentifiedClientState=} [properties] Properties to set
                     */
                    function IdentifiedClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedClientState client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     */
                    IdentifiedClientState.prototype.client_id = "";

                    /**
                     * IdentifiedClientState client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     */
                    IdentifiedClientState.prototype.client_state = null;

                    /**
                     * Encodes the specified IdentifiedClientState message. Does not implicitly {@link ibc.core.client.v1.IdentifiedClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedClientState} message IdentifiedClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedClientState message, length delimited. Does not implicitly {@link ibc.core.client.v1.IdentifiedClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedClientState} message IdentifiedClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.IdentifiedClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedClientState message.
                     * @function verify
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an IdentifiedClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                     */
                    IdentifiedClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.IdentifiedClientState)
                            return object;
                        let message = new $root.ibc.core.client.v1.IdentifiedClientState();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.IdentifiedClientState.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @static
                     * @param {ibc.core.client.v1.IdentifiedClientState} message IdentifiedClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.client_state = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        return object;
                    };

                    /**
                     * Converts this IdentifiedClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.IdentifiedClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedClientState;
                })();

                v1.ConsensusStateWithHeight = (function() {

                    /**
                     * Properties of a ConsensusStateWithHeight.
                     * @memberof ibc.core.client.v1
                     * @interface IConsensusStateWithHeight
                     * @property {ibc.core.client.v1.IHeight|null} [height] ConsensusStateWithHeight height
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateWithHeight consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateWithHeight.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ConsensusStateWithHeight.
                     * @implements IConsensusStateWithHeight
                     * @constructor
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight=} [properties] Properties to set
                     */
                    function ConsensusStateWithHeight(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusStateWithHeight height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     */
                    ConsensusStateWithHeight.prototype.height = null;

                    /**
                     * ConsensusStateWithHeight consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     */
                    ConsensusStateWithHeight.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateWithHeight message. Does not implicitly {@link ibc.core.client.v1.ConsensusStateWithHeight.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight} message ConsensusStateWithHeight message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateWithHeight.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusStateWithHeight message, length delimited. Does not implicitly {@link ibc.core.client.v1.ConsensusStateWithHeight.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {ibc.core.client.v1.IConsensusStateWithHeight} message ConsensusStateWithHeight message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateWithHeight.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusStateWithHeight message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateWithHeight.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ConsensusStateWithHeight();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusStateWithHeight message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateWithHeight.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusStateWithHeight message.
                     * @function verify
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusStateWithHeight.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConsensusStateWithHeight message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                     */
                    ConsensusStateWithHeight.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.ConsensusStateWithHeight)
                            return object;
                        let message = new $root.ibc.core.client.v1.ConsensusStateWithHeight();
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.client.v1.ConsensusStateWithHeight.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.ConsensusStateWithHeight.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusStateWithHeight message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @static
                     * @param {ibc.core.client.v1.ConsensusStateWithHeight} message ConsensusStateWithHeight
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusStateWithHeight.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.height = null;
                            object.consensus_state = null;
                        }
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this ConsensusStateWithHeight to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusStateWithHeight.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusStateWithHeight;
                })();

                v1.ClientConsensusStates = (function() {

                    /**
                     * Properties of a ClientConsensusStates.
                     * @memberof ibc.core.client.v1
                     * @interface IClientConsensusStates
                     * @property {string|null} [client_id] ClientConsensusStates client_id
                     * @property {Array.<ibc.core.client.v1.IConsensusStateWithHeight>|null} [consensus_states] ClientConsensusStates consensus_states
                     */

                    /**
                     * Constructs a new ClientConsensusStates.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ClientConsensusStates.
                     * @implements IClientConsensusStates
                     * @constructor
                     * @param {ibc.core.client.v1.IClientConsensusStates=} [properties] Properties to set
                     */
                    function ClientConsensusStates(properties) {
                        this.consensus_states = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientConsensusStates client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     */
                    ClientConsensusStates.prototype.client_id = "";

                    /**
                     * ClientConsensusStates consensus_states.
                     * @member {Array.<ibc.core.client.v1.IConsensusStateWithHeight>} consensus_states
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     */
                    ClientConsensusStates.prototype.consensus_states = $util.emptyArray;

                    /**
                     * Encodes the specified ClientConsensusStates message. Does not implicitly {@link ibc.core.client.v1.ClientConsensusStates.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {ibc.core.client.v1.IClientConsensusStates} message ClientConsensusStates message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConsensusStates.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.consensus_states != null && message.consensus_states.length)
                            for (let i = 0; i < message.consensus_states.length; ++i)
                                $root.ibc.core.client.v1.ConsensusStateWithHeight.encode(message.consensus_states[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientConsensusStates message, length delimited. Does not implicitly {@link ibc.core.client.v1.ClientConsensusStates.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {ibc.core.client.v1.IClientConsensusStates} message ClientConsensusStates message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientConsensusStates.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientConsensusStates message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConsensusStates.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ClientConsensusStates();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.consensus_states && message.consensus_states.length))
                                    message.consensus_states = [];
                                message.consensus_states.push($root.ibc.core.client.v1.ConsensusStateWithHeight.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientConsensusStates message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientConsensusStates.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientConsensusStates message.
                     * @function verify
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientConsensusStates.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.consensus_states != null && message.hasOwnProperty("consensus_states")) {
                            if (!Array.isArray(message.consensus_states))
                                return "consensus_states: array expected";
                            for (let i = 0; i < message.consensus_states.length; ++i) {
                                let error = $root.ibc.core.client.v1.ConsensusStateWithHeight.verify(message.consensus_states[i]);
                                if (error)
                                    return "consensus_states." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientConsensusStates message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                     */
                    ClientConsensusStates.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.ClientConsensusStates)
                            return object;
                        let message = new $root.ibc.core.client.v1.ClientConsensusStates();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.consensus_states) {
                            if (!Array.isArray(object.consensus_states))
                                throw TypeError(".ibc.core.client.v1.ClientConsensusStates.consensus_states: array expected");
                            message.consensus_states = [];
                            for (let i = 0; i < object.consensus_states.length; ++i) {
                                if (typeof object.consensus_states[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.ClientConsensusStates.consensus_states: object expected");
                                message.consensus_states[i] = $root.ibc.core.client.v1.ConsensusStateWithHeight.fromObject(object.consensus_states[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientConsensusStates message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @static
                     * @param {ibc.core.client.v1.ClientConsensusStates} message ClientConsensusStates
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientConsensusStates.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.consensus_states = [];
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.consensus_states && message.consensus_states.length) {
                            object.consensus_states = [];
                            for (let j = 0; j < message.consensus_states.length; ++j)
                                object.consensus_states[j] = $root.ibc.core.client.v1.ConsensusStateWithHeight.toObject(message.consensus_states[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this ClientConsensusStates to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.ClientConsensusStates
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientConsensusStates.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientConsensusStates;
                })();

                v1.ClientUpdateProposal = (function() {

                    /**
                     * Properties of a ClientUpdateProposal.
                     * @memberof ibc.core.client.v1
                     * @interface IClientUpdateProposal
                     * @property {string|null} [title] ClientUpdateProposal title
                     * @property {string|null} [description] ClientUpdateProposal description
                     * @property {string|null} [subject_client_id] ClientUpdateProposal subject_client_id
                     * @property {string|null} [substitute_client_id] ClientUpdateProposal substitute_client_id
                     */

                    /**
                     * Constructs a new ClientUpdateProposal.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a ClientUpdateProposal.
                     * @implements IClientUpdateProposal
                     * @constructor
                     * @param {ibc.core.client.v1.IClientUpdateProposal=} [properties] Properties to set
                     */
                    function ClientUpdateProposal(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientUpdateProposal title.
                     * @member {string} title
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.title = "";

                    /**
                     * ClientUpdateProposal description.
                     * @member {string} description
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.description = "";

                    /**
                     * ClientUpdateProposal subject_client_id.
                     * @member {string} subject_client_id
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.subject_client_id = "";

                    /**
                     * ClientUpdateProposal substitute_client_id.
                     * @member {string} substitute_client_id
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     */
                    ClientUpdateProposal.prototype.substitute_client_id = "";

                    /**
                     * Encodes the specified ClientUpdateProposal message. Does not implicitly {@link ibc.core.client.v1.ClientUpdateProposal.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {ibc.core.client.v1.IClientUpdateProposal} message ClientUpdateProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientUpdateProposal.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.subject_client_id != null && Object.hasOwnProperty.call(message, "subject_client_id"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.subject_client_id);
                        if (message.substitute_client_id != null && Object.hasOwnProperty.call(message, "substitute_client_id"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.substitute_client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientUpdateProposal message, length delimited. Does not implicitly {@link ibc.core.client.v1.ClientUpdateProposal.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {ibc.core.client.v1.IClientUpdateProposal} message ClientUpdateProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientUpdateProposal.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientUpdateProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientUpdateProposal.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ClientUpdateProposal();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.title = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                message.subject_client_id = reader.string();
                                break;
                            case 4:
                                message.substitute_client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientUpdateProposal message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientUpdateProposal.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientUpdateProposal message.
                     * @function verify
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientUpdateProposal.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.subject_client_id != null && message.hasOwnProperty("subject_client_id"))
                            if (!$util.isString(message.subject_client_id))
                                return "subject_client_id: string expected";
                        if (message.substitute_client_id != null && message.hasOwnProperty("substitute_client_id"))
                            if (!$util.isString(message.substitute_client_id))
                                return "substitute_client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a ClientUpdateProposal message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                     */
                    ClientUpdateProposal.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.ClientUpdateProposal)
                            return object;
                        let message = new $root.ibc.core.client.v1.ClientUpdateProposal();
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.subject_client_id != null)
                            message.subject_client_id = String(object.subject_client_id);
                        if (object.substitute_client_id != null)
                            message.substitute_client_id = String(object.substitute_client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientUpdateProposal message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @static
                     * @param {ibc.core.client.v1.ClientUpdateProposal} message ClientUpdateProposal
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientUpdateProposal.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.title = "";
                            object.description = "";
                            object.subject_client_id = "";
                            object.substitute_client_id = "";
                        }
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.subject_client_id != null && message.hasOwnProperty("subject_client_id"))
                            object.subject_client_id = message.subject_client_id;
                        if (message.substitute_client_id != null && message.hasOwnProperty("substitute_client_id"))
                            object.substitute_client_id = message.substitute_client_id;
                        return object;
                    };

                    /**
                     * Converts this ClientUpdateProposal to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.ClientUpdateProposal
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientUpdateProposal.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientUpdateProposal;
                })();

                v1.UpgradeProposal = (function() {

                    /**
                     * Properties of an UpgradeProposal.
                     * @memberof ibc.core.client.v1
                     * @interface IUpgradeProposal
                     * @property {string|null} [title] UpgradeProposal title
                     * @property {string|null} [description] UpgradeProposal description
                     * @property {cosmos.upgrade.v1beta1.IPlan|null} [plan] UpgradeProposal plan
                     * @property {google.protobuf.IAny|null} [upgraded_client_state] UpgradeProposal upgraded_client_state
                     */

                    /**
                     * Constructs a new UpgradeProposal.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an UpgradeProposal.
                     * @implements IUpgradeProposal
                     * @constructor
                     * @param {ibc.core.client.v1.IUpgradeProposal=} [properties] Properties to set
                     */
                    function UpgradeProposal(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * UpgradeProposal title.
                     * @member {string} title
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.title = "";

                    /**
                     * UpgradeProposal description.
                     * @member {string} description
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.description = "";

                    /**
                     * UpgradeProposal plan.
                     * @member {cosmos.upgrade.v1beta1.IPlan|null|undefined} plan
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.plan = null;

                    /**
                     * UpgradeProposal upgraded_client_state.
                     * @member {google.protobuf.IAny|null|undefined} upgraded_client_state
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     */
                    UpgradeProposal.prototype.upgraded_client_state = null;

                    /**
                     * Encodes the specified UpgradeProposal message. Does not implicitly {@link ibc.core.client.v1.UpgradeProposal.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {ibc.core.client.v1.IUpgradeProposal} message UpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpgradeProposal.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.plan != null && Object.hasOwnProperty.call(message, "plan"))
                            $root.cosmos.upgrade.v1beta1.Plan.encode(message.plan, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.upgraded_client_state != null && Object.hasOwnProperty.call(message, "upgraded_client_state"))
                            $root.google.protobuf.Any.encode(message.upgraded_client_state, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified UpgradeProposal message, length delimited. Does not implicitly {@link ibc.core.client.v1.UpgradeProposal.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {ibc.core.client.v1.IUpgradeProposal} message UpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    UpgradeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an UpgradeProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpgradeProposal.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.UpgradeProposal();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.title = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                message.plan = $root.cosmos.upgrade.v1beta1.Plan.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.upgraded_client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an UpgradeProposal message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    UpgradeProposal.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an UpgradeProposal message.
                     * @function verify
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    UpgradeProposal.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.plan != null && message.hasOwnProperty("plan")) {
                            let error = $root.cosmos.upgrade.v1beta1.Plan.verify(message.plan);
                            if (error)
                                return "plan." + error;
                        }
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.upgraded_client_state);
                            if (error)
                                return "upgraded_client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates an UpgradeProposal message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                     */
                    UpgradeProposal.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.UpgradeProposal)
                            return object;
                        let message = new $root.ibc.core.client.v1.UpgradeProposal();
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.plan != null) {
                            if (typeof object.plan !== "object")
                                throw TypeError(".ibc.core.client.v1.UpgradeProposal.plan: object expected");
                            message.plan = $root.cosmos.upgrade.v1beta1.Plan.fromObject(object.plan);
                        }
                        if (object.upgraded_client_state != null) {
                            if (typeof object.upgraded_client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.UpgradeProposal.upgraded_client_state: object expected");
                            message.upgraded_client_state = $root.google.protobuf.Any.fromObject(object.upgraded_client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an UpgradeProposal message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @static
                     * @param {ibc.core.client.v1.UpgradeProposal} message UpgradeProposal
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    UpgradeProposal.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.title = "";
                            object.description = "";
                            object.plan = null;
                            object.upgraded_client_state = null;
                        }
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.plan != null && message.hasOwnProperty("plan"))
                            object.plan = $root.cosmos.upgrade.v1beta1.Plan.toObject(message.plan, options);
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state"))
                            object.upgraded_client_state = $root.google.protobuf.Any.toObject(message.upgraded_client_state, options);
                        return object;
                    };

                    /**
                     * Converts this UpgradeProposal to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.UpgradeProposal
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    UpgradeProposal.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return UpgradeProposal;
                })();

                v1.Height = (function() {

                    /**
                     * Properties of an Height.
                     * @memberof ibc.core.client.v1
                     * @interface IHeight
                     * @property {Long|null} [revision_number] Height revision_number
                     * @property {Long|null} [revision_height] Height revision_height
                     */

                    /**
                     * Constructs a new Height.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an Height.
                     * @implements IHeight
                     * @constructor
                     * @param {ibc.core.client.v1.IHeight=} [properties] Properties to set
                     */
                    function Height(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Height revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     */
                    Height.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Height revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     */
                    Height.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Height message. Does not implicitly {@link ibc.core.client.v1.Height.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {ibc.core.client.v1.IHeight} message Height message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Height.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.revision_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified Height message, length delimited. Does not implicitly {@link ibc.core.client.v1.Height.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {ibc.core.client.v1.IHeight} message Height message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Height.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Height message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.Height} Height
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Height.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.Height();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.revision_number = reader.uint64();
                                break;
                            case 2:
                                message.revision_height = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Height message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.Height} Height
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Height.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Height message.
                     * @function verify
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Height.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates an Height message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.Height} Height
                     */
                    Height.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.Height)
                            return object;
                        let message = new $root.ibc.core.client.v1.Height();
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Height message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.Height
                     * @static
                     * @param {ibc.core.client.v1.Height} message Height
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Height.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                        }
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        return object;
                    };

                    /**
                     * Converts this Height to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.Height
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Height.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Height;
                })();

                v1.Params = (function() {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.core.client.v1
                     * @interface IParams
                     * @property {Array.<string>|null} [allowed_clients] Params allowed_clients
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.core.client.v1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        this.allowed_clients = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Params allowed_clients.
                     * @member {Array.<string>} allowed_clients
                     * @memberof ibc.core.client.v1.Params
                     * @instance
                     */
                    Params.prototype.allowed_clients = $util.emptyArray;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.core.client.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {ibc.core.client.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.allowed_clients != null && message.allowed_clients.length)
                            for (let i = 0; i < message.allowed_clients.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowed_clients[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.core.client.v1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {ibc.core.client.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.Params();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.allowed_clients && message.allowed_clients.length))
                                    message.allowed_clients = [];
                                message.allowed_clients.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.allowed_clients != null && message.hasOwnProperty("allowed_clients")) {
                            if (!Array.isArray(message.allowed_clients))
                                return "allowed_clients: array expected";
                            for (let i = 0; i < message.allowed_clients.length; ++i)
                                if (!$util.isString(message.allowed_clients[i]))
                                    return "allowed_clients: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.Params)
                            return object;
                        let message = new $root.ibc.core.client.v1.Params();
                        if (object.allowed_clients) {
                            if (!Array.isArray(object.allowed_clients))
                                throw TypeError(".ibc.core.client.v1.Params.allowed_clients: array expected");
                            message.allowed_clients = [];
                            for (let i = 0; i < object.allowed_clients.length; ++i)
                                message.allowed_clients[i] = String(object.allowed_clients[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.Params
                     * @static
                     * @param {ibc.core.client.v1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.allowed_clients = [];
                        if (message.allowed_clients && message.allowed_clients.length) {
                            object.allowed_clients = [];
                            for (let j = 0; j < message.allowed_clients.length; ++j)
                                object.allowed_clients[j] = message.allowed_clients[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Params;
                })();

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientStateResponse} [response] QueryClientStateResponse
                     */

                    /**
                     * Calls ClientState.
                     * @function clientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} request QueryClientStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientStateCallback} callback Node-style callback called with the error, if any, and QueryClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientState = function clientState(request, callback) {
                        return this.rpcCall(clientState, $root.ibc.core.client.v1.QueryClientStateRequest, $root.ibc.core.client.v1.QueryClientStateResponse, request, callback);
                    }, "name", { value: "ClientState" });

                    /**
                     * Calls ClientState.
                     * @function clientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} request QueryClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientStates}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientStatesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientStatesResponse} [response] QueryClientStatesResponse
                     */

                    /**
                     * Calls ClientStates.
                     * @function clientStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} request QueryClientStatesRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientStatesCallback} callback Node-style callback called with the error, if any, and QueryClientStatesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientStates = function clientStates(request, callback) {
                        return this.rpcCall(clientStates, $root.ibc.core.client.v1.QueryClientStatesRequest, $root.ibc.core.client.v1.QueryClientStatesResponse, request, callback);
                    }, "name", { value: "ClientStates" });

                    /**
                     * Calls ClientStates.
                     * @function clientStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} request QueryClientStatesRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientStatesResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#consensusState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryConsensusStateResponse} [response] QueryConsensusStateResponse
                     */

                    /**
                     * Calls ConsensusState.
                     * @function consensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} request QueryConsensusStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.consensusState = function consensusState(request, callback) {
                        return this.rpcCall(consensusState, $root.ibc.core.client.v1.QueryConsensusStateRequest, $root.ibc.core.client.v1.QueryConsensusStateResponse, request, callback);
                    }, "name", { value: "ConsensusState" });

                    /**
                     * Calls ConsensusState.
                     * @function consensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} request QueryConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#consensusStates}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ConsensusStatesCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryConsensusStatesResponse} [response] QueryConsensusStatesResponse
                     */

                    /**
                     * Calls ConsensusStates.
                     * @function consensusStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} request QueryConsensusStatesRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ConsensusStatesCallback} callback Node-style callback called with the error, if any, and QueryConsensusStatesResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.consensusStates = function consensusStates(request, callback) {
                        return this.rpcCall(consensusStates, $root.ibc.core.client.v1.QueryConsensusStatesRequest, $root.ibc.core.client.v1.QueryConsensusStatesResponse, request, callback);
                    }, "name", { value: "ConsensusStates" });

                    /**
                     * Calls ConsensusStates.
                     * @function consensusStates
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} request QueryConsensusStatesRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryConsensusStatesResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientStatus}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientStatusCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientStatusResponse} [response] QueryClientStatusResponse
                     */

                    /**
                     * Calls ClientStatus.
                     * @function clientStatus
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} request QueryClientStatusRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientStatusCallback} callback Node-style callback called with the error, if any, and QueryClientStatusResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientStatus = function clientStatus(request, callback) {
                        return this.rpcCall(clientStatus, $root.ibc.core.client.v1.QueryClientStatusRequest, $root.ibc.core.client.v1.QueryClientStatusResponse, request, callback);
                    }, "name", { value: "ClientStatus" });

                    /**
                     * Calls ClientStatus.
                     * @function clientStatus
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} request QueryClientStatusRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientStatusResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#clientParams}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef ClientParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryClientParamsResponse} [response] QueryClientParamsResponse
                     */

                    /**
                     * Calls ClientParams.
                     * @function clientParams
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} request QueryClientParamsRequest message or plain object
                     * @param {ibc.core.client.v1.Query.ClientParamsCallback} callback Node-style callback called with the error, if any, and QueryClientParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientParams = function clientParams(request, callback) {
                        return this.rpcCall(clientParams, $root.ibc.core.client.v1.QueryClientParamsRequest, $root.ibc.core.client.v1.QueryClientParamsResponse, request, callback);
                    }, "name", { value: "ClientParams" });

                    /**
                     * Calls ClientParams.
                     * @function clientParams
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} request QueryClientParamsRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryClientParamsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#upgradedClientState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef UpgradedClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryUpgradedClientStateResponse} [response] QueryUpgradedClientStateResponse
                     */

                    /**
                     * Calls UpgradedClientState.
                     * @function upgradedClientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} request QueryUpgradedClientStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.UpgradedClientStateCallback} callback Node-style callback called with the error, if any, and QueryUpgradedClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.upgradedClientState = function upgradedClientState(request, callback) {
                        return this.rpcCall(upgradedClientState, $root.ibc.core.client.v1.QueryUpgradedClientStateRequest, $root.ibc.core.client.v1.QueryUpgradedClientStateResponse, request, callback);
                    }, "name", { value: "UpgradedClientState" });

                    /**
                     * Calls UpgradedClientState.
                     * @function upgradedClientState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} request QueryUpgradedClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryUpgradedClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Query#upgradedConsensusState}.
                     * @memberof ibc.core.client.v1.Query
                     * @typedef UpgradedConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} [response] QueryUpgradedConsensusStateResponse
                     */

                    /**
                     * Calls UpgradedConsensusState.
                     * @function upgradedConsensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} request QueryUpgradedConsensusStateRequest message or plain object
                     * @param {ibc.core.client.v1.Query.UpgradedConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryUpgradedConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.upgradedConsensusState = function upgradedConsensusState(request, callback) {
                        return this.rpcCall(upgradedConsensusState, $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest, $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse, request, callback);
                    }, "name", { value: "UpgradedConsensusState" });

                    /**
                     * Calls UpgradedConsensusState.
                     * @function upgradedConsensusState
                     * @memberof ibc.core.client.v1.Query
                     * @instance
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} request QueryUpgradedConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.client.v1.QueryUpgradedConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryClientStateRequest = (function() {

                    /**
                     * Properties of a QueryClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStateRequest
                     * @property {string|null} [client_id] QueryClientStateRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStateRequest.
                     * @implements IQueryClientStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStateRequest=} [properties] Properties to set
                     */
                    function QueryClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStateRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @instance
                     */
                    QueryClientStateRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} message QueryClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateRequest} message QueryClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStateRequest} QueryClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStateRequest} QueryClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStateRequest} QueryClientStateRequest
                     */
                    QueryClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStateRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStateRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStateRequest} message QueryClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        return object;
                    };

                    /**
                     * Converts this QueryClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStateRequest;
                })();

                v1.QueryClientStateResponse = (function() {

                    /**
                     * Properties of a QueryClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStateResponse
                     * @property {google.protobuf.IAny|null} [client_state] QueryClientStateResponse client_state
                     * @property {Uint8Array|null} [proof] QueryClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStateResponse.
                     * @implements IQueryClientStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStateResponse=} [properties] Properties to set
                     */
                    function QueryClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStateResponse client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.client_state = null;

                    /**
                     * QueryClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     */
                    QueryClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryClientStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateResponse} message QueryClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStateResponse} message QueryClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStateResponse} QueryClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStateResponse} QueryClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStateResponse} QueryClientStateResponse
                     */
                    QueryClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStateResponse();
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStateResponse.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStateResponse} message QueryClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStateResponse;
                })();

                v1.QueryClientStatesRequest = (function() {

                    /**
                     * Properties of a QueryClientStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatesRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryClientStatesRequest pagination
                     */

                    /**
                     * Constructs a new QueryClientStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatesRequest.
                     * @implements IQueryClientStatesRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest=} [properties] Properties to set
                     */
                    function QueryClientStatesRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @instance
                     */
                    QueryClientStatesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryClientStatesRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} message QueryClientStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatesRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesRequest} message QueryClientStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatesRequest} QueryClientStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatesRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatesRequest} QueryClientStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatesRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatesRequest} QueryClientStatesRequest
                     */
                    QueryClientStatesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatesRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatesRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStatesRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatesRequest} message QueryClientStatesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatesRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatesRequest;
                })();

                v1.QueryClientStatesResponse = (function() {

                    /**
                     * Properties of a QueryClientStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatesResponse
                     * @property {Array.<ibc.core.client.v1.IIdentifiedClientState>|null} [client_states] QueryClientStatesResponse client_states
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryClientStatesResponse pagination
                     */

                    /**
                     * Constructs a new QueryClientStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatesResponse.
                     * @implements IQueryClientStatesResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse=} [properties] Properties to set
                     */
                    function QueryClientStatesResponse(properties) {
                        this.client_states = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatesResponse client_states.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedClientState>} client_states
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     */
                    QueryClientStatesResponse.prototype.client_states = $util.emptyArray;

                    /**
                     * QueryClientStatesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     */
                    QueryClientStatesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryClientStatesResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse} message QueryClientStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_states != null && message.client_states.length)
                            for (let i = 0; i < message.client_states.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedClientState.encode(message.client_states[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatesResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatesResponse} message QueryClientStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatesResponse} QueryClientStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatesResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.client_states && message.client_states.length))
                                    message.client_states = [];
                                message.client_states.push($root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatesResponse} QueryClientStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatesResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_states != null && message.hasOwnProperty("client_states")) {
                            if (!Array.isArray(message.client_states))
                                return "client_states: array expected";
                            for (let i = 0; i < message.client_states.length; ++i) {
                                let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.client_states[i]);
                                if (error)
                                    return "client_states." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatesResponse} QueryClientStatesResponse
                     */
                    QueryClientStatesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatesResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatesResponse();
                        if (object.client_states) {
                            if (!Array.isArray(object.client_states))
                                throw TypeError(".ibc.core.client.v1.QueryClientStatesResponse.client_states: array expected");
                            message.client_states = [];
                            for (let i = 0; i < object.client_states.length; ++i) {
                                if (typeof object.client_states[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.QueryClientStatesResponse.client_states: object expected");
                                message.client_states[i] = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.client_states[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientStatesResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatesResponse} message QueryClientStatesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.client_states = [];
                        if (options.defaults)
                            object.pagination = null;
                        if (message.client_states && message.client_states.length) {
                            object.client_states = [];
                            for (let j = 0; j < message.client_states.length; ++j)
                                object.client_states[j] = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.client_states[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatesResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatesResponse;
                })();

                v1.QueryConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStateRequest
                     * @property {string|null} [client_id] QueryConsensusStateRequest client_id
                     * @property {Long|null} [revision_number] QueryConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryConsensusStateRequest revision_height
                     * @property {boolean|null} [latest_height] QueryConsensusStateRequest latest_height
                     */

                    /**
                     * Constructs a new QueryConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStateRequest.
                     * @implements IQueryConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStateRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.client_id = "";

                    /**
                     * QueryConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryConsensusStateRequest latest_height.
                     * @member {boolean} latest_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     */
                    QueryConsensusStateRequest.prototype.latest_height = false;

                    /**
                     * Encodes the specified QueryConsensusStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} message QueryConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.revision_height);
                        if (message.latest_height != null && Object.hasOwnProperty.call(message, "latest_height"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.latest_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateRequest} message QueryConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStateRequest} QueryConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.revision_number = reader.uint64();
                                break;
                            case 3:
                                message.revision_height = reader.uint64();
                                break;
                            case 4:
                                message.latest_height = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStateRequest} QueryConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        if (message.latest_height != null && message.hasOwnProperty("latest_height"))
                            if (typeof message.latest_height !== "boolean")
                                return "latest_height: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStateRequest} QueryConsensusStateRequest
                     */
                    QueryConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStateRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStateRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        if (object.latest_height != null)
                            message.latest_height = Boolean(object.latest_height);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStateRequest} message QueryConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                            object.latest_height = false;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        if (message.latest_height != null && message.hasOwnProperty("latest_height"))
                            object.latest_height = message.latest_height;
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStateRequest;
                })();

                v1.QueryConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryConsensusStateResponse consensus_state
                     * @property {Uint8Array|null} [proof] QueryConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStateResponse.
                     * @implements IQueryConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     */
                    QueryConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConsensusStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse} message QueryConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStateResponse} message QueryConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStateResponse} QueryConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStateResponse} QueryConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStateResponse} QueryConsensusStateResponse
                     */
                    QueryConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStateResponse();
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStateResponse.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStateResponse} message QueryConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.consensus_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStateResponse;
                })();

                v1.QueryConsensusStatesRequest = (function() {

                    /**
                     * Properties of a QueryConsensusStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStatesRequest
                     * @property {string|null} [client_id] QueryConsensusStatesRequest client_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConsensusStatesRequest pagination
                     */

                    /**
                     * Constructs a new QueryConsensusStatesRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStatesRequest.
                     * @implements IQueryConsensusStatesRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest=} [properties] Properties to set
                     */
                    function QueryConsensusStatesRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStatesRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     */
                    QueryConsensusStatesRequest.prototype.client_id = "";

                    /**
                     * QueryConsensusStatesRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     */
                    QueryConsensusStatesRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConsensusStatesRequest message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} message QueryConsensusStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStatesRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesRequest} message QueryConsensusStatesRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStatesRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStatesRequest} QueryConsensusStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStatesRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStatesRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStatesRequest} QueryConsensusStatesRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStatesRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStatesRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStatesRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStatesRequest} QueryConsensusStatesRequest
                     */
                    QueryConsensusStatesRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStatesRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStatesRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStatesRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStatesRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStatesRequest} message QueryConsensusStatesRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStatesRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.pagination = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStatesRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStatesRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStatesRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStatesRequest;
                })();

                v1.QueryConsensusStatesResponse = (function() {

                    /**
                     * Properties of a QueryConsensusStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryConsensusStatesResponse
                     * @property {Array.<ibc.core.client.v1.IConsensusStateWithHeight>|null} [consensus_states] QueryConsensusStatesResponse consensus_states
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConsensusStatesResponse pagination
                     */

                    /**
                     * Constructs a new QueryConsensusStatesResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryConsensusStatesResponse.
                     * @implements IQueryConsensusStatesResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse=} [properties] Properties to set
                     */
                    function QueryConsensusStatesResponse(properties) {
                        this.consensus_states = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConsensusStatesResponse consensus_states.
                     * @member {Array.<ibc.core.client.v1.IConsensusStateWithHeight>} consensus_states
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     */
                    QueryConsensusStatesResponse.prototype.consensus_states = $util.emptyArray;

                    /**
                     * QueryConsensusStatesResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     */
                    QueryConsensusStatesResponse.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConsensusStatesResponse message. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse} message QueryConsensusStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_states != null && message.consensus_states.length)
                            for (let i = 0; i < message.consensus_states.length; ++i)
                                $root.ibc.core.client.v1.ConsensusStateWithHeight.encode(message.consensus_states[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConsensusStatesResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryConsensusStatesResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryConsensusStatesResponse} message QueryConsensusStatesResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConsensusStatesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConsensusStatesResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryConsensusStatesResponse} QueryConsensusStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryConsensusStatesResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.consensus_states && message.consensus_states.length))
                                    message.consensus_states = [];
                                message.consensus_states.push($root.ibc.core.client.v1.ConsensusStateWithHeight.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConsensusStatesResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryConsensusStatesResponse} QueryConsensusStatesResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConsensusStatesResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConsensusStatesResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConsensusStatesResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_states != null && message.hasOwnProperty("consensus_states")) {
                            if (!Array.isArray(message.consensus_states))
                                return "consensus_states: array expected";
                            for (let i = 0; i < message.consensus_states.length; ++i) {
                                let error = $root.ibc.core.client.v1.ConsensusStateWithHeight.verify(message.consensus_states[i]);
                                if (error)
                                    return "consensus_states." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConsensusStatesResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryConsensusStatesResponse} QueryConsensusStatesResponse
                     */
                    QueryConsensusStatesResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryConsensusStatesResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryConsensusStatesResponse();
                        if (object.consensus_states) {
                            if (!Array.isArray(object.consensus_states))
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states: array expected");
                            message.consensus_states = [];
                            for (let i = 0; i < object.consensus_states.length; ++i) {
                                if (typeof object.consensus_states[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states: object expected");
                                message.consensus_states[i] = $root.ibc.core.client.v1.ConsensusStateWithHeight.fromObject(object.consensus_states[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryConsensusStatesResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConsensusStatesResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryConsensusStatesResponse} message QueryConsensusStatesResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConsensusStatesResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.consensus_states = [];
                        if (options.defaults)
                            object.pagination = null;
                        if (message.consensus_states && message.consensus_states.length) {
                            object.consensus_states = [];
                            for (let j = 0; j < message.consensus_states.length; ++j)
                                object.consensus_states[j] = $root.ibc.core.client.v1.ConsensusStateWithHeight.toObject(message.consensus_states[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConsensusStatesResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryConsensusStatesResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConsensusStatesResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConsensusStatesResponse;
                })();

                v1.QueryClientStatusRequest = (function() {

                    /**
                     * Properties of a QueryClientStatusRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatusRequest
                     * @property {string|null} [client_id] QueryClientStatusRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientStatusRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatusRequest.
                     * @implements IQueryClientStatusRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest=} [properties] Properties to set
                     */
                    function QueryClientStatusRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatusRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @instance
                     */
                    QueryClientStatusRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientStatusRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} message QueryClientStatusRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatusRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusRequest} message QueryClientStatusRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatusRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatusRequest} QueryClientStatusRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatusRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatusRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatusRequest} QueryClientStatusRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatusRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatusRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatusRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatusRequest} QueryClientStatusRequest
                     */
                    QueryClientStatusRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatusRequest)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatusRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatusRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatusRequest} message QueryClientStatusRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatusRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatusRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatusRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatusRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatusRequest;
                })();

                v1.QueryClientStatusResponse = (function() {

                    /**
                     * Properties of a QueryClientStatusResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientStatusResponse
                     * @property {string|null} [status] QueryClientStatusResponse status
                     */

                    /**
                     * Constructs a new QueryClientStatusResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientStatusResponse.
                     * @implements IQueryClientStatusResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientStatusResponse=} [properties] Properties to set
                     */
                    function QueryClientStatusResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientStatusResponse status.
                     * @member {string} status
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @instance
                     */
                    QueryClientStatusResponse.prototype.status = "";

                    /**
                     * Encodes the specified QueryClientStatusResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusResponse} message QueryClientStatusResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.status);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientStatusResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientStatusResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientStatusResponse} message QueryClientStatusResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientStatusResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientStatusResponse} QueryClientStatusResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientStatusResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.status = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientStatusResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientStatusResponse} QueryClientStatusResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientStatusResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientStatusResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientStatusResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.status != null && message.hasOwnProperty("status"))
                            if (!$util.isString(message.status))
                                return "status: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientStatusResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientStatusResponse} QueryClientStatusResponse
                     */
                    QueryClientStatusResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientStatusResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientStatusResponse();
                        if (object.status != null)
                            message.status = String(object.status);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientStatusResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientStatusResponse} message QueryClientStatusResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientStatusResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.status = "";
                        if (message.status != null && message.hasOwnProperty("status"))
                            object.status = message.status;
                        return object;
                    };

                    /**
                     * Converts this QueryClientStatusResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientStatusResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientStatusResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientStatusResponse;
                })();

                v1.QueryClientParamsRequest = (function() {

                    /**
                     * Properties of a QueryClientParamsRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientParamsRequest
                     */

                    /**
                     * Constructs a new QueryClientParamsRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientParamsRequest.
                     * @implements IQueryClientParamsRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest=} [properties] Properties to set
                     */
                    function QueryClientParamsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryClientParamsRequest message. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} message QueryClientParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientParamsRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsRequest} message QueryClientParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientParamsRequest} QueryClientParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientParamsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientParamsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientParamsRequest} QueryClientParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientParamsRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientParamsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientParamsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientParamsRequest} QueryClientParamsRequest
                     */
                    QueryClientParamsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientParamsRequest)
                            return object;
                        return new $root.ibc.core.client.v1.QueryClientParamsRequest();
                    };

                    /**
                     * Creates a plain object from a QueryClientParamsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryClientParamsRequest} message QueryClientParamsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientParamsRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryClientParamsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientParamsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientParamsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientParamsRequest;
                })();

                v1.QueryClientParamsResponse = (function() {

                    /**
                     * Properties of a QueryClientParamsResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryClientParamsResponse
                     * @property {ibc.core.client.v1.IParams|null} [params] QueryClientParamsResponse params
                     */

                    /**
                     * Constructs a new QueryClientParamsResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryClientParamsResponse.
                     * @implements IQueryClientParamsResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse=} [properties] Properties to set
                     */
                    function QueryClientParamsResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientParamsResponse params.
                     * @member {ibc.core.client.v1.IParams|null|undefined} params
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @instance
                     */
                    QueryClientParamsResponse.prototype.params = null;

                    /**
                     * Encodes the specified QueryClientParamsResponse message. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse} message QueryClientParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.core.client.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientParamsResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryClientParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryClientParamsResponse} message QueryClientParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryClientParamsResponse} QueryClientParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryClientParamsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.ibc.core.client.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryClientParamsResponse} QueryClientParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientParamsResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.core.client.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryClientParamsResponse} QueryClientParamsResponse
                     */
                    QueryClientParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryClientParamsResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryClientParamsResponse();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryClientParamsResponse.params: object expected");
                            message.params = $root.ibc.core.client.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryClientParamsResponse} message QueryClientParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientParamsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.params = null;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.core.client.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientParamsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryClientParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientParamsResponse;
                })();

                v1.QueryUpgradedClientStateRequest = (function() {

                    /**
                     * Properties of a QueryUpgradedClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedClientStateRequest
                     */

                    /**
                     * Constructs a new QueryUpgradedClientStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedClientStateRequest.
                     * @implements IQueryUpgradedClientStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest=} [properties] Properties to set
                     */
                    function QueryUpgradedClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryUpgradedClientStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} message QueryUpgradedClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateRequest} message QueryUpgradedClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateRequest} QueryUpgradedClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateRequest} QueryUpgradedClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateRequest} QueryUpgradedClientStateRequest
                     */
                    QueryUpgradedClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedClientStateRequest)
                            return object;
                        return new $root.ibc.core.client.v1.QueryUpgradedClientStateRequest();
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedClientStateRequest} message QueryUpgradedClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedClientStateRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryUpgradedClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedClientStateRequest;
                })();

                v1.QueryUpgradedClientStateResponse = (function() {

                    /**
                     * Properties of a QueryUpgradedClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedClientStateResponse
                     * @property {google.protobuf.IAny|null} [upgraded_client_state] QueryUpgradedClientStateResponse upgraded_client_state
                     */

                    /**
                     * Constructs a new QueryUpgradedClientStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedClientStateResponse.
                     * @implements IQueryUpgradedClientStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateResponse=} [properties] Properties to set
                     */
                    function QueryUpgradedClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUpgradedClientStateResponse upgraded_client_state.
                     * @member {google.protobuf.IAny|null|undefined} upgraded_client_state
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @instance
                     */
                    QueryUpgradedClientStateResponse.prototype.upgraded_client_state = null;

                    /**
                     * Encodes the specified QueryUpgradedClientStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateResponse} message QueryUpgradedClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.upgraded_client_state != null && Object.hasOwnProperty.call(message, "upgraded_client_state"))
                            $root.google.protobuf.Any.encode(message.upgraded_client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedClientStateResponse} message QueryUpgradedClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateResponse} QueryUpgradedClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.upgraded_client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateResponse} QueryUpgradedClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.upgraded_client_state);
                            if (error)
                                return "upgraded_client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedClientStateResponse} QueryUpgradedClientStateResponse
                     */
                    QueryUpgradedClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryUpgradedClientStateResponse();
                        if (object.upgraded_client_state != null) {
                            if (typeof object.upgraded_client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryUpgradedClientStateResponse.upgraded_client_state: object expected");
                            message.upgraded_client_state = $root.google.protobuf.Any.fromObject(object.upgraded_client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedClientStateResponse} message QueryUpgradedClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.upgraded_client_state = null;
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state"))
                            object.upgraded_client_state = $root.google.protobuf.Any.toObject(message.upgraded_client_state, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUpgradedClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedClientStateResponse;
                })();

                v1.QueryUpgradedConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryUpgradedConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedConsensusStateRequest
                     */

                    /**
                     * Constructs a new QueryUpgradedConsensusStateRequest.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedConsensusStateRequest.
                     * @implements IQueryUpgradedConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryUpgradedConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateRequest message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} message QueryUpgradedConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateRequest} message QueryUpgradedConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} QueryUpgradedConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} QueryUpgradedConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} QueryUpgradedConsensusStateRequest
                     */
                    QueryUpgradedConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest)
                            return object;
                        return new $root.ibc.core.client.v1.QueryUpgradedConsensusStateRequest();
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedConsensusStateRequest} message QueryUpgradedConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedConsensusStateRequest.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this QueryUpgradedConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedConsensusStateRequest;
                })();

                v1.QueryUpgradedConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryUpgradedConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IQueryUpgradedConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [upgraded_consensus_state] QueryUpgradedConsensusStateResponse upgraded_consensus_state
                     */

                    /**
                     * Constructs a new QueryUpgradedConsensusStateResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a QueryUpgradedConsensusStateResponse.
                     * @implements IQueryUpgradedConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryUpgradedConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUpgradedConsensusStateResponse upgraded_consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} upgraded_consensus_state
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @instance
                     */
                    QueryUpgradedConsensusStateResponse.prototype.upgraded_consensus_state = null;

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateResponse message. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateResponse} message QueryUpgradedConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.upgraded_consensus_state != null && Object.hasOwnProperty.call(message, "upgraded_consensus_state"))
                            $root.google.protobuf.Any.encode(message.upgraded_consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUpgradedConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.QueryUpgradedConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.IQueryUpgradedConsensusStateResponse} message QueryUpgradedConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUpgradedConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} QueryUpgradedConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.upgraded_consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUpgradedConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} QueryUpgradedConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUpgradedConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUpgradedConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUpgradedConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.upgraded_consensus_state != null && message.hasOwnProperty("upgraded_consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.upgraded_consensus_state);
                            if (error)
                                return "upgraded_consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUpgradedConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} QueryUpgradedConsensusStateResponse
                     */
                    QueryUpgradedConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.client.v1.QueryUpgradedConsensusStateResponse();
                        if (object.upgraded_consensus_state != null) {
                            if (typeof object.upgraded_consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state: object expected");
                            message.upgraded_consensus_state = $root.google.protobuf.Any.fromObject(object.upgraded_consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUpgradedConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @static
                     * @param {ibc.core.client.v1.QueryUpgradedConsensusStateResponse} message QueryUpgradedConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUpgradedConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.upgraded_consensus_state = null;
                        if (message.upgraded_consensus_state != null && message.hasOwnProperty("upgraded_consensus_state"))
                            object.upgraded_consensus_state = $root.google.protobuf.Any.toObject(message.upgraded_consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUpgradedConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.QueryUpgradedConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUpgradedConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUpgradedConsensusStateResponse;
                })();

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#createClient}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef CreateClientCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgCreateClientResponse} [response] MsgCreateClientResponse
                     */

                    /**
                     * Calls CreateClient.
                     * @function createClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgCreateClient} request MsgCreateClient message or plain object
                     * @param {ibc.core.client.v1.Msg.CreateClientCallback} callback Node-style callback called with the error, if any, and MsgCreateClientResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.createClient = function createClient(request, callback) {
                        return this.rpcCall(createClient, $root.ibc.core.client.v1.MsgCreateClient, $root.ibc.core.client.v1.MsgCreateClientResponse, request, callback);
                    }, "name", { value: "CreateClient" });

                    /**
                     * Calls CreateClient.
                     * @function createClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgCreateClient} request MsgCreateClient message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgCreateClientResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#updateClient}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef UpdateClientCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgUpdateClientResponse} [response] MsgUpdateClientResponse
                     */

                    /**
                     * Calls UpdateClient.
                     * @function updateClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpdateClient} request MsgUpdateClient message or plain object
                     * @param {ibc.core.client.v1.Msg.UpdateClientCallback} callback Node-style callback called with the error, if any, and MsgUpdateClientResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.updateClient = function updateClient(request, callback) {
                        return this.rpcCall(updateClient, $root.ibc.core.client.v1.MsgUpdateClient, $root.ibc.core.client.v1.MsgUpdateClientResponse, request, callback);
                    }, "name", { value: "UpdateClient" });

                    /**
                     * Calls UpdateClient.
                     * @function updateClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpdateClient} request MsgUpdateClient message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgUpdateClientResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#upgradeClient}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef UpgradeClientCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgUpgradeClientResponse} [response] MsgUpgradeClientResponse
                     */

                    /**
                     * Calls UpgradeClient.
                     * @function upgradeClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} request MsgUpgradeClient message or plain object
                     * @param {ibc.core.client.v1.Msg.UpgradeClientCallback} callback Node-style callback called with the error, if any, and MsgUpgradeClientResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.upgradeClient = function upgradeClient(request, callback) {
                        return this.rpcCall(upgradeClient, $root.ibc.core.client.v1.MsgUpgradeClient, $root.ibc.core.client.v1.MsgUpgradeClientResponse, request, callback);
                    }, "name", { value: "UpgradeClient" });

                    /**
                     * Calls UpgradeClient.
                     * @function upgradeClient
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} request MsgUpgradeClient message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgUpgradeClientResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.client.v1.Msg#submitMisbehaviour}.
                     * @memberof ibc.core.client.v1.Msg
                     * @typedef SubmitMisbehaviourCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} [response] MsgSubmitMisbehaviourResponse
                     */

                    /**
                     * Calls SubmitMisbehaviour.
                     * @function submitMisbehaviour
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} request MsgSubmitMisbehaviour message or plain object
                     * @param {ibc.core.client.v1.Msg.SubmitMisbehaviourCallback} callback Node-style callback called with the error, if any, and MsgSubmitMisbehaviourResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.submitMisbehaviour = function submitMisbehaviour(request, callback) {
                        return this.rpcCall(submitMisbehaviour, $root.ibc.core.client.v1.MsgSubmitMisbehaviour, $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse, request, callback);
                    }, "name", { value: "SubmitMisbehaviour" });

                    /**
                     * Calls SubmitMisbehaviour.
                     * @function submitMisbehaviour
                     * @memberof ibc.core.client.v1.Msg
                     * @instance
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} request MsgSubmitMisbehaviour message or plain object
                     * @returns {Promise<ibc.core.client.v1.MsgSubmitMisbehaviourResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgCreateClient = (function() {

                    /**
                     * Properties of a MsgCreateClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgCreateClient
                     * @property {google.protobuf.IAny|null} [client_state] MsgCreateClient client_state
                     * @property {google.protobuf.IAny|null} [consensus_state] MsgCreateClient consensus_state
                     * @property {string|null} [signer] MsgCreateClient signer
                     */

                    /**
                     * Constructs a new MsgCreateClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgCreateClient.
                     * @implements IMsgCreateClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgCreateClient=} [properties] Properties to set
                     */
                    function MsgCreateClient(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgCreateClient client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.client_state = null;

                    /**
                     * MsgCreateClient consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.consensus_state = null;

                    /**
                     * MsgCreateClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     */
                    MsgCreateClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgCreateClient message. Does not implicitly {@link ibc.core.client.v1.MsgCreateClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClient} message MsgCreateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClient.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgCreateClient message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgCreateClient.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClient} message MsgCreateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClient.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgCreateClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgCreateClient} MsgCreateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClient.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgCreateClient();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgCreateClient message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgCreateClient} MsgCreateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClient.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgCreateClient message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgCreateClient.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgCreateClient message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgCreateClient} MsgCreateClient
                     */
                    MsgCreateClient.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgCreateClient)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgCreateClient();
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgCreateClient.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgCreateClient.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgCreateClient message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @static
                     * @param {ibc.core.client.v1.MsgCreateClient} message MsgCreateClient
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgCreateClient.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_state = null;
                            object.consensus_state = null;
                            object.signer = "";
                        }
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgCreateClient to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgCreateClient
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgCreateClient.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgCreateClient;
                })();

                v1.MsgCreateClientResponse = (function() {

                    /**
                     * Properties of a MsgCreateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgCreateClientResponse
                     */

                    /**
                     * Constructs a new MsgCreateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgCreateClientResponse.
                     * @implements IMsgCreateClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse=} [properties] Properties to set
                     */
                    function MsgCreateClientResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgCreateClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgCreateClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse} message MsgCreateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClientResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgCreateClientResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgCreateClientResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgCreateClientResponse} message MsgCreateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateClientResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgCreateClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgCreateClientResponse} MsgCreateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClientResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgCreateClientResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgCreateClientResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgCreateClientResponse} MsgCreateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateClientResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgCreateClientResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgCreateClientResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgCreateClientResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgCreateClientResponse} MsgCreateClientResponse
                     */
                    MsgCreateClientResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgCreateClientResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgCreateClientResponse();
                    };

                    /**
                     * Creates a plain object from a MsgCreateClientResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgCreateClientResponse} message MsgCreateClientResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgCreateClientResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgCreateClientResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgCreateClientResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgCreateClientResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgCreateClientResponse;
                })();

                v1.MsgUpdateClient = (function() {

                    /**
                     * Properties of a MsgUpdateClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpdateClient
                     * @property {string|null} [client_id] MsgUpdateClient client_id
                     * @property {google.protobuf.IAny|null} [header] MsgUpdateClient header
                     * @property {string|null} [signer] MsgUpdateClient signer
                     */

                    /**
                     * Constructs a new MsgUpdateClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpdateClient.
                     * @implements IMsgUpdateClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpdateClient=} [properties] Properties to set
                     */
                    function MsgUpdateClient(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgUpdateClient client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.client_id = "";

                    /**
                     * MsgUpdateClient header.
                     * @member {google.protobuf.IAny|null|undefined} header
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.header = null;

                    /**
                     * MsgUpdateClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     */
                    MsgUpdateClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgUpdateClient message. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClient} message MsgUpdateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClient.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                            $root.google.protobuf.Any.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpdateClient message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClient.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClient} message MsgUpdateClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClient.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpdateClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpdateClient} MsgUpdateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClient.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpdateClient();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.header = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpdateClient message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpdateClient} MsgUpdateClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClient.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpdateClient message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateClient.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.header != null && message.hasOwnProperty("header")) {
                            let error = $root.google.protobuf.Any.verify(message.header);
                            if (error)
                                return "header." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpdateClient message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpdateClient} MsgUpdateClient
                     */
                    MsgUpdateClient.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpdateClient)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgUpdateClient();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.header != null) {
                            if (typeof object.header !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgUpdateClient.header: object expected");
                            message.header = $root.google.protobuf.Any.fromObject(object.header);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgUpdateClient message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @static
                     * @param {ibc.core.client.v1.MsgUpdateClient} message MsgUpdateClient
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateClient.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.header = null;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.header != null && message.hasOwnProperty("header"))
                            object.header = $root.google.protobuf.Any.toObject(message.header, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgUpdateClient to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpdateClient
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateClient.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpdateClient;
                })();

                v1.MsgUpdateClientResponse = (function() {

                    /**
                     * Properties of a MsgUpdateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpdateClientResponse
                     */

                    /**
                     * Constructs a new MsgUpdateClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpdateClientResponse.
                     * @implements IMsgUpdateClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse=} [properties] Properties to set
                     */
                    function MsgUpdateClientResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgUpdateClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse} message MsgUpdateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClientResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpdateClientResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpdateClientResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpdateClientResponse} message MsgUpdateClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateClientResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpdateClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpdateClientResponse} MsgUpdateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClientResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpdateClientResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpdateClientResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpdateClientResponse} MsgUpdateClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateClientResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpdateClientResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateClientResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpdateClientResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpdateClientResponse} MsgUpdateClientResponse
                     */
                    MsgUpdateClientResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpdateClientResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgUpdateClientResponse();
                    };

                    /**
                     * Creates a plain object from a MsgUpdateClientResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgUpdateClientResponse} message MsgUpdateClientResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateClientResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgUpdateClientResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpdateClientResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateClientResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpdateClientResponse;
                })();

                v1.MsgUpgradeClient = (function() {

                    /**
                     * Properties of a MsgUpgradeClient.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpgradeClient
                     * @property {string|null} [client_id] MsgUpgradeClient client_id
                     * @property {google.protobuf.IAny|null} [client_state] MsgUpgradeClient client_state
                     * @property {google.protobuf.IAny|null} [consensus_state] MsgUpgradeClient consensus_state
                     * @property {Uint8Array|null} [proof_upgrade_client] MsgUpgradeClient proof_upgrade_client
                     * @property {Uint8Array|null} [proof_upgrade_consensus_state] MsgUpgradeClient proof_upgrade_consensus_state
                     * @property {string|null} [signer] MsgUpgradeClient signer
                     */

                    /**
                     * Constructs a new MsgUpgradeClient.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpgradeClient.
                     * @implements IMsgUpgradeClient
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpgradeClient=} [properties] Properties to set
                     */
                    function MsgUpgradeClient(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgUpgradeClient client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.client_id = "";

                    /**
                     * MsgUpgradeClient client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.client_state = null;

                    /**
                     * MsgUpgradeClient consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.consensus_state = null;

                    /**
                     * MsgUpgradeClient proof_upgrade_client.
                     * @member {Uint8Array} proof_upgrade_client
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.proof_upgrade_client = $util.newBuffer([]);

                    /**
                     * MsgUpgradeClient proof_upgrade_consensus_state.
                     * @member {Uint8Array} proof_upgrade_consensus_state
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.proof_upgrade_consensus_state = $util.newBuffer([]);

                    /**
                     * MsgUpgradeClient signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     */
                    MsgUpgradeClient.prototype.signer = "";

                    /**
                     * Encodes the specified MsgUpgradeClient message. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClient.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} message MsgUpgradeClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClient.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.proof_upgrade_client != null && Object.hasOwnProperty.call(message, "proof_upgrade_client"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.proof_upgrade_client);
                        if (message.proof_upgrade_consensus_state != null && Object.hasOwnProperty.call(message, "proof_upgrade_consensus_state"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.proof_upgrade_consensus_state);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpgradeClient message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClient.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClient} message MsgUpgradeClient message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClient.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpgradeClient message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpgradeClient} MsgUpgradeClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClient.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpgradeClient();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.proof_upgrade_client = reader.bytes();
                                break;
                            case 5:
                                message.proof_upgrade_consensus_state = reader.bytes();
                                break;
                            case 6:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpgradeClient message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpgradeClient} MsgUpgradeClient
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClient.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpgradeClient message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpgradeClient.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.proof_upgrade_client != null && message.hasOwnProperty("proof_upgrade_client"))
                            if (!(message.proof_upgrade_client && typeof message.proof_upgrade_client.length === "number" || $util.isString(message.proof_upgrade_client)))
                                return "proof_upgrade_client: buffer expected";
                        if (message.proof_upgrade_consensus_state != null && message.hasOwnProperty("proof_upgrade_consensus_state"))
                            if (!(message.proof_upgrade_consensus_state && typeof message.proof_upgrade_consensus_state.length === "number" || $util.isString(message.proof_upgrade_consensus_state)))
                                return "proof_upgrade_consensus_state: buffer expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpgradeClient message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpgradeClient} MsgUpgradeClient
                     */
                    MsgUpgradeClient.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpgradeClient)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgUpgradeClient();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgUpgradeClient.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgUpgradeClient.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.proof_upgrade_client != null)
                            if (typeof object.proof_upgrade_client === "string")
                                $util.base64.decode(object.proof_upgrade_client, message.proof_upgrade_client = $util.newBuffer($util.base64.length(object.proof_upgrade_client)), 0);
                            else if (object.proof_upgrade_client.length)
                                message.proof_upgrade_client = object.proof_upgrade_client;
                        if (object.proof_upgrade_consensus_state != null)
                            if (typeof object.proof_upgrade_consensus_state === "string")
                                $util.base64.decode(object.proof_upgrade_consensus_state, message.proof_upgrade_consensus_state = $util.newBuffer($util.base64.length(object.proof_upgrade_consensus_state)), 0);
                            else if (object.proof_upgrade_consensus_state.length)
                                message.proof_upgrade_consensus_state = object.proof_upgrade_consensus_state;
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgUpgradeClient message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @static
                     * @param {ibc.core.client.v1.MsgUpgradeClient} message MsgUpgradeClient
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpgradeClient.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.client_state = null;
                            object.consensus_state = null;
                            if (options.bytes === String)
                                object.proof_upgrade_client = "";
                            else {
                                object.proof_upgrade_client = [];
                                if (options.bytes !== Array)
                                    object.proof_upgrade_client = $util.newBuffer(object.proof_upgrade_client);
                            }
                            if (options.bytes === String)
                                object.proof_upgrade_consensus_state = "";
                            else {
                                object.proof_upgrade_consensus_state = [];
                                if (options.bytes !== Array)
                                    object.proof_upgrade_consensus_state = $util.newBuffer(object.proof_upgrade_consensus_state);
                            }
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.proof_upgrade_client != null && message.hasOwnProperty("proof_upgrade_client"))
                            object.proof_upgrade_client = options.bytes === String ? $util.base64.encode(message.proof_upgrade_client, 0, message.proof_upgrade_client.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_upgrade_client) : message.proof_upgrade_client;
                        if (message.proof_upgrade_consensus_state != null && message.hasOwnProperty("proof_upgrade_consensus_state"))
                            object.proof_upgrade_consensus_state = options.bytes === String ? $util.base64.encode(message.proof_upgrade_consensus_state, 0, message.proof_upgrade_consensus_state.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_upgrade_consensus_state) : message.proof_upgrade_consensus_state;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgUpgradeClient to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpgradeClient
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpgradeClient.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpgradeClient;
                })();

                v1.MsgUpgradeClientResponse = (function() {

                    /**
                     * Properties of a MsgUpgradeClientResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgUpgradeClientResponse
                     */

                    /**
                     * Constructs a new MsgUpgradeClientResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgUpgradeClientResponse.
                     * @implements IMsgUpgradeClientResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse=} [properties] Properties to set
                     */
                    function MsgUpgradeClientResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgUpgradeClientResponse message. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClientResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse} message MsgUpgradeClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClientResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgUpgradeClientResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgUpgradeClientResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgUpgradeClientResponse} message MsgUpgradeClientResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpgradeClientResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgUpgradeClientResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgUpgradeClientResponse} MsgUpgradeClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClientResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgUpgradeClientResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgUpgradeClientResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgUpgradeClientResponse} MsgUpgradeClientResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpgradeClientResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgUpgradeClientResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpgradeClientResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgUpgradeClientResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgUpgradeClientResponse} MsgUpgradeClientResponse
                     */
                    MsgUpgradeClientResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgUpgradeClientResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgUpgradeClientResponse();
                    };

                    /**
                     * Creates a plain object from a MsgUpgradeClientResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgUpgradeClientResponse} message MsgUpgradeClientResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpgradeClientResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgUpgradeClientResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgUpgradeClientResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpgradeClientResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgUpgradeClientResponse;
                })();

                v1.MsgSubmitMisbehaviour = (function() {

                    /**
                     * Properties of a MsgSubmitMisbehaviour.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgSubmitMisbehaviour
                     * @property {string|null} [client_id] MsgSubmitMisbehaviour client_id
                     * @property {google.protobuf.IAny|null} [misbehaviour] MsgSubmitMisbehaviour misbehaviour
                     * @property {string|null} [signer] MsgSubmitMisbehaviour signer
                     */

                    /**
                     * Constructs a new MsgSubmitMisbehaviour.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgSubmitMisbehaviour.
                     * @implements IMsgSubmitMisbehaviour
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour=} [properties] Properties to set
                     */
                    function MsgSubmitMisbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgSubmitMisbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.client_id = "";

                    /**
                     * MsgSubmitMisbehaviour misbehaviour.
                     * @member {google.protobuf.IAny|null|undefined} misbehaviour
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.misbehaviour = null;

                    /**
                     * MsgSubmitMisbehaviour signer.
                     * @member {string} signer
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     */
                    MsgSubmitMisbehaviour.prototype.signer = "";

                    /**
                     * Encodes the specified MsgSubmitMisbehaviour message. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} message MsgSubmitMisbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.misbehaviour != null && Object.hasOwnProperty.call(message, "misbehaviour"))
                            $root.google.protobuf.Any.encode(message.misbehaviour, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgSubmitMisbehaviour message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviour} message MsgSubmitMisbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviour} MsgSubmitMisbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgSubmitMisbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.misbehaviour = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviour} MsgSubmitMisbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgSubmitMisbehaviour message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSubmitMisbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.misbehaviour != null && message.hasOwnProperty("misbehaviour")) {
                            let error = $root.google.protobuf.Any.verify(message.misbehaviour);
                            if (error)
                                return "misbehaviour." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgSubmitMisbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviour} MsgSubmitMisbehaviour
                     */
                    MsgSubmitMisbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgSubmitMisbehaviour)
                            return object;
                        let message = new $root.ibc.core.client.v1.MsgSubmitMisbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.misbehaviour != null) {
                            if (typeof object.misbehaviour !== "object")
                                throw TypeError(".ibc.core.client.v1.MsgSubmitMisbehaviour.misbehaviour: object expected");
                            message.misbehaviour = $root.google.protobuf.Any.fromObject(object.misbehaviour);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgSubmitMisbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @static
                     * @param {ibc.core.client.v1.MsgSubmitMisbehaviour} message MsgSubmitMisbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSubmitMisbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.misbehaviour = null;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.misbehaviour != null && message.hasOwnProperty("misbehaviour"))
                            object.misbehaviour = $root.google.protobuf.Any.toObject(message.misbehaviour, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgSubmitMisbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSubmitMisbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgSubmitMisbehaviour;
                })();

                v1.MsgSubmitMisbehaviourResponse = (function() {

                    /**
                     * Properties of a MsgSubmitMisbehaviourResponse.
                     * @memberof ibc.core.client.v1
                     * @interface IMsgSubmitMisbehaviourResponse
                     */

                    /**
                     * Constructs a new MsgSubmitMisbehaviourResponse.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a MsgSubmitMisbehaviourResponse.
                     * @implements IMsgSubmitMisbehaviourResponse
                     * @constructor
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse=} [properties] Properties to set
                     */
                    function MsgSubmitMisbehaviourResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgSubmitMisbehaviourResponse message. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviourResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse} message MsgSubmitMisbehaviourResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviourResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgSubmitMisbehaviourResponse message, length delimited. Does not implicitly {@link ibc.core.client.v1.MsgSubmitMisbehaviourResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {ibc.core.client.v1.IMsgSubmitMisbehaviourResponse} message MsgSubmitMisbehaviourResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitMisbehaviourResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviourResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} MsgSubmitMisbehaviourResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviourResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgSubmitMisbehaviourResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} MsgSubmitMisbehaviourResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitMisbehaviourResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgSubmitMisbehaviourResponse message.
                     * @function verify
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSubmitMisbehaviourResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgSubmitMisbehaviourResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} MsgSubmitMisbehaviourResponse
                     */
                    MsgSubmitMisbehaviourResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse)
                            return object;
                        return new $root.ibc.core.client.v1.MsgSubmitMisbehaviourResponse();
                    };

                    /**
                     * Creates a plain object from a MsgSubmitMisbehaviourResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @static
                     * @param {ibc.core.client.v1.MsgSubmitMisbehaviourResponse} message MsgSubmitMisbehaviourResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSubmitMisbehaviourResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgSubmitMisbehaviourResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.MsgSubmitMisbehaviourResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSubmitMisbehaviourResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgSubmitMisbehaviourResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.client.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.client.v1.IIdentifiedClientState>|null} [clients] GenesisState clients
                     * @property {Array.<ibc.core.client.v1.IClientConsensusStates>|null} [clients_consensus] GenesisState clients_consensus
                     * @property {Array.<ibc.core.client.v1.IIdentifiedGenesisMetadata>|null} [clients_metadata] GenesisState clients_metadata
                     * @property {ibc.core.client.v1.IParams|null} [params] GenesisState params
                     * @property {boolean|null} [create_localhost] GenesisState create_localhost
                     * @property {Long|null} [next_client_sequence] GenesisState next_client_sequence
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.client.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.clients = [];
                        this.clients_consensus = [];
                        this.clients_metadata = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState clients.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedClientState>} clients
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients = $util.emptyArray;

                    /**
                     * GenesisState clients_consensus.
                     * @member {Array.<ibc.core.client.v1.IClientConsensusStates>} clients_consensus
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients_consensus = $util.emptyArray;

                    /**
                     * GenesisState clients_metadata.
                     * @member {Array.<ibc.core.client.v1.IIdentifiedGenesisMetadata>} clients_metadata
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.clients_metadata = $util.emptyArray;

                    /**
                     * GenesisState params.
                     * @member {ibc.core.client.v1.IParams|null|undefined} params
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * GenesisState create_localhost.
                     * @member {boolean} create_localhost
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.create_localhost = false;

                    /**
                     * GenesisState next_client_sequence.
                     * @member {Long} next_client_sequence
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_client_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.client.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {ibc.core.client.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.clients != null && message.clients.length)
                            for (let i = 0; i < message.clients.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedClientState.encode(message.clients[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.clients_consensus != null && message.clients_consensus.length)
                            for (let i = 0; i < message.clients_consensus.length; ++i)
                                $root.ibc.core.client.v1.ClientConsensusStates.encode(message.clients_consensus[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.clients_metadata != null && message.clients_metadata.length)
                            for (let i = 0; i < message.clients_metadata.length; ++i)
                                $root.ibc.core.client.v1.IdentifiedGenesisMetadata.encode(message.clients_metadata[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.core.client.v1.Params.encode(message.params, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.create_localhost != null && Object.hasOwnProperty.call(message, "create_localhost"))
                            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.create_localhost);
                        if (message.next_client_sequence != null && Object.hasOwnProperty.call(message, "next_client_sequence"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.next_client_sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.client.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {ibc.core.client.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.clients && message.clients.length))
                                    message.clients = [];
                                message.clients.push($root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.clients_consensus && message.clients_consensus.length))
                                    message.clients_consensus = [];
                                message.clients_consensus.push($root.ibc.core.client.v1.ClientConsensusStates.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.clients_metadata && message.clients_metadata.length))
                                    message.clients_metadata = [];
                                message.clients_metadata.push($root.ibc.core.client.v1.IdentifiedGenesisMetadata.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                message.params = $root.ibc.core.client.v1.Params.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.create_localhost = reader.bool();
                                break;
                            case 6:
                                message.next_client_sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.clients != null && message.hasOwnProperty("clients")) {
                            if (!Array.isArray(message.clients))
                                return "clients: array expected";
                            for (let i = 0; i < message.clients.length; ++i) {
                                let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.clients[i]);
                                if (error)
                                    return "clients." + error;
                            }
                        }
                        if (message.clients_consensus != null && message.hasOwnProperty("clients_consensus")) {
                            if (!Array.isArray(message.clients_consensus))
                                return "clients_consensus: array expected";
                            for (let i = 0; i < message.clients_consensus.length; ++i) {
                                let error = $root.ibc.core.client.v1.ClientConsensusStates.verify(message.clients_consensus[i]);
                                if (error)
                                    return "clients_consensus." + error;
                            }
                        }
                        if (message.clients_metadata != null && message.hasOwnProperty("clients_metadata")) {
                            if (!Array.isArray(message.clients_metadata))
                                return "clients_metadata: array expected";
                            for (let i = 0; i < message.clients_metadata.length; ++i) {
                                let error = $root.ibc.core.client.v1.IdentifiedGenesisMetadata.verify(message.clients_metadata[i]);
                                if (error)
                                    return "clients_metadata." + error;
                            }
                        }
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.core.client.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        if (message.create_localhost != null && message.hasOwnProperty("create_localhost"))
                            if (typeof message.create_localhost !== "boolean")
                                return "create_localhost: boolean expected";
                        if (message.next_client_sequence != null && message.hasOwnProperty("next_client_sequence"))
                            if (!$util.isInteger(message.next_client_sequence) && !(message.next_client_sequence && $util.isInteger(message.next_client_sequence.low) && $util.isInteger(message.next_client_sequence.high)))
                                return "next_client_sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.client.v1.GenesisState();
                        if (object.clients) {
                            if (!Array.isArray(object.clients))
                                throw TypeError(".ibc.core.client.v1.GenesisState.clients: array expected");
                            message.clients = [];
                            for (let i = 0; i < object.clients.length; ++i) {
                                if (typeof object.clients[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.GenesisState.clients: object expected");
                                message.clients[i] = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.clients[i]);
                            }
                        }
                        if (object.clients_consensus) {
                            if (!Array.isArray(object.clients_consensus))
                                throw TypeError(".ibc.core.client.v1.GenesisState.clients_consensus: array expected");
                            message.clients_consensus = [];
                            for (let i = 0; i < object.clients_consensus.length; ++i) {
                                if (typeof object.clients_consensus[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.GenesisState.clients_consensus: object expected");
                                message.clients_consensus[i] = $root.ibc.core.client.v1.ClientConsensusStates.fromObject(object.clients_consensus[i]);
                            }
                        }
                        if (object.clients_metadata) {
                            if (!Array.isArray(object.clients_metadata))
                                throw TypeError(".ibc.core.client.v1.GenesisState.clients_metadata: array expected");
                            message.clients_metadata = [];
                            for (let i = 0; i < object.clients_metadata.length; ++i) {
                                if (typeof object.clients_metadata[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.GenesisState.clients_metadata: object expected");
                                message.clients_metadata[i] = $root.ibc.core.client.v1.IdentifiedGenesisMetadata.fromObject(object.clients_metadata[i]);
                            }
                        }
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.core.client.v1.GenesisState.params: object expected");
                            message.params = $root.ibc.core.client.v1.Params.fromObject(object.params);
                        }
                        if (object.create_localhost != null)
                            message.create_localhost = Boolean(object.create_localhost);
                        if (object.next_client_sequence != null)
                            if ($util.Long)
                                (message.next_client_sequence = $util.Long.fromValue(object.next_client_sequence)).unsigned = true;
                            else if (typeof object.next_client_sequence === "string")
                                message.next_client_sequence = parseInt(object.next_client_sequence, 10);
                            else if (typeof object.next_client_sequence === "number")
                                message.next_client_sequence = object.next_client_sequence;
                            else if (typeof object.next_client_sequence === "object")
                                message.next_client_sequence = new $util.LongBits(object.next_client_sequence.low >>> 0, object.next_client_sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.GenesisState
                     * @static
                     * @param {ibc.core.client.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.clients = [];
                            object.clients_consensus = [];
                            object.clients_metadata = [];
                        }
                        if (options.defaults) {
                            object.params = null;
                            object.create_localhost = false;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_client_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_client_sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.clients && message.clients.length) {
                            object.clients = [];
                            for (let j = 0; j < message.clients.length; ++j)
                                object.clients[j] = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.clients[j], options);
                        }
                        if (message.clients_consensus && message.clients_consensus.length) {
                            object.clients_consensus = [];
                            for (let j = 0; j < message.clients_consensus.length; ++j)
                                object.clients_consensus[j] = $root.ibc.core.client.v1.ClientConsensusStates.toObject(message.clients_consensus[j], options);
                        }
                        if (message.clients_metadata && message.clients_metadata.length) {
                            object.clients_metadata = [];
                            for (let j = 0; j < message.clients_metadata.length; ++j)
                                object.clients_metadata[j] = $root.ibc.core.client.v1.IdentifiedGenesisMetadata.toObject(message.clients_metadata[j], options);
                        }
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.core.client.v1.Params.toObject(message.params, options);
                        if (message.create_localhost != null && message.hasOwnProperty("create_localhost"))
                            object.create_localhost = message.create_localhost;
                        if (message.next_client_sequence != null && message.hasOwnProperty("next_client_sequence"))
                            if (typeof message.next_client_sequence === "number")
                                object.next_client_sequence = options.longs === String ? String(message.next_client_sequence) : message.next_client_sequence;
                            else
                                object.next_client_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.next_client_sequence) : options.longs === Number ? new $util.LongBits(message.next_client_sequence.low >>> 0, message.next_client_sequence.high >>> 0).toNumber(true) : message.next_client_sequence;
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                v1.GenesisMetadata = (function() {

                    /**
                     * Properties of a GenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @interface IGenesisMetadata
                     * @property {Uint8Array|null} [key] GenesisMetadata key
                     * @property {Uint8Array|null} [value] GenesisMetadata value
                     */

                    /**
                     * Constructs a new GenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents a GenesisMetadata.
                     * @implements IGenesisMetadata
                     * @constructor
                     * @param {ibc.core.client.v1.IGenesisMetadata=} [properties] Properties to set
                     */
                    function GenesisMetadata(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisMetadata key.
                     * @member {Uint8Array} key
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     */
                    GenesisMetadata.prototype.key = $util.newBuffer([]);

                    /**
                     * GenesisMetadata value.
                     * @member {Uint8Array} value
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     */
                    GenesisMetadata.prototype.value = $util.newBuffer([]);

                    /**
                     * Encodes the specified GenesisMetadata message. Does not implicitly {@link ibc.core.client.v1.GenesisMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IGenesisMetadata} message GenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisMetadata message, length delimited. Does not implicitly {@link ibc.core.client.v1.GenesisMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IGenesisMetadata} message GenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.GenesisMetadata} GenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.GenesisMetadata();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            case 2:
                                message.value = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.GenesisMetadata} GenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisMetadata message.
                     * @function verify
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        if (message.value != null && message.hasOwnProperty("value"))
                            if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                                return "value: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a GenesisMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.GenesisMetadata} GenesisMetadata
                     */
                    GenesisMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.GenesisMetadata)
                            return object;
                        let message = new $root.ibc.core.client.v1.GenesisMetadata();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        if (object.value != null)
                            if (typeof object.value === "string")
                                $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                            else if (object.value.length)
                                message.value = object.value;
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.GenesisMetadata} message GenesisMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                            if (options.bytes === String)
                                object.value = "";
                            else {
                                object.value = [];
                                if (options.bytes !== Array)
                                    object.value = $util.newBuffer(object.value);
                            }
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        if (message.value != null && message.hasOwnProperty("value"))
                            object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                        return object;
                    };

                    /**
                     * Converts this GenesisMetadata to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.GenesisMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisMetadata;
                })();

                v1.IdentifiedGenesisMetadata = (function() {

                    /**
                     * Properties of an IdentifiedGenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @interface IIdentifiedGenesisMetadata
                     * @property {string|null} [client_id] IdentifiedGenesisMetadata client_id
                     * @property {Array.<ibc.core.client.v1.IGenesisMetadata>|null} [client_metadata] IdentifiedGenesisMetadata client_metadata
                     */

                    /**
                     * Constructs a new IdentifiedGenesisMetadata.
                     * @memberof ibc.core.client.v1
                     * @classdesc Represents an IdentifiedGenesisMetadata.
                     * @implements IIdentifiedGenesisMetadata
                     * @constructor
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata=} [properties] Properties to set
                     */
                    function IdentifiedGenesisMetadata(properties) {
                        this.client_metadata = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedGenesisMetadata client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     */
                    IdentifiedGenesisMetadata.prototype.client_id = "";

                    /**
                     * IdentifiedGenesisMetadata client_metadata.
                     * @member {Array.<ibc.core.client.v1.IGenesisMetadata>} client_metadata
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     */
                    IdentifiedGenesisMetadata.prototype.client_metadata = $util.emptyArray;

                    /**
                     * Encodes the specified IdentifiedGenesisMetadata message. Does not implicitly {@link ibc.core.client.v1.IdentifiedGenesisMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata} message IdentifiedGenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedGenesisMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.client_metadata != null && message.client_metadata.length)
                            for (let i = 0; i < message.client_metadata.length; ++i)
                                $root.ibc.core.client.v1.GenesisMetadata.encode(message.client_metadata[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedGenesisMetadata message, length delimited. Does not implicitly {@link ibc.core.client.v1.IdentifiedGenesisMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IIdentifiedGenesisMetadata} message IdentifiedGenesisMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedGenesisMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedGenesisMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.client.v1.IdentifiedGenesisMetadata} IdentifiedGenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedGenesisMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.IdentifiedGenesisMetadata();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.client_metadata && message.client_metadata.length))
                                    message.client_metadata = [];
                                message.client_metadata.push($root.ibc.core.client.v1.GenesisMetadata.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedGenesisMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.client.v1.IdentifiedGenesisMetadata} IdentifiedGenesisMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedGenesisMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedGenesisMetadata message.
                     * @function verify
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedGenesisMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.client_metadata != null && message.hasOwnProperty("client_metadata")) {
                            if (!Array.isArray(message.client_metadata))
                                return "client_metadata: array expected";
                            for (let i = 0; i < message.client_metadata.length; ++i) {
                                let error = $root.ibc.core.client.v1.GenesisMetadata.verify(message.client_metadata[i]);
                                if (error)
                                    return "client_metadata." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates an IdentifiedGenesisMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.client.v1.IdentifiedGenesisMetadata} IdentifiedGenesisMetadata
                     */
                    IdentifiedGenesisMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.client.v1.IdentifiedGenesisMetadata)
                            return object;
                        let message = new $root.ibc.core.client.v1.IdentifiedGenesisMetadata();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.client_metadata) {
                            if (!Array.isArray(object.client_metadata))
                                throw TypeError(".ibc.core.client.v1.IdentifiedGenesisMetadata.client_metadata: array expected");
                            message.client_metadata = [];
                            for (let i = 0; i < object.client_metadata.length; ++i) {
                                if (typeof object.client_metadata[i] !== "object")
                                    throw TypeError(".ibc.core.client.v1.IdentifiedGenesisMetadata.client_metadata: object expected");
                                message.client_metadata[i] = $root.ibc.core.client.v1.GenesisMetadata.fromObject(object.client_metadata[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedGenesisMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @static
                     * @param {ibc.core.client.v1.IdentifiedGenesisMetadata} message IdentifiedGenesisMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedGenesisMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.client_metadata = [];
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.client_metadata && message.client_metadata.length) {
                            object.client_metadata = [];
                            for (let j = 0; j < message.client_metadata.length; ++j)
                                object.client_metadata[j] = $root.ibc.core.client.v1.GenesisMetadata.toObject(message.client_metadata[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this IdentifiedGenesisMetadata to JSON.
                     * @function toJSON
                     * @memberof ibc.core.client.v1.IdentifiedGenesisMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedGenesisMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedGenesisMetadata;
                })();

                return v1;
            })();

            return client;
        })();

        core.channel = (function() {

            /**
             * Namespace channel.
             * @memberof ibc.core
             * @namespace
             */
            const channel = {};

            channel.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.channel
                 * @namespace
                 */
                const v1 = {};

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channel}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelResponse} [response] QueryChannelResponse
                     */

                    /**
                     * Calls Channel.
                     * @function channel
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} request QueryChannelRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelCallback} callback Node-style callback called with the error, if any, and QueryChannelResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channel = function channel(request, callback) {
                        return this.rpcCall(channel, $root.ibc.core.channel.v1.QueryChannelRequest, $root.ibc.core.channel.v1.QueryChannelResponse, request, callback);
                    }, "name", { value: "Channel" });

                    /**
                     * Calls Channel.
                     * @function channel
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} request QueryChannelRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channels}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelsResponse} [response] QueryChannelsResponse
                     */

                    /**
                     * Calls Channels.
                     * @function channels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} request QueryChannelsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelsCallback} callback Node-style callback called with the error, if any, and QueryChannelsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channels = function channels(request, callback) {
                        return this.rpcCall(channels, $root.ibc.core.channel.v1.QueryChannelsRequest, $root.ibc.core.channel.v1.QueryChannelsResponse, request, callback);
                    }, "name", { value: "Channels" });

                    /**
                     * Calls Channels.
                     * @function channels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} request QueryChannelsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#connectionChannels}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ConnectionChannelsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryConnectionChannelsResponse} [response] QueryConnectionChannelsResponse
                     */

                    /**
                     * Calls ConnectionChannels.
                     * @function connectionChannels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} request QueryConnectionChannelsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ConnectionChannelsCallback} callback Node-style callback called with the error, if any, and QueryConnectionChannelsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connectionChannels = function connectionChannels(request, callback) {
                        return this.rpcCall(connectionChannels, $root.ibc.core.channel.v1.QueryConnectionChannelsRequest, $root.ibc.core.channel.v1.QueryConnectionChannelsResponse, request, callback);
                    }, "name", { value: "ConnectionChannels" });

                    /**
                     * Calls ConnectionChannels.
                     * @function connectionChannels
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} request QueryConnectionChannelsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryConnectionChannelsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channelClientState}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelClientStateResponse} [response] QueryChannelClientStateResponse
                     */

                    /**
                     * Calls ChannelClientState.
                     * @function channelClientState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} request QueryChannelClientStateRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelClientStateCallback} callback Node-style callback called with the error, if any, and QueryChannelClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channelClientState = function channelClientState(request, callback) {
                        return this.rpcCall(channelClientState, $root.ibc.core.channel.v1.QueryChannelClientStateRequest, $root.ibc.core.channel.v1.QueryChannelClientStateResponse, request, callback);
                    }, "name", { value: "ChannelClientState" });

                    /**
                     * Calls ChannelClientState.
                     * @function channelClientState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} request QueryChannelClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#channelConsensusState}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef ChannelConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryChannelConsensusStateResponse} [response] QueryChannelConsensusStateResponse
                     */

                    /**
                     * Calls ChannelConsensusState.
                     * @function channelConsensusState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} request QueryChannelConsensusStateRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.ChannelConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryChannelConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.channelConsensusState = function channelConsensusState(request, callback) {
                        return this.rpcCall(channelConsensusState, $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest, $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse, request, callback);
                    }, "name", { value: "ChannelConsensusState" });

                    /**
                     * Calls ChannelConsensusState.
                     * @function channelConsensusState
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} request QueryChannelConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryChannelConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetCommitment}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketCommitmentCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentResponse} [response] QueryPacketCommitmentResponse
                     */

                    /**
                     * Calls PacketCommitment.
                     * @function packetCommitment
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} request QueryPacketCommitmentRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketCommitmentCallback} callback Node-style callback called with the error, if any, and QueryPacketCommitmentResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetCommitment = function packetCommitment(request, callback) {
                        return this.rpcCall(packetCommitment, $root.ibc.core.channel.v1.QueryPacketCommitmentRequest, $root.ibc.core.channel.v1.QueryPacketCommitmentResponse, request, callback);
                    }, "name", { value: "PacketCommitment" });

                    /**
                     * Calls PacketCommitment.
                     * @function packetCommitment
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} request QueryPacketCommitmentRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketCommitmentResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetCommitments}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketCommitmentsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentsResponse} [response] QueryPacketCommitmentsResponse
                     */

                    /**
                     * Calls PacketCommitments.
                     * @function packetCommitments
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} request QueryPacketCommitmentsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketCommitmentsCallback} callback Node-style callback called with the error, if any, and QueryPacketCommitmentsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetCommitments = function packetCommitments(request, callback) {
                        return this.rpcCall(packetCommitments, $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest, $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse, request, callback);
                    }, "name", { value: "PacketCommitments" });

                    /**
                     * Calls PacketCommitments.
                     * @function packetCommitments
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} request QueryPacketCommitmentsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketCommitmentsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetReceipt}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketReceiptCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketReceiptResponse} [response] QueryPacketReceiptResponse
                     */

                    /**
                     * Calls PacketReceipt.
                     * @function packetReceipt
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} request QueryPacketReceiptRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketReceiptCallback} callback Node-style callback called with the error, if any, and QueryPacketReceiptResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetReceipt = function packetReceipt(request, callback) {
                        return this.rpcCall(packetReceipt, $root.ibc.core.channel.v1.QueryPacketReceiptRequest, $root.ibc.core.channel.v1.QueryPacketReceiptResponse, request, callback);
                    }, "name", { value: "PacketReceipt" });

                    /**
                     * Calls PacketReceipt.
                     * @function packetReceipt
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} request QueryPacketReceiptRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketReceiptResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetAcknowledgement}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketAcknowledgementCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} [response] QueryPacketAcknowledgementResponse
                     */

                    /**
                     * Calls PacketAcknowledgement.
                     * @function packetAcknowledgement
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} request QueryPacketAcknowledgementRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketAcknowledgementCallback} callback Node-style callback called with the error, if any, and QueryPacketAcknowledgementResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetAcknowledgement = function packetAcknowledgement(request, callback) {
                        return this.rpcCall(packetAcknowledgement, $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest, $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse, request, callback);
                    }, "name", { value: "PacketAcknowledgement" });

                    /**
                     * Calls PacketAcknowledgement.
                     * @function packetAcknowledgement
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} request QueryPacketAcknowledgementRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketAcknowledgementResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#packetAcknowledgements}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef PacketAcknowledgementsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} [response] QueryPacketAcknowledgementsResponse
                     */

                    /**
                     * Calls PacketAcknowledgements.
                     * @function packetAcknowledgements
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} request QueryPacketAcknowledgementsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.PacketAcknowledgementsCallback} callback Node-style callback called with the error, if any, and QueryPacketAcknowledgementsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.packetAcknowledgements = function packetAcknowledgements(request, callback) {
                        return this.rpcCall(packetAcknowledgements, $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest, $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse, request, callback);
                    }, "name", { value: "PacketAcknowledgements" });

                    /**
                     * Calls PacketAcknowledgements.
                     * @function packetAcknowledgements
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} request QueryPacketAcknowledgementsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryPacketAcknowledgementsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#unreceivedPackets}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef UnreceivedPacketsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} [response] QueryUnreceivedPacketsResponse
                     */

                    /**
                     * Calls UnreceivedPackets.
                     * @function unreceivedPackets
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} request QueryUnreceivedPacketsRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.UnreceivedPacketsCallback} callback Node-style callback called with the error, if any, and QueryUnreceivedPacketsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.unreceivedPackets = function unreceivedPackets(request, callback) {
                        return this.rpcCall(unreceivedPackets, $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest, $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse, request, callback);
                    }, "name", { value: "UnreceivedPackets" });

                    /**
                     * Calls UnreceivedPackets.
                     * @function unreceivedPackets
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} request QueryUnreceivedPacketsRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryUnreceivedPacketsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#unreceivedAcks}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef UnreceivedAcksCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryUnreceivedAcksResponse} [response] QueryUnreceivedAcksResponse
                     */

                    /**
                     * Calls UnreceivedAcks.
                     * @function unreceivedAcks
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} request QueryUnreceivedAcksRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.UnreceivedAcksCallback} callback Node-style callback called with the error, if any, and QueryUnreceivedAcksResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.unreceivedAcks = function unreceivedAcks(request, callback) {
                        return this.rpcCall(unreceivedAcks, $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest, $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse, request, callback);
                    }, "name", { value: "UnreceivedAcks" });

                    /**
                     * Calls UnreceivedAcks.
                     * @function unreceivedAcks
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} request QueryUnreceivedAcksRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryUnreceivedAcksResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Query#nextSequenceReceive}.
                     * @memberof ibc.core.channel.v1.Query
                     * @typedef NextSequenceReceiveCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} [response] QueryNextSequenceReceiveResponse
                     */

                    /**
                     * Calls NextSequenceReceive.
                     * @function nextSequenceReceive
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} request QueryNextSequenceReceiveRequest message or plain object
                     * @param {ibc.core.channel.v1.Query.NextSequenceReceiveCallback} callback Node-style callback called with the error, if any, and QueryNextSequenceReceiveResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.nextSequenceReceive = function nextSequenceReceive(request, callback) {
                        return this.rpcCall(nextSequenceReceive, $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest, $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse, request, callback);
                    }, "name", { value: "NextSequenceReceive" });

                    /**
                     * Calls NextSequenceReceive.
                     * @function nextSequenceReceive
                     * @memberof ibc.core.channel.v1.Query
                     * @instance
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} request QueryNextSequenceReceiveRequest message or plain object
                     * @returns {Promise<ibc.core.channel.v1.QueryNextSequenceReceiveResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryChannelRequest = (function() {

                    /**
                     * Properties of a QueryChannelRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelRequest
                     * @property {string|null} [port_id] QueryChannelRequest port_id
                     * @property {string|null} [channel_id] QueryChannelRequest channel_id
                     */

                    /**
                     * Constructs a new QueryChannelRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelRequest.
                     * @implements IQueryChannelRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelRequest=} [properties] Properties to set
                     */
                    function QueryChannelRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     */
                    QueryChannelRequest.prototype.port_id = "";

                    /**
                     * QueryChannelRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     */
                    QueryChannelRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryChannelRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} message QueryChannelRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelRequest} message QueryChannelRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelRequest} QueryChannelRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelRequest} QueryChannelRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryChannelRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelRequest} QueryChannelRequest
                     */
                    QueryChannelRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelRequest} message QueryChannelRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this QueryChannelRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelRequest;
                })();

                v1.QueryChannelResponse = (function() {

                    /**
                     * Properties of a QueryChannelResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelResponse
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] QueryChannelResponse channel
                     * @property {Uint8Array|null} [proof] QueryChannelResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelResponse.
                     * @implements IQueryChannelResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelResponse=} [properties] Properties to set
                     */
                    function QueryChannelResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelResponse channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.channel = null;

                    /**
                     * QueryChannelResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     */
                    QueryChannelResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelResponse} message QueryChannelResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelResponse} message QueryChannelResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelResponse} QueryChannelResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelResponse} QueryChannelResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelResponse} QueryChannelResponse
                     */
                    QueryChannelResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelResponse();
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelResponse.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelResponse} message QueryChannelResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.channel = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelResponse;
                })();

                v1.QueryChannelsRequest = (function() {

                    /**
                     * Properties of a QueryChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelsRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryChannelsRequest pagination
                     */

                    /**
                     * Constructs a new QueryChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelsRequest.
                     * @implements IQueryChannelsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest=} [properties] Properties to set
                     */
                    function QueryChannelsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @instance
                     */
                    QueryChannelsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryChannelsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} message QueryChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsRequest} message QueryChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelsRequest} QueryChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelsRequest} QueryChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelsRequest} QueryChannelsRequest
                     */
                    QueryChannelsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelsRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelsRequest} message QueryChannelsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelsRequest;
                })();

                v1.QueryChannelsResponse = (function() {

                    /**
                     * Properties of a QueryChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelsResponse
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] QueryChannelsResponse channels
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryChannelsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryChannelsResponse height
                     */

                    /**
                     * Constructs a new QueryChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelsResponse.
                     * @implements IQueryChannelsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse=} [properties] Properties to set
                     */
                    function QueryChannelsResponse(properties) {
                        this.channels = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelsResponse channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.channels = $util.emptyArray;

                    /**
                     * QueryChannelsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.pagination = null;

                    /**
                     * QueryChannelsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     */
                    QueryChannelsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryChannelsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse} message QueryChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channels != null && message.channels.length)
                            for (let i = 0; i < message.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelsResponse} message QueryChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelsResponse} QueryChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.channels && message.channels.length))
                                    message.channels = [];
                                message.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelsResponse} QueryChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channels != null && message.hasOwnProperty("channels")) {
                            if (!Array.isArray(message.channels))
                                return "channels: array expected";
                            for (let i = 0; i < message.channels.length; ++i) {
                                let error = $root.ibc.core.channel.v1.IdentifiedChannel.verify(message.channels[i]);
                                if (error)
                                    return "channels." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelsResponse} QueryChannelsResponse
                     */
                    QueryChannelsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelsResponse();
                        if (object.channels) {
                            if (!Array.isArray(object.channels))
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.channels: array expected");
                            message.channels = [];
                            for (let i = 0; i < object.channels.length; ++i) {
                                if (typeof object.channels[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.channels: object expected");
                                message.channels[i] = $root.ibc.core.channel.v1.IdentifiedChannel.fromObject(object.channels[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelsResponse} message QueryChannelsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.channels = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.channels && message.channels.length) {
                            object.channels = [];
                            for (let j = 0; j < message.channels.length; ++j)
                                object.channels[j] = $root.ibc.core.channel.v1.IdentifiedChannel.toObject(message.channels[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelsResponse;
                })();

                v1.QueryConnectionChannelsRequest = (function() {

                    /**
                     * Properties of a QueryConnectionChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryConnectionChannelsRequest
                     * @property {string|null} [connection] QueryConnectionChannelsRequest connection
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConnectionChannelsRequest pagination
                     */

                    /**
                     * Constructs a new QueryConnectionChannelsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryConnectionChannelsRequest.
                     * @implements IQueryConnectionChannelsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest=} [properties] Properties to set
                     */
                    function QueryConnectionChannelsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionChannelsRequest connection.
                     * @member {string} connection
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     */
                    QueryConnectionChannelsRequest.prototype.connection = "";

                    /**
                     * QueryConnectionChannelsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     */
                    QueryConnectionChannelsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConnectionChannelsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} message QueryConnectionChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionChannelsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsRequest} message QueryConnectionChannelsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionChannelsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsRequest} QueryConnectionChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryConnectionChannelsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection = reader.string();
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionChannelsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsRequest} QueryConnectionChannelsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionChannelsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionChannelsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            if (!$util.isString(message.connection))
                                return "connection: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionChannelsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsRequest} QueryConnectionChannelsRequest
                     */
                    QueryConnectionChannelsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryConnectionChannelsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryConnectionChannelsRequest();
                        if (object.connection != null)
                            message.connection = String(object.connection);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionChannelsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryConnectionChannelsRequest} message QueryConnectionChannelsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionChannelsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection = "";
                            object.pagination = null;
                        }
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = message.connection;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionChannelsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionChannelsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionChannelsRequest;
                })();

                v1.QueryConnectionChannelsResponse = (function() {

                    /**
                     * Properties of a QueryConnectionChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryConnectionChannelsResponse
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] QueryConnectionChannelsResponse channels
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConnectionChannelsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryConnectionChannelsResponse height
                     */

                    /**
                     * Constructs a new QueryConnectionChannelsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryConnectionChannelsResponse.
                     * @implements IQueryConnectionChannelsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse=} [properties] Properties to set
                     */
                    function QueryConnectionChannelsResponse(properties) {
                        this.channels = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionChannelsResponse channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.channels = $util.emptyArray;

                    /**
                     * QueryConnectionChannelsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.pagination = null;

                    /**
                     * QueryConnectionChannelsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     */
                    QueryConnectionChannelsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryConnectionChannelsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse} message QueryConnectionChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channels != null && message.channels.length)
                            for (let i = 0; i < message.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionChannelsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryConnectionChannelsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryConnectionChannelsResponse} message QueryConnectionChannelsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionChannelsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionChannelsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsResponse} QueryConnectionChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryConnectionChannelsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.channels && message.channels.length))
                                    message.channels = [];
                                message.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionChannelsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsResponse} QueryConnectionChannelsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionChannelsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionChannelsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionChannelsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channels != null && message.hasOwnProperty("channels")) {
                            if (!Array.isArray(message.channels))
                                return "channels: array expected";
                            for (let i = 0; i < message.channels.length; ++i) {
                                let error = $root.ibc.core.channel.v1.IdentifiedChannel.verify(message.channels[i]);
                                if (error)
                                    return "channels." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionChannelsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryConnectionChannelsResponse} QueryConnectionChannelsResponse
                     */
                    QueryConnectionChannelsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryConnectionChannelsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryConnectionChannelsResponse();
                        if (object.channels) {
                            if (!Array.isArray(object.channels))
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.channels: array expected");
                            message.channels = [];
                            for (let i = 0; i < object.channels.length; ++i) {
                                if (typeof object.channels[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.channels: object expected");
                                message.channels[i] = $root.ibc.core.channel.v1.IdentifiedChannel.fromObject(object.channels[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryConnectionChannelsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionChannelsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryConnectionChannelsResponse} message QueryConnectionChannelsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionChannelsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.channels = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.channels && message.channels.length) {
                            object.channels = [];
                            for (let j = 0; j < message.channels.length; ++j)
                                object.channels[j] = $root.ibc.core.channel.v1.IdentifiedChannel.toObject(message.channels[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionChannelsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryConnectionChannelsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionChannelsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionChannelsResponse;
                })();

                v1.QueryChannelClientStateRequest = (function() {

                    /**
                     * Properties of a QueryChannelClientStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelClientStateRequest
                     * @property {string|null} [port_id] QueryChannelClientStateRequest port_id
                     * @property {string|null} [channel_id] QueryChannelClientStateRequest channel_id
                     */

                    /**
                     * Constructs a new QueryChannelClientStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelClientStateRequest.
                     * @implements IQueryChannelClientStateRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest=} [properties] Properties to set
                     */
                    function QueryChannelClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelClientStateRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     */
                    QueryChannelClientStateRequest.prototype.port_id = "";

                    /**
                     * QueryChannelClientStateRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     */
                    QueryChannelClientStateRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryChannelClientStateRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} message QueryChannelClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateRequest} message QueryChannelClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateRequest} QueryChannelClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateRequest} QueryChannelClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryChannelClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateRequest} QueryChannelClientStateRequest
                     */
                    QueryChannelClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelClientStateRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelClientStateRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelClientStateRequest} message QueryChannelClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelClientStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this QueryChannelClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelClientStateRequest;
                })();

                v1.QueryChannelClientStateResponse = (function() {

                    /**
                     * Properties of a QueryChannelClientStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelClientStateResponse
                     * @property {ibc.core.client.v1.IIdentifiedClientState|null} [identified_client_state] QueryChannelClientStateResponse identified_client_state
                     * @property {Uint8Array|null} [proof] QueryChannelClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelClientStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelClientStateResponse.
                     * @implements IQueryChannelClientStateResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse=} [properties] Properties to set
                     */
                    function QueryChannelClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelClientStateResponse identified_client_state.
                     * @member {ibc.core.client.v1.IIdentifiedClientState|null|undefined} identified_client_state
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.identified_client_state = null;

                    /**
                     * QueryChannelClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     */
                    QueryChannelClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelClientStateResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse} message QueryChannelClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identified_client_state != null && Object.hasOwnProperty.call(message, "identified_client_state"))
                            $root.ibc.core.client.v1.IdentifiedClientState.encode(message.identified_client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelClientStateResponse} message QueryChannelClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateResponse} QueryChannelClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateResponse} QueryChannelClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state")) {
                            let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.identified_client_state);
                            if (error)
                                return "identified_client_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelClientStateResponse} QueryChannelClientStateResponse
                     */
                    QueryChannelClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelClientStateResponse();
                        if (object.identified_client_state != null) {
                            if (typeof object.identified_client_state !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelClientStateResponse.identified_client_state: object expected");
                            message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.identified_client_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelClientStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelClientStateResponse} message QueryChannelClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.identified_client_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state"))
                            object.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.identified_client_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelClientStateResponse;
                })();

                v1.QueryChannelConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryChannelConsensusStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelConsensusStateRequest
                     * @property {string|null} [port_id] QueryChannelConsensusStateRequest port_id
                     * @property {string|null} [channel_id] QueryChannelConsensusStateRequest channel_id
                     * @property {Long|null} [revision_number] QueryChannelConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryChannelConsensusStateRequest revision_height
                     */

                    /**
                     * Constructs a new QueryChannelConsensusStateRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelConsensusStateRequest.
                     * @implements IQueryChannelConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryChannelConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelConsensusStateRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.port_id = "";

                    /**
                     * QueryChannelConsensusStateRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.channel_id = "";

                    /**
                     * QueryChannelConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryChannelConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     */
                    QueryChannelConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryChannelConsensusStateRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} message QueryChannelConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.revision_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateRequest} message QueryChannelConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateRequest} QueryChannelConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.revision_number = reader.uint64();
                                break;
                            case 4:
                                message.revision_height = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateRequest} QueryChannelConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryChannelConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateRequest} QueryChannelConsensusStateRequest
                     */
                    QueryChannelConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelConsensusStateRequest} message QueryChannelConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelConsensusStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        return object;
                    };

                    /**
                     * Converts this QueryChannelConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelConsensusStateRequest;
                })();

                v1.QueryChannelConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryChannelConsensusStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryChannelConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryChannelConsensusStateResponse consensus_state
                     * @property {string|null} [client_id] QueryChannelConsensusStateResponse client_id
                     * @property {Uint8Array|null} [proof] QueryChannelConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryChannelConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryChannelConsensusStateResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryChannelConsensusStateResponse.
                     * @implements IQueryChannelConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryChannelConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryChannelConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryChannelConsensusStateResponse client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.client_id = "";

                    /**
                     * QueryChannelConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryChannelConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     */
                    QueryChannelConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryChannelConsensusStateResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse} message QueryChannelConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.client_id);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryChannelConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryChannelConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryChannelConsensusStateResponse} message QueryChannelConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryChannelConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateResponse} QueryChannelConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.client_id = reader.string();
                                break;
                            case 3:
                                message.proof = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryChannelConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateResponse} QueryChannelConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryChannelConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryChannelConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryChannelConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryChannelConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryChannelConsensusStateResponse} QueryChannelConsensusStateResponse
                     */
                    QueryChannelConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryChannelConsensusStateResponse();
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelConsensusStateResponse.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryChannelConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryChannelConsensusStateResponse} message QueryChannelConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryChannelConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.consensus_state = null;
                            object.client_id = "";
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryChannelConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryChannelConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryChannelConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryChannelConsensusStateResponse;
                })();

                v1.QueryPacketCommitmentRequest = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentRequest
                     * @property {string|null} [port_id] QueryPacketCommitmentRequest port_id
                     * @property {string|null} [channel_id] QueryPacketCommitmentRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketCommitmentRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentRequest.
                     * @implements IQueryPacketCommitmentRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.port_id = "";

                    /**
                     * QueryPacketCommitmentRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketCommitmentRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     */
                    QueryPacketCommitmentRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryPacketCommitmentRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} message QueryPacketCommitmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentRequest} message QueryPacketCommitmentRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentRequest} QueryPacketCommitmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentRequest} QueryPacketCommitmentRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentRequest} QueryPacketCommitmentRequest
                     */
                    QueryPacketCommitmentRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentRequest} message QueryPacketCommitmentRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentRequest;
                })();

                v1.QueryPacketCommitmentResponse = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentResponse
                     * @property {Uint8Array|null} [commitment] QueryPacketCommitmentResponse commitment
                     * @property {Uint8Array|null} [proof] QueryPacketCommitmentResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketCommitmentResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentResponse.
                     * @implements IQueryPacketCommitmentResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentResponse commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.commitment = $util.newBuffer([]);

                    /**
                     * QueryPacketCommitmentResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketCommitmentResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     */
                    QueryPacketCommitmentResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse} message QueryPacketCommitmentResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.commitment != null && Object.hasOwnProperty.call(message, "commitment"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.commitment);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentResponse} message QueryPacketCommitmentResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentResponse} QueryPacketCommitmentResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.commitment = reader.bytes();
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentResponse} QueryPacketCommitmentResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            if (!(message.commitment && typeof message.commitment.length === "number" || $util.isString(message.commitment)))
                                return "commitment: buffer expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentResponse} QueryPacketCommitmentResponse
                     */
                    QueryPacketCommitmentResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentResponse();
                        if (object.commitment != null)
                            if (typeof object.commitment === "string")
                                $util.base64.decode(object.commitment, message.commitment = $util.newBuffer($util.base64.length(object.commitment)), 0);
                            else if (object.commitment.length)
                                message.commitment = object.commitment;
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentResponse} message QueryPacketCommitmentResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.commitment = "";
                            else {
                                object.commitment = [];
                                if (options.bytes !== Array)
                                    object.commitment = $util.newBuffer(object.commitment);
                            }
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            object.commitment = options.bytes === String ? $util.base64.encode(message.commitment, 0, message.commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.commitment) : message.commitment;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentResponse;
                })();

                v1.QueryPacketCommitmentsRequest = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentsRequest
                     * @property {string|null} [port_id] QueryPacketCommitmentsRequest port_id
                     * @property {string|null} [channel_id] QueryPacketCommitmentsRequest channel_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPacketCommitmentsRequest pagination
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentsRequest.
                     * @implements IQueryPacketCommitmentsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.port_id = "";

                    /**
                     * QueryPacketCommitmentsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketCommitmentsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     */
                    QueryPacketCommitmentsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} message QueryPacketCommitmentsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsRequest} message QueryPacketCommitmentsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsRequest} QueryPacketCommitmentsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsRequest} QueryPacketCommitmentsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsRequest} QueryPacketCommitmentsRequest
                     */
                    QueryPacketCommitmentsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentsRequest} message QueryPacketCommitmentsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.pagination = null;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentsRequest;
                })();

                v1.QueryPacketCommitmentsResponse = (function() {

                    /**
                     * Properties of a QueryPacketCommitmentsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketCommitmentsResponse
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [commitments] QueryPacketCommitmentsResponse commitments
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPacketCommitmentsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryPacketCommitmentsResponse height
                     */

                    /**
                     * Constructs a new QueryPacketCommitmentsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketCommitmentsResponse.
                     * @implements IQueryPacketCommitmentsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse=} [properties] Properties to set
                     */
                    function QueryPacketCommitmentsResponse(properties) {
                        this.commitments = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketCommitmentsResponse commitments.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} commitments
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.commitments = $util.emptyArray;

                    /**
                     * QueryPacketCommitmentsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.pagination = null;

                    /**
                     * QueryPacketCommitmentsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     */
                    QueryPacketCommitmentsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryPacketCommitmentsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse} message QueryPacketCommitmentsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.commitments != null && message.commitments.length)
                            for (let i = 0; i < message.commitments.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.commitments[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketCommitmentsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketCommitmentsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketCommitmentsResponse} message QueryPacketCommitmentsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketCommitmentsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsResponse} QueryPacketCommitmentsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.commitments && message.commitments.length))
                                    message.commitments = [];
                                message.commitments.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketCommitmentsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsResponse} QueryPacketCommitmentsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketCommitmentsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketCommitmentsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketCommitmentsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.commitments != null && message.hasOwnProperty("commitments")) {
                            if (!Array.isArray(message.commitments))
                                return "commitments: array expected";
                            for (let i = 0; i < message.commitments.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.commitments[i]);
                                if (error)
                                    return "commitments." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketCommitmentsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketCommitmentsResponse} QueryPacketCommitmentsResponse
                     */
                    QueryPacketCommitmentsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketCommitmentsResponse();
                        if (object.commitments) {
                            if (!Array.isArray(object.commitments))
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments: array expected");
                            message.commitments = [];
                            for (let i = 0; i < object.commitments.length; ++i) {
                                if (typeof object.commitments[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments: object expected");
                                message.commitments[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.commitments[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketCommitmentsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketCommitmentsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketCommitmentsResponse} message QueryPacketCommitmentsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketCommitmentsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.commitments = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.commitments && message.commitments.length) {
                            object.commitments = [];
                            for (let j = 0; j < message.commitments.length; ++j)
                                object.commitments[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.commitments[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketCommitmentsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketCommitmentsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketCommitmentsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketCommitmentsResponse;
                })();

                v1.QueryPacketReceiptRequest = (function() {

                    /**
                     * Properties of a QueryPacketReceiptRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketReceiptRequest
                     * @property {string|null} [port_id] QueryPacketReceiptRequest port_id
                     * @property {string|null} [channel_id] QueryPacketReceiptRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketReceiptRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketReceiptRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketReceiptRequest.
                     * @implements IQueryPacketReceiptRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest=} [properties] Properties to set
                     */
                    function QueryPacketReceiptRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketReceiptRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.port_id = "";

                    /**
                     * QueryPacketReceiptRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketReceiptRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     */
                    QueryPacketReceiptRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryPacketReceiptRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} message QueryPacketReceiptRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketReceiptRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptRequest} message QueryPacketReceiptRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketReceiptRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptRequest} QueryPacketReceiptRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketReceiptRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketReceiptRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptRequest} QueryPacketReceiptRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketReceiptRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketReceiptRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryPacketReceiptRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptRequest} QueryPacketReceiptRequest
                     */
                    QueryPacketReceiptRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketReceiptRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketReceiptRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketReceiptRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketReceiptRequest} message QueryPacketReceiptRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketReceiptRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this QueryPacketReceiptRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketReceiptRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketReceiptRequest;
                })();

                v1.QueryPacketReceiptResponse = (function() {

                    /**
                     * Properties of a QueryPacketReceiptResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketReceiptResponse
                     * @property {boolean|null} [received] QueryPacketReceiptResponse received
                     * @property {Uint8Array|null} [proof] QueryPacketReceiptResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketReceiptResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketReceiptResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketReceiptResponse.
                     * @implements IQueryPacketReceiptResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse=} [properties] Properties to set
                     */
                    function QueryPacketReceiptResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketReceiptResponse received.
                     * @member {boolean} received
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.received = false;

                    /**
                     * QueryPacketReceiptResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketReceiptResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     */
                    QueryPacketReceiptResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketReceiptResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse} message QueryPacketReceiptResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.received != null && Object.hasOwnProperty.call(message, "received"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.received);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketReceiptResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketReceiptResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketReceiptResponse} message QueryPacketReceiptResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketReceiptResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketReceiptResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptResponse} QueryPacketReceiptResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketReceiptResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2:
                                message.received = reader.bool();
                                break;
                            case 3:
                                message.proof = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketReceiptResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptResponse} QueryPacketReceiptResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketReceiptResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketReceiptResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketReceiptResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.received != null && message.hasOwnProperty("received"))
                            if (typeof message.received !== "boolean")
                                return "received: boolean expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketReceiptResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketReceiptResponse} QueryPacketReceiptResponse
                     */
                    QueryPacketReceiptResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketReceiptResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketReceiptResponse();
                        if (object.received != null)
                            message.received = Boolean(object.received);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketReceiptResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketReceiptResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketReceiptResponse} message QueryPacketReceiptResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketReceiptResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.received = false;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.received != null && message.hasOwnProperty("received"))
                            object.received = message.received;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketReceiptResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketReceiptResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketReceiptResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketReceiptResponse;
                })();

                v1.QueryPacketAcknowledgementRequest = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementRequest
                     * @property {string|null} [port_id] QueryPacketAcknowledgementRequest port_id
                     * @property {string|null} [channel_id] QueryPacketAcknowledgementRequest channel_id
                     * @property {Long|null} [sequence] QueryPacketAcknowledgementRequest sequence
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementRequest.
                     * @implements IQueryPacketAcknowledgementRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.port_id = "";

                    /**
                     * QueryPacketAcknowledgementRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketAcknowledgementRequest sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} message QueryPacketAcknowledgementRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementRequest} message QueryPacketAcknowledgementRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} QueryPacketAcknowledgementRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} QueryPacketAcknowledgementRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} QueryPacketAcknowledgementRequest
                     */
                    QueryPacketAcknowledgementRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementRequest} message QueryPacketAcknowledgementRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementRequest;
                })();

                v1.QueryPacketAcknowledgementResponse = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementResponse
                     * @property {Uint8Array|null} [acknowledgement] QueryPacketAcknowledgementResponse acknowledgement
                     * @property {Uint8Array|null} [proof] QueryPacketAcknowledgementResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryPacketAcknowledgementResponse proof_height
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementResponse.
                     * @implements IQueryPacketAcknowledgementResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementResponse acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * QueryPacketAcknowledgementResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryPacketAcknowledgementResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse} message QueryPacketAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.acknowledgement);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementResponse} message QueryPacketAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} QueryPacketAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.acknowledgement = reader.bytes();
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} QueryPacketAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} QueryPacketAcknowledgementResponse
                     */
                    QueryPacketAcknowledgementResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementResponse();
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementResponse} message QueryPacketAcknowledgementResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementResponse;
                })();

                v1.QueryPacketAcknowledgementsRequest = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementsRequest
                     * @property {string|null} [port_id] QueryPacketAcknowledgementsRequest port_id
                     * @property {string|null} [channel_id] QueryPacketAcknowledgementsRequest channel_id
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryPacketAcknowledgementsRequest pagination
                     * @property {Array.<Long>|null} [packet_commitment_sequences] QueryPacketAcknowledgementsRequest packet_commitment_sequences
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementsRequest.
                     * @implements IQueryPacketAcknowledgementsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementsRequest(properties) {
                        this.packet_commitment_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.port_id = "";

                    /**
                     * QueryPacketAcknowledgementsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.channel_id = "";

                    /**
                     * QueryPacketAcknowledgementsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.pagination = null;

                    /**
                     * QueryPacketAcknowledgementsRequest packet_commitment_sequences.
                     * @member {Array.<Long>} packet_commitment_sequences
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     */
                    QueryPacketAcknowledgementsRequest.prototype.packet_commitment_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} message QueryPacketAcknowledgementsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.packet_commitment_sequences != null && message.packet_commitment_sequences.length) {
                            writer.uint32(/* id 4, wireType 2 =*/34).fork();
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                writer.uint64(message.packet_commitment_sequences[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsRequest} message QueryPacketAcknowledgementsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} QueryPacketAcknowledgementsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.packet_commitment_sequences && message.packet_commitment_sequences.length))
                                    message.packet_commitment_sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.packet_commitment_sequences.push(reader.uint64());
                                } else
                                    message.packet_commitment_sequences.push(reader.uint64());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} QueryPacketAcknowledgementsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.packet_commitment_sequences != null && message.hasOwnProperty("packet_commitment_sequences")) {
                            if (!Array.isArray(message.packet_commitment_sequences))
                                return "packet_commitment_sequences: array expected";
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                if (!$util.isInteger(message.packet_commitment_sequences[i]) && !(message.packet_commitment_sequences[i] && $util.isInteger(message.packet_commitment_sequences[i].low) && $util.isInteger(message.packet_commitment_sequences[i].high)))
                                    return "packet_commitment_sequences: integer|Long[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} QueryPacketAcknowledgementsRequest
                     */
                    QueryPacketAcknowledgementsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        if (object.packet_commitment_sequences) {
                            if (!Array.isArray(object.packet_commitment_sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.packet_commitment_sequences: array expected");
                            message.packet_commitment_sequences = [];
                            for (let i = 0; i < object.packet_commitment_sequences.length; ++i)
                                if ($util.Long)
                                    (message.packet_commitment_sequences[i] = $util.Long.fromValue(object.packet_commitment_sequences[i])).unsigned = true;
                                else if (typeof object.packet_commitment_sequences[i] === "string")
                                    message.packet_commitment_sequences[i] = parseInt(object.packet_commitment_sequences[i], 10);
                                else if (typeof object.packet_commitment_sequences[i] === "number")
                                    message.packet_commitment_sequences[i] = object.packet_commitment_sequences[i];
                                else if (typeof object.packet_commitment_sequences[i] === "object")
                                    message.packet_commitment_sequences[i] = new $util.LongBits(object.packet_commitment_sequences[i].low >>> 0, object.packet_commitment_sequences[i].high >>> 0).toNumber(true);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementsRequest} message QueryPacketAcknowledgementsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.packet_commitment_sequences = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.pagination = null;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        if (message.packet_commitment_sequences && message.packet_commitment_sequences.length) {
                            object.packet_commitment_sequences = [];
                            for (let j = 0; j < message.packet_commitment_sequences.length; ++j)
                                if (typeof message.packet_commitment_sequences[j] === "number")
                                    object.packet_commitment_sequences[j] = options.longs === String ? String(message.packet_commitment_sequences[j]) : message.packet_commitment_sequences[j];
                                else
                                    object.packet_commitment_sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.packet_commitment_sequences[j]) : options.longs === Number ? new $util.LongBits(message.packet_commitment_sequences[j].low >>> 0, message.packet_commitment_sequences[j].high >>> 0).toNumber(true) : message.packet_commitment_sequences[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementsRequest;
                })();

                v1.QueryPacketAcknowledgementsResponse = (function() {

                    /**
                     * Properties of a QueryPacketAcknowledgementsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryPacketAcknowledgementsResponse
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [acknowledgements] QueryPacketAcknowledgementsResponse acknowledgements
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryPacketAcknowledgementsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryPacketAcknowledgementsResponse height
                     */

                    /**
                     * Constructs a new QueryPacketAcknowledgementsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryPacketAcknowledgementsResponse.
                     * @implements IQueryPacketAcknowledgementsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse=} [properties] Properties to set
                     */
                    function QueryPacketAcknowledgementsResponse(properties) {
                        this.acknowledgements = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryPacketAcknowledgementsResponse acknowledgements.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} acknowledgements
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.acknowledgements = $util.emptyArray;

                    /**
                     * QueryPacketAcknowledgementsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.pagination = null;

                    /**
                     * QueryPacketAcknowledgementsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     */
                    QueryPacketAcknowledgementsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse} message QueryPacketAcknowledgementsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.acknowledgements != null && message.acknowledgements.length)
                            for (let i = 0; i < message.acknowledgements.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.acknowledgements[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryPacketAcknowledgementsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryPacketAcknowledgementsResponse} message QueryPacketAcknowledgementsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryPacketAcknowledgementsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} QueryPacketAcknowledgementsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.acknowledgements && message.acknowledgements.length))
                                    message.acknowledgements = [];
                                message.acknowledgements.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryPacketAcknowledgementsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} QueryPacketAcknowledgementsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryPacketAcknowledgementsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryPacketAcknowledgementsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryPacketAcknowledgementsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.acknowledgements != null && message.hasOwnProperty("acknowledgements")) {
                            if (!Array.isArray(message.acknowledgements))
                                return "acknowledgements: array expected";
                            for (let i = 0; i < message.acknowledgements.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.acknowledgements[i]);
                                if (error)
                                    return "acknowledgements." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryPacketAcknowledgementsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} QueryPacketAcknowledgementsResponse
                     */
                    QueryPacketAcknowledgementsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryPacketAcknowledgementsResponse();
                        if (object.acknowledgements) {
                            if (!Array.isArray(object.acknowledgements))
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements: array expected");
                            message.acknowledgements = [];
                            for (let i = 0; i < object.acknowledgements.length; ++i) {
                                if (typeof object.acknowledgements[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements: object expected");
                                message.acknowledgements[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.acknowledgements[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryPacketAcknowledgementsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryPacketAcknowledgementsResponse} message QueryPacketAcknowledgementsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryPacketAcknowledgementsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.acknowledgements = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.acknowledgements && message.acknowledgements.length) {
                            object.acknowledgements = [];
                            for (let j = 0; j < message.acknowledgements.length; ++j)
                                object.acknowledgements[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.acknowledgements[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryPacketAcknowledgementsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryPacketAcknowledgementsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryPacketAcknowledgementsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryPacketAcknowledgementsResponse;
                })();

                v1.QueryUnreceivedPacketsRequest = (function() {

                    /**
                     * Properties of a QueryUnreceivedPacketsRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedPacketsRequest
                     * @property {string|null} [port_id] QueryUnreceivedPacketsRequest port_id
                     * @property {string|null} [channel_id] QueryUnreceivedPacketsRequest channel_id
                     * @property {Array.<Long>|null} [packet_commitment_sequences] QueryUnreceivedPacketsRequest packet_commitment_sequences
                     */

                    /**
                     * Constructs a new QueryUnreceivedPacketsRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedPacketsRequest.
                     * @implements IQueryUnreceivedPacketsRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest=} [properties] Properties to set
                     */
                    function QueryUnreceivedPacketsRequest(properties) {
                        this.packet_commitment_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedPacketsRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.port_id = "";

                    /**
                     * QueryUnreceivedPacketsRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.channel_id = "";

                    /**
                     * QueryUnreceivedPacketsRequest packet_commitment_sequences.
                     * @member {Array.<Long>} packet_commitment_sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     */
                    QueryUnreceivedPacketsRequest.prototype.packet_commitment_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryUnreceivedPacketsRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} message QueryUnreceivedPacketsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.packet_commitment_sequences != null && message.packet_commitment_sequences.length) {
                            writer.uint32(/* id 3, wireType 2 =*/26).fork();
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                writer.uint64(message.packet_commitment_sequences[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedPacketsRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsRequest} message QueryUnreceivedPacketsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} QueryUnreceivedPacketsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                if (!(message.packet_commitment_sequences && message.packet_commitment_sequences.length))
                                    message.packet_commitment_sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.packet_commitment_sequences.push(reader.uint64());
                                } else
                                    message.packet_commitment_sequences.push(reader.uint64());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} QueryUnreceivedPacketsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedPacketsRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedPacketsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.packet_commitment_sequences != null && message.hasOwnProperty("packet_commitment_sequences")) {
                            if (!Array.isArray(message.packet_commitment_sequences))
                                return "packet_commitment_sequences: array expected";
                            for (let i = 0; i < message.packet_commitment_sequences.length; ++i)
                                if (!$util.isInteger(message.packet_commitment_sequences[i]) && !(message.packet_commitment_sequences[i] && $util.isInteger(message.packet_commitment_sequences[i].low) && $util.isInteger(message.packet_commitment_sequences[i].high)))
                                    return "packet_commitment_sequences: integer|Long[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedPacketsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} QueryUnreceivedPacketsRequest
                     */
                    QueryUnreceivedPacketsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.packet_commitment_sequences) {
                            if (!Array.isArray(object.packet_commitment_sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedPacketsRequest.packet_commitment_sequences: array expected");
                            message.packet_commitment_sequences = [];
                            for (let i = 0; i < object.packet_commitment_sequences.length; ++i)
                                if ($util.Long)
                                    (message.packet_commitment_sequences[i] = $util.Long.fromValue(object.packet_commitment_sequences[i])).unsigned = true;
                                else if (typeof object.packet_commitment_sequences[i] === "string")
                                    message.packet_commitment_sequences[i] = parseInt(object.packet_commitment_sequences[i], 10);
                                else if (typeof object.packet_commitment_sequences[i] === "number")
                                    message.packet_commitment_sequences[i] = object.packet_commitment_sequences[i];
                                else if (typeof object.packet_commitment_sequences[i] === "object")
                                    message.packet_commitment_sequences[i] = new $util.LongBits(object.packet_commitment_sequences[i].low >>> 0, object.packet_commitment_sequences[i].high >>> 0).toNumber(true);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedPacketsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedPacketsRequest} message QueryUnreceivedPacketsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedPacketsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.packet_commitment_sequences = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.packet_commitment_sequences && message.packet_commitment_sequences.length) {
                            object.packet_commitment_sequences = [];
                            for (let j = 0; j < message.packet_commitment_sequences.length; ++j)
                                if (typeof message.packet_commitment_sequences[j] === "number")
                                    object.packet_commitment_sequences[j] = options.longs === String ? String(message.packet_commitment_sequences[j]) : message.packet_commitment_sequences[j];
                                else
                                    object.packet_commitment_sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.packet_commitment_sequences[j]) : options.longs === Number ? new $util.LongBits(message.packet_commitment_sequences[j].low >>> 0, message.packet_commitment_sequences[j].high >>> 0).toNumber(true) : message.packet_commitment_sequences[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedPacketsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedPacketsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedPacketsRequest;
                })();

                v1.QueryUnreceivedPacketsResponse = (function() {

                    /**
                     * Properties of a QueryUnreceivedPacketsResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedPacketsResponse
                     * @property {Array.<Long>|null} [sequences] QueryUnreceivedPacketsResponse sequences
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryUnreceivedPacketsResponse height
                     */

                    /**
                     * Constructs a new QueryUnreceivedPacketsResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedPacketsResponse.
                     * @implements IQueryUnreceivedPacketsResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse=} [properties] Properties to set
                     */
                    function QueryUnreceivedPacketsResponse(properties) {
                        this.sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedPacketsResponse sequences.
                     * @member {Array.<Long>} sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     */
                    QueryUnreceivedPacketsResponse.prototype.sequences = $util.emptyArray;

                    /**
                     * QueryUnreceivedPacketsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     */
                    QueryUnreceivedPacketsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryUnreceivedPacketsResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse} message QueryUnreceivedPacketsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequences != null && message.sequences.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (let i = 0; i < message.sequences.length; ++i)
                                writer.uint64(message.sequences[i]);
                            writer.ldelim();
                        }
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedPacketsResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedPacketsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedPacketsResponse} message QueryUnreceivedPacketsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedPacketsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} QueryUnreceivedPacketsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sequences && message.sequences.length))
                                    message.sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.sequences.push(reader.uint64());
                                } else
                                    message.sequences.push(reader.uint64());
                                break;
                            case 2:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedPacketsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} QueryUnreceivedPacketsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedPacketsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedPacketsResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedPacketsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequences != null && message.hasOwnProperty("sequences")) {
                            if (!Array.isArray(message.sequences))
                                return "sequences: array expected";
                            for (let i = 0; i < message.sequences.length; ++i)
                                if (!$util.isInteger(message.sequences[i]) && !(message.sequences[i] && $util.isInteger(message.sequences[i].low) && $util.isInteger(message.sequences[i].high)))
                                    return "sequences: integer|Long[] expected";
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedPacketsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} QueryUnreceivedPacketsResponse
                     */
                    QueryUnreceivedPacketsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedPacketsResponse();
                        if (object.sequences) {
                            if (!Array.isArray(object.sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedPacketsResponse.sequences: array expected");
                            message.sequences = [];
                            for (let i = 0; i < object.sequences.length; ++i)
                                if ($util.Long)
                                    (message.sequences[i] = $util.Long.fromValue(object.sequences[i])).unsigned = true;
                                else if (typeof object.sequences[i] === "string")
                                    message.sequences[i] = parseInt(object.sequences[i], 10);
                                else if (typeof object.sequences[i] === "number")
                                    message.sequences[i] = object.sequences[i];
                                else if (typeof object.sequences[i] === "object")
                                    message.sequences[i] = new $util.LongBits(object.sequences[i].low >>> 0, object.sequences[i].high >>> 0).toNumber(true);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedPacketsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedPacketsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedPacketsResponse} message QueryUnreceivedPacketsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedPacketsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.sequences = [];
                        if (options.defaults)
                            object.height = null;
                        if (message.sequences && message.sequences.length) {
                            object.sequences = [];
                            for (let j = 0; j < message.sequences.length; ++j)
                                if (typeof message.sequences[j] === "number")
                                    object.sequences[j] = options.longs === String ? String(message.sequences[j]) : message.sequences[j];
                                else
                                    object.sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.sequences[j]) : options.longs === Number ? new $util.LongBits(message.sequences[j].low >>> 0, message.sequences[j].high >>> 0).toNumber(true) : message.sequences[j];
                        }
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedPacketsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedPacketsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedPacketsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedPacketsResponse;
                })();

                v1.QueryUnreceivedAcksRequest = (function() {

                    /**
                     * Properties of a QueryUnreceivedAcksRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedAcksRequest
                     * @property {string|null} [port_id] QueryUnreceivedAcksRequest port_id
                     * @property {string|null} [channel_id] QueryUnreceivedAcksRequest channel_id
                     * @property {Array.<Long>|null} [packet_ack_sequences] QueryUnreceivedAcksRequest packet_ack_sequences
                     */

                    /**
                     * Constructs a new QueryUnreceivedAcksRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedAcksRequest.
                     * @implements IQueryUnreceivedAcksRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest=} [properties] Properties to set
                     */
                    function QueryUnreceivedAcksRequest(properties) {
                        this.packet_ack_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedAcksRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.port_id = "";

                    /**
                     * QueryUnreceivedAcksRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.channel_id = "";

                    /**
                     * QueryUnreceivedAcksRequest packet_ack_sequences.
                     * @member {Array.<Long>} packet_ack_sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     */
                    QueryUnreceivedAcksRequest.prototype.packet_ack_sequences = $util.emptyArray;

                    /**
                     * Encodes the specified QueryUnreceivedAcksRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} message QueryUnreceivedAcksRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.packet_ack_sequences != null && message.packet_ack_sequences.length) {
                            writer.uint32(/* id 3, wireType 2 =*/26).fork();
                            for (let i = 0; i < message.packet_ack_sequences.length; ++i)
                                writer.uint64(message.packet_ack_sequences[i]);
                            writer.ldelim();
                        }
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedAcksRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksRequest} message QueryUnreceivedAcksRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksRequest} QueryUnreceivedAcksRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                if (!(message.packet_ack_sequences && message.packet_ack_sequences.length))
                                    message.packet_ack_sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.packet_ack_sequences.push(reader.uint64());
                                } else
                                    message.packet_ack_sequences.push(reader.uint64());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksRequest} QueryUnreceivedAcksRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedAcksRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedAcksRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.packet_ack_sequences != null && message.hasOwnProperty("packet_ack_sequences")) {
                            if (!Array.isArray(message.packet_ack_sequences))
                                return "packet_ack_sequences: array expected";
                            for (let i = 0; i < message.packet_ack_sequences.length; ++i)
                                if (!$util.isInteger(message.packet_ack_sequences[i]) && !(message.packet_ack_sequences[i] && $util.isInteger(message.packet_ack_sequences[i].low) && $util.isInteger(message.packet_ack_sequences[i].high)))
                                    return "packet_ack_sequences: integer|Long[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedAcksRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksRequest} QueryUnreceivedAcksRequest
                     */
                    QueryUnreceivedAcksRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.packet_ack_sequences) {
                            if (!Array.isArray(object.packet_ack_sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedAcksRequest.packet_ack_sequences: array expected");
                            message.packet_ack_sequences = [];
                            for (let i = 0; i < object.packet_ack_sequences.length; ++i)
                                if ($util.Long)
                                    (message.packet_ack_sequences[i] = $util.Long.fromValue(object.packet_ack_sequences[i])).unsigned = true;
                                else if (typeof object.packet_ack_sequences[i] === "string")
                                    message.packet_ack_sequences[i] = parseInt(object.packet_ack_sequences[i], 10);
                                else if (typeof object.packet_ack_sequences[i] === "number")
                                    message.packet_ack_sequences[i] = object.packet_ack_sequences[i];
                                else if (typeof object.packet_ack_sequences[i] === "object")
                                    message.packet_ack_sequences[i] = new $util.LongBits(object.packet_ack_sequences[i].low >>> 0, object.packet_ack_sequences[i].high >>> 0).toNumber(true);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedAcksRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedAcksRequest} message QueryUnreceivedAcksRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedAcksRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.packet_ack_sequences = [];
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.packet_ack_sequences && message.packet_ack_sequences.length) {
                            object.packet_ack_sequences = [];
                            for (let j = 0; j < message.packet_ack_sequences.length; ++j)
                                if (typeof message.packet_ack_sequences[j] === "number")
                                    object.packet_ack_sequences[j] = options.longs === String ? String(message.packet_ack_sequences[j]) : message.packet_ack_sequences[j];
                                else
                                    object.packet_ack_sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.packet_ack_sequences[j]) : options.longs === Number ? new $util.LongBits(message.packet_ack_sequences[j].low >>> 0, message.packet_ack_sequences[j].high >>> 0).toNumber(true) : message.packet_ack_sequences[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedAcksRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedAcksRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedAcksRequest;
                })();

                v1.QueryUnreceivedAcksResponse = (function() {

                    /**
                     * Properties of a QueryUnreceivedAcksResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryUnreceivedAcksResponse
                     * @property {Array.<Long>|null} [sequences] QueryUnreceivedAcksResponse sequences
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryUnreceivedAcksResponse height
                     */

                    /**
                     * Constructs a new QueryUnreceivedAcksResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryUnreceivedAcksResponse.
                     * @implements IQueryUnreceivedAcksResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse=} [properties] Properties to set
                     */
                    function QueryUnreceivedAcksResponse(properties) {
                        this.sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryUnreceivedAcksResponse sequences.
                     * @member {Array.<Long>} sequences
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     */
                    QueryUnreceivedAcksResponse.prototype.sequences = $util.emptyArray;

                    /**
                     * QueryUnreceivedAcksResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     */
                    QueryUnreceivedAcksResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryUnreceivedAcksResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse} message QueryUnreceivedAcksResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequences != null && message.sequences.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (let i = 0; i < message.sequences.length; ++i)
                                writer.uint64(message.sequences[i]);
                            writer.ldelim();
                        }
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryUnreceivedAcksResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryUnreceivedAcksResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryUnreceivedAcksResponse} message QueryUnreceivedAcksResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryUnreceivedAcksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksResponse} QueryUnreceivedAcksResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.sequences && message.sequences.length))
                                    message.sequences = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.sequences.push(reader.uint64());
                                } else
                                    message.sequences.push(reader.uint64());
                                break;
                            case 2:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryUnreceivedAcksResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksResponse} QueryUnreceivedAcksResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryUnreceivedAcksResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryUnreceivedAcksResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryUnreceivedAcksResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequences != null && message.hasOwnProperty("sequences")) {
                            if (!Array.isArray(message.sequences))
                                return "sequences: array expected";
                            for (let i = 0; i < message.sequences.length; ++i)
                                if (!$util.isInteger(message.sequences[i]) && !(message.sequences[i] && $util.isInteger(message.sequences[i].low) && $util.isInteger(message.sequences[i].high)))
                                    return "sequences: integer|Long[] expected";
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryUnreceivedAcksResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryUnreceivedAcksResponse} QueryUnreceivedAcksResponse
                     */
                    QueryUnreceivedAcksResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryUnreceivedAcksResponse();
                        if (object.sequences) {
                            if (!Array.isArray(object.sequences))
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedAcksResponse.sequences: array expected");
                            message.sequences = [];
                            for (let i = 0; i < object.sequences.length; ++i)
                                if ($util.Long)
                                    (message.sequences[i] = $util.Long.fromValue(object.sequences[i])).unsigned = true;
                                else if (typeof object.sequences[i] === "string")
                                    message.sequences[i] = parseInt(object.sequences[i], 10);
                                else if (typeof object.sequences[i] === "number")
                                    message.sequences[i] = object.sequences[i];
                                else if (typeof object.sequences[i] === "object")
                                    message.sequences[i] = new $util.LongBits(object.sequences[i].low >>> 0, object.sequences[i].high >>> 0).toNumber(true);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryUnreceivedAcksResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryUnreceivedAcksResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryUnreceivedAcksResponse} message QueryUnreceivedAcksResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryUnreceivedAcksResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.sequences = [];
                        if (options.defaults)
                            object.height = null;
                        if (message.sequences && message.sequences.length) {
                            object.sequences = [];
                            for (let j = 0; j < message.sequences.length; ++j)
                                if (typeof message.sequences[j] === "number")
                                    object.sequences[j] = options.longs === String ? String(message.sequences[j]) : message.sequences[j];
                                else
                                    object.sequences[j] = options.longs === String ? $util.Long.prototype.toString.call(message.sequences[j]) : options.longs === Number ? new $util.LongBits(message.sequences[j].low >>> 0, message.sequences[j].high >>> 0).toNumber(true) : message.sequences[j];
                        }
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryUnreceivedAcksResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryUnreceivedAcksResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryUnreceivedAcksResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryUnreceivedAcksResponse;
                })();

                v1.QueryNextSequenceReceiveRequest = (function() {

                    /**
                     * Properties of a QueryNextSequenceReceiveRequest.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryNextSequenceReceiveRequest
                     * @property {string|null} [port_id] QueryNextSequenceReceiveRequest port_id
                     * @property {string|null} [channel_id] QueryNextSequenceReceiveRequest channel_id
                     */

                    /**
                     * Constructs a new QueryNextSequenceReceiveRequest.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryNextSequenceReceiveRequest.
                     * @implements IQueryNextSequenceReceiveRequest
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest=} [properties] Properties to set
                     */
                    function QueryNextSequenceReceiveRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryNextSequenceReceiveRequest port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     */
                    QueryNextSequenceReceiveRequest.prototype.port_id = "";

                    /**
                     * QueryNextSequenceReceiveRequest channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     */
                    QueryNextSequenceReceiveRequest.prototype.channel_id = "";

                    /**
                     * Encodes the specified QueryNextSequenceReceiveRequest message. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} message QueryNextSequenceReceiveRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryNextSequenceReceiveRequest message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveRequest} message QueryNextSequenceReceiveRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} QueryNextSequenceReceiveRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} QueryNextSequenceReceiveRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryNextSequenceReceiveRequest message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryNextSequenceReceiveRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryNextSequenceReceiveRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} QueryNextSequenceReceiveRequest
                     */
                    QueryNextSequenceReceiveRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveRequest();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryNextSequenceReceiveRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @static
                     * @param {ibc.core.channel.v1.QueryNextSequenceReceiveRequest} message QueryNextSequenceReceiveRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryNextSequenceReceiveRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this QueryNextSequenceReceiveRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryNextSequenceReceiveRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryNextSequenceReceiveRequest;
                })();

                v1.QueryNextSequenceReceiveResponse = (function() {

                    /**
                     * Properties of a QueryNextSequenceReceiveResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IQueryNextSequenceReceiveResponse
                     * @property {Long|null} [next_sequence_receive] QueryNextSequenceReceiveResponse next_sequence_receive
                     * @property {Uint8Array|null} [proof] QueryNextSequenceReceiveResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryNextSequenceReceiveResponse proof_height
                     */

                    /**
                     * Constructs a new QueryNextSequenceReceiveResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a QueryNextSequenceReceiveResponse.
                     * @implements IQueryNextSequenceReceiveResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse=} [properties] Properties to set
                     */
                    function QueryNextSequenceReceiveResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryNextSequenceReceiveResponse next_sequence_receive.
                     * @member {Long} next_sequence_receive
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.next_sequence_receive = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryNextSequenceReceiveResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryNextSequenceReceiveResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     */
                    QueryNextSequenceReceiveResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryNextSequenceReceiveResponse message. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse} message QueryNextSequenceReceiveResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.next_sequence_receive != null && Object.hasOwnProperty.call(message, "next_sequence_receive"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.next_sequence_receive);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryNextSequenceReceiveResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.QueryNextSequenceReceiveResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {ibc.core.channel.v1.IQueryNextSequenceReceiveResponse} message QueryNextSequenceReceiveResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryNextSequenceReceiveResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} QueryNextSequenceReceiveResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.next_sequence_receive = reader.uint64();
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryNextSequenceReceiveResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} QueryNextSequenceReceiveResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryNextSequenceReceiveResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryNextSequenceReceiveResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryNextSequenceReceiveResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.next_sequence_receive != null && message.hasOwnProperty("next_sequence_receive"))
                            if (!$util.isInteger(message.next_sequence_receive) && !(message.next_sequence_receive && $util.isInteger(message.next_sequence_receive.low) && $util.isInteger(message.next_sequence_receive.high)))
                                return "next_sequence_receive: integer|Long expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryNextSequenceReceiveResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} QueryNextSequenceReceiveResponse
                     */
                    QueryNextSequenceReceiveResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
                            return object;
                        let message = new $root.ibc.core.channel.v1.QueryNextSequenceReceiveResponse();
                        if (object.next_sequence_receive != null)
                            if ($util.Long)
                                (message.next_sequence_receive = $util.Long.fromValue(object.next_sequence_receive)).unsigned = true;
                            else if (typeof object.next_sequence_receive === "string")
                                message.next_sequence_receive = parseInt(object.next_sequence_receive, 10);
                            else if (typeof object.next_sequence_receive === "number")
                                message.next_sequence_receive = object.next_sequence_receive;
                            else if (typeof object.next_sequence_receive === "object")
                                message.next_sequence_receive = new $util.LongBits(object.next_sequence_receive.low >>> 0, object.next_sequence_receive.high >>> 0).toNumber(true);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryNextSequenceReceiveResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @static
                     * @param {ibc.core.channel.v1.QueryNextSequenceReceiveResponse} message QueryNextSequenceReceiveResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryNextSequenceReceiveResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_sequence_receive = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_sequence_receive = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.next_sequence_receive != null && message.hasOwnProperty("next_sequence_receive"))
                            if (typeof message.next_sequence_receive === "number")
                                object.next_sequence_receive = options.longs === String ? String(message.next_sequence_receive) : message.next_sequence_receive;
                            else
                                object.next_sequence_receive = options.longs === String ? $util.Long.prototype.toString.call(message.next_sequence_receive) : options.longs === Number ? new $util.LongBits(message.next_sequence_receive.low >>> 0, message.next_sequence_receive.high >>> 0).toNumber(true) : message.next_sequence_receive;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryNextSequenceReceiveResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.QueryNextSequenceReceiveResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryNextSequenceReceiveResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryNextSequenceReceiveResponse;
                })();

                v1.Channel = (function() {

                    /**
                     * Properties of a Channel.
                     * @memberof ibc.core.channel.v1
                     * @interface IChannel
                     * @property {ibc.core.channel.v1.State|null} [state] Channel state
                     * @property {ibc.core.channel.v1.Order|null} [ordering] Channel ordering
                     * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] Channel counterparty
                     * @property {Array.<string>|null} [connection_hops] Channel connection_hops
                     * @property {string|null} [version] Channel version
                     */

                    /**
                     * Constructs a new Channel.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Channel.
                     * @implements IChannel
                     * @constructor
                     * @param {ibc.core.channel.v1.IChannel=} [properties] Properties to set
                     */
                    function Channel(properties) {
                        this.connection_hops = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Channel state.
                     * @member {ibc.core.channel.v1.State} state
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.state = 0;

                    /**
                     * Channel ordering.
                     * @member {ibc.core.channel.v1.Order} ordering
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.ordering = 0;

                    /**
                     * Channel counterparty.
                     * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.counterparty = null;

                    /**
                     * Channel connection_hops.
                     * @member {Array.<string>} connection_hops
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.connection_hops = $util.emptyArray;

                    /**
                     * Channel version.
                     * @member {string} version
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     */
                    Channel.prototype.version = "";

                    /**
                     * Encodes the specified Channel message. Does not implicitly {@link ibc.core.channel.v1.Channel.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {ibc.core.channel.v1.IChannel} message Channel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Channel.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                        if (message.ordering != null && Object.hasOwnProperty.call(message, "ordering"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ordering);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.channel.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.connection_hops != null && message.connection_hops.length)
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.connection_hops[i]);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                        return writer;
                    };

                    /**
                     * Encodes the specified Channel message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Channel.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {ibc.core.channel.v1.IChannel} message Channel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Channel.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Channel message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Channel} Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Channel.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Channel();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.state = reader.int32();
                                break;
                            case 2:
                                message.ordering = reader.int32();
                                break;
                            case 3:
                                message.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.connection_hops && message.connection_hops.length))
                                    message.connection_hops = [];
                                message.connection_hops.push(reader.string());
                                break;
                            case 5:
                                message.version = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Channel message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Channel} Channel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Channel.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Channel message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Channel.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            switch (message.ordering) {
                            default:
                                return "ordering: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.channel.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.connection_hops != null && message.hasOwnProperty("connection_hops")) {
                            if (!Array.isArray(message.connection_hops))
                                return "connection_hops: array expected";
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                if (!$util.isString(message.connection_hops[i]))
                                    return "connection_hops: string[] expected";
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        return null;
                    };

                    /**
                     * Creates a Channel message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Channel} Channel
                     */
                    Channel.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Channel)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Channel();
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        case "STATE_CLOSED":
                        case 4:
                            message.state = 4;
                            break;
                        }
                        switch (object.ordering) {
                        case "ORDER_NONE_UNSPECIFIED":
                        case 0:
                            message.ordering = 0;
                            break;
                        case "ORDER_UNORDERED":
                        case 1:
                            message.ordering = 1;
                            break;
                        case "ORDER_ORDERED":
                        case 2:
                            message.ordering = 2;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.channel.v1.Channel.counterparty: object expected");
                            message.counterparty = $root.ibc.core.channel.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.connection_hops) {
                            if (!Array.isArray(object.connection_hops))
                                throw TypeError(".ibc.core.channel.v1.Channel.connection_hops: array expected");
                            message.connection_hops = [];
                            for (let i = 0; i < object.connection_hops.length; ++i)
                                message.connection_hops[i] = String(object.connection_hops[i]);
                        }
                        if (object.version != null)
                            message.version = String(object.version);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Channel message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Channel
                     * @static
                     * @param {ibc.core.channel.v1.Channel} message Channel
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Channel.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connection_hops = [];
                        if (options.defaults) {
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.ordering = options.enums === String ? "ORDER_NONE_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            object.version = "";
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.channel.v1.State[message.state] : message.state;
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            object.ordering = options.enums === String ? $root.ibc.core.channel.v1.Order[message.ordering] : message.ordering;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.channel.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.connection_hops && message.connection_hops.length) {
                            object.connection_hops = [];
                            for (let j = 0; j < message.connection_hops.length; ++j)
                                object.connection_hops[j] = message.connection_hops[j];
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        return object;
                    };

                    /**
                     * Converts this Channel to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Channel
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Channel.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Channel;
                })();

                v1.IdentifiedChannel = (function() {

                    /**
                     * Properties of an IdentifiedChannel.
                     * @memberof ibc.core.channel.v1
                     * @interface IIdentifiedChannel
                     * @property {ibc.core.channel.v1.State|null} [state] IdentifiedChannel state
                     * @property {ibc.core.channel.v1.Order|null} [ordering] IdentifiedChannel ordering
                     * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] IdentifiedChannel counterparty
                     * @property {Array.<string>|null} [connection_hops] IdentifiedChannel connection_hops
                     * @property {string|null} [version] IdentifiedChannel version
                     * @property {string|null} [port_id] IdentifiedChannel port_id
                     * @property {string|null} [channel_id] IdentifiedChannel channel_id
                     */

                    /**
                     * Constructs a new IdentifiedChannel.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents an IdentifiedChannel.
                     * @implements IIdentifiedChannel
                     * @constructor
                     * @param {ibc.core.channel.v1.IIdentifiedChannel=} [properties] Properties to set
                     */
                    function IdentifiedChannel(properties) {
                        this.connection_hops = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedChannel state.
                     * @member {ibc.core.channel.v1.State} state
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.state = 0;

                    /**
                     * IdentifiedChannel ordering.
                     * @member {ibc.core.channel.v1.Order} ordering
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.ordering = 0;

                    /**
                     * IdentifiedChannel counterparty.
                     * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.counterparty = null;

                    /**
                     * IdentifiedChannel connection_hops.
                     * @member {Array.<string>} connection_hops
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.connection_hops = $util.emptyArray;

                    /**
                     * IdentifiedChannel version.
                     * @member {string} version
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.version = "";

                    /**
                     * IdentifiedChannel port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.port_id = "";

                    /**
                     * IdentifiedChannel channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     */
                    IdentifiedChannel.prototype.channel_id = "";

                    /**
                     * Encodes the specified IdentifiedChannel message. Does not implicitly {@link ibc.core.channel.v1.IdentifiedChannel.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {ibc.core.channel.v1.IIdentifiedChannel} message IdentifiedChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedChannel.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                        if (message.ordering != null && Object.hasOwnProperty.call(message, "ordering"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ordering);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.channel.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.connection_hops != null && message.connection_hops.length)
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.connection_hops[i]);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedChannel message, length delimited. Does not implicitly {@link ibc.core.channel.v1.IdentifiedChannel.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {ibc.core.channel.v1.IIdentifiedChannel} message IdentifiedChannel message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedChannel.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedChannel message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedChannel.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.IdentifiedChannel();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.state = reader.int32();
                                break;
                            case 2:
                                message.ordering = reader.int32();
                                break;
                            case 3:
                                message.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 4:
                                if (!(message.connection_hops && message.connection_hops.length))
                                    message.connection_hops = [];
                                message.connection_hops.push(reader.string());
                                break;
                            case 5:
                                message.version = reader.string();
                                break;
                            case 6:
                                message.port_id = reader.string();
                                break;
                            case 7:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedChannel message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedChannel.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedChannel message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedChannel.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                                break;
                            }
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            switch (message.ordering) {
                            default:
                                return "ordering: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.channel.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.connection_hops != null && message.hasOwnProperty("connection_hops")) {
                            if (!Array.isArray(message.connection_hops))
                                return "connection_hops: array expected";
                            for (let i = 0; i < message.connection_hops.length; ++i)
                                if (!$util.isString(message.connection_hops[i]))
                                    return "connection_hops: string[] expected";
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates an IdentifiedChannel message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                     */
                    IdentifiedChannel.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.IdentifiedChannel)
                            return object;
                        let message = new $root.ibc.core.channel.v1.IdentifiedChannel();
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        case "STATE_CLOSED":
                        case 4:
                            message.state = 4;
                            break;
                        }
                        switch (object.ordering) {
                        case "ORDER_NONE_UNSPECIFIED":
                        case 0:
                            message.ordering = 0;
                            break;
                        case "ORDER_UNORDERED":
                        case 1:
                            message.ordering = 1;
                            break;
                        case "ORDER_ORDERED":
                        case 2:
                            message.ordering = 2;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.channel.v1.IdentifiedChannel.counterparty: object expected");
                            message.counterparty = $root.ibc.core.channel.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.connection_hops) {
                            if (!Array.isArray(object.connection_hops))
                                throw TypeError(".ibc.core.channel.v1.IdentifiedChannel.connection_hops: array expected");
                            message.connection_hops = [];
                            for (let i = 0; i < object.connection_hops.length; ++i)
                                message.connection_hops[i] = String(object.connection_hops[i]);
                        }
                        if (object.version != null)
                            message.version = String(object.version);
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedChannel message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @static
                     * @param {ibc.core.channel.v1.IdentifiedChannel} message IdentifiedChannel
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedChannel.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connection_hops = [];
                        if (options.defaults) {
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.ordering = options.enums === String ? "ORDER_NONE_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            object.version = "";
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.channel.v1.State[message.state] : message.state;
                        if (message.ordering != null && message.hasOwnProperty("ordering"))
                            object.ordering = options.enums === String ? $root.ibc.core.channel.v1.Order[message.ordering] : message.ordering;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.channel.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.connection_hops && message.connection_hops.length) {
                            object.connection_hops = [];
                            for (let j = 0; j < message.connection_hops.length; ++j)
                                object.connection_hops[j] = message.connection_hops[j];
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this IdentifiedChannel to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.IdentifiedChannel
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedChannel.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedChannel;
                })();

                /**
                 * State enum.
                 * @name ibc.core.channel.v1.State
                 * @enum {number}
                 * @property {number} STATE_UNINITIALIZED_UNSPECIFIED=0 STATE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} STATE_INIT=1 STATE_INIT value
                 * @property {number} STATE_TRYOPEN=2 STATE_TRYOPEN value
                 * @property {number} STATE_OPEN=3 STATE_OPEN value
                 * @property {number} STATE_CLOSED=4 STATE_CLOSED value
                 */
                v1.State = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STATE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "STATE_INIT"] = 1;
                    values[valuesById[2] = "STATE_TRYOPEN"] = 2;
                    values[valuesById[3] = "STATE_OPEN"] = 3;
                    values[valuesById[4] = "STATE_CLOSED"] = 4;
                    return values;
                })();

                /**
                 * Order enum.
                 * @name ibc.core.channel.v1.Order
                 * @enum {number}
                 * @property {number} ORDER_NONE_UNSPECIFIED=0 ORDER_NONE_UNSPECIFIED value
                 * @property {number} ORDER_UNORDERED=1 ORDER_UNORDERED value
                 * @property {number} ORDER_ORDERED=2 ORDER_ORDERED value
                 */
                v1.Order = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "ORDER_NONE_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "ORDER_UNORDERED"] = 1;
                    values[valuesById[2] = "ORDER_ORDERED"] = 2;
                    return values;
                })();

                v1.Counterparty = (function() {

                    /**
                     * Properties of a Counterparty.
                     * @memberof ibc.core.channel.v1
                     * @interface ICounterparty
                     * @property {string|null} [port_id] Counterparty port_id
                     * @property {string|null} [channel_id] Counterparty channel_id
                     */

                    /**
                     * Constructs a new Counterparty.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Counterparty.
                     * @implements ICounterparty
                     * @constructor
                     * @param {ibc.core.channel.v1.ICounterparty=} [properties] Properties to set
                     */
                    function Counterparty(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Counterparty port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.port_id = "";

                    /**
                     * Counterparty channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.channel_id = "";

                    /**
                     * Encodes the specified Counterparty message. Does not implicitly {@link ibc.core.channel.v1.Counterparty.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {ibc.core.channel.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified Counterparty message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Counterparty.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {ibc.core.channel.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Counterparty();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Counterparty message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Counterparty.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a Counterparty message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                     */
                    Counterparty.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Counterparty)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Counterparty();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Counterparty message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @static
                     * @param {ibc.core.channel.v1.Counterparty} message Counterparty
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Counterparty.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        return object;
                    };

                    /**
                     * Converts this Counterparty to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Counterparty
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Counterparty.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Counterparty;
                })();

                v1.Packet = (function() {

                    /**
                     * Properties of a Packet.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacket
                     * @property {Long|null} [sequence] Packet sequence
                     * @property {string|null} [source_port] Packet source_port
                     * @property {string|null} [source_channel] Packet source_channel
                     * @property {string|null} [destination_port] Packet destination_port
                     * @property {string|null} [destination_channel] Packet destination_channel
                     * @property {Uint8Array|null} [data] Packet data
                     * @property {ibc.core.client.v1.IHeight|null} [timeout_height] Packet timeout_height
                     * @property {Long|null} [timeout_timestamp] Packet timeout_timestamp
                     */

                    /**
                     * Constructs a new Packet.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Packet.
                     * @implements IPacket
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacket=} [properties] Properties to set
                     */
                    function Packet(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Packet sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Packet source_port.
                     * @member {string} source_port
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.source_port = "";

                    /**
                     * Packet source_channel.
                     * @member {string} source_channel
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.source_channel = "";

                    /**
                     * Packet destination_port.
                     * @member {string} destination_port
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.destination_port = "";

                    /**
                     * Packet destination_channel.
                     * @member {string} destination_channel
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.destination_channel = "";

                    /**
                     * Packet data.
                     * @member {Uint8Array} data
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.data = $util.newBuffer([]);

                    /**
                     * Packet timeout_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.timeout_height = null;

                    /**
                     * Packet timeout_timestamp.
                     * @member {Long} timeout_timestamp
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     */
                    Packet.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Packet message. Does not implicitly {@link ibc.core.channel.v1.Packet.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {ibc.core.channel.v1.IPacket} message Packet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Packet.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.source_port != null && Object.hasOwnProperty.call(message, "source_port"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_port);
                        if (message.source_channel != null && Object.hasOwnProperty.call(message, "source_channel"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.source_channel);
                        if (message.destination_port != null && Object.hasOwnProperty.call(message, "destination_port"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.destination_port);
                        if (message.destination_channel != null && Object.hasOwnProperty.call(message, "destination_channel"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.destination_channel);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.data);
                        if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                            $root.ibc.core.client.v1.Height.encode(message.timeout_height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.timeout_timestamp != null && Object.hasOwnProperty.call(message, "timeout_timestamp"))
                            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.timeout_timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified Packet message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Packet.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {ibc.core.channel.v1.IPacket} message Packet message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Packet.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Packet message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Packet} Packet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Packet.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Packet();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.source_port = reader.string();
                                break;
                            case 3:
                                message.source_channel = reader.string();
                                break;
                            case 4:
                                message.destination_port = reader.string();
                                break;
                            case 5:
                                message.destination_channel = reader.string();
                                break;
                            case 6:
                                message.data = reader.bytes();
                                break;
                            case 7:
                                message.timeout_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.timeout_timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Packet message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Packet} Packet
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Packet.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Packet message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Packet.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            if (!$util.isString(message.source_port))
                                return "source_port: string expected";
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            if (!$util.isString(message.source_channel))
                                return "source_channel: string expected";
                        if (message.destination_port != null && message.hasOwnProperty("destination_port"))
                            if (!$util.isString(message.destination_port))
                                return "destination_port: string expected";
                        if (message.destination_channel != null && message.hasOwnProperty("destination_channel"))
                            if (!$util.isString(message.destination_channel))
                                return "destination_channel: string expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.timeout_height);
                            if (error)
                                return "timeout_height." + error;
                        }
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (!$util.isInteger(message.timeout_timestamp) && !(message.timeout_timestamp && $util.isInteger(message.timeout_timestamp.low) && $util.isInteger(message.timeout_timestamp.high)))
                                return "timeout_timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a Packet message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Packet} Packet
                     */
                    Packet.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Packet)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Packet();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.source_port != null)
                            message.source_port = String(object.source_port);
                        if (object.source_channel != null)
                            message.source_channel = String(object.source_channel);
                        if (object.destination_port != null)
                            message.destination_port = String(object.destination_port);
                        if (object.destination_channel != null)
                            message.destination_channel = String(object.destination_channel);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.timeout_height != null) {
                            if (typeof object.timeout_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.Packet.timeout_height: object expected");
                            message.timeout_height = $root.ibc.core.client.v1.Height.fromObject(object.timeout_height);
                        }
                        if (object.timeout_timestamp != null)
                            if ($util.Long)
                                (message.timeout_timestamp = $util.Long.fromValue(object.timeout_timestamp)).unsigned = true;
                            else if (typeof object.timeout_timestamp === "string")
                                message.timeout_timestamp = parseInt(object.timeout_timestamp, 10);
                            else if (typeof object.timeout_timestamp === "number")
                                message.timeout_timestamp = object.timeout_timestamp;
                            else if (typeof object.timeout_timestamp === "object")
                                message.timeout_timestamp = new $util.LongBits(object.timeout_timestamp.low >>> 0, object.timeout_timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Packet message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Packet
                     * @static
                     * @param {ibc.core.channel.v1.Packet} message Packet
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Packet.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.source_port = "";
                            object.source_channel = "";
                            object.destination_port = "";
                            object.destination_channel = "";
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            object.timeout_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timeout_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timeout_timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.source_port != null && message.hasOwnProperty("source_port"))
                            object.source_port = message.source_port;
                        if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                            object.source_channel = message.source_channel;
                        if (message.destination_port != null && message.hasOwnProperty("destination_port"))
                            object.destination_port = message.destination_port;
                        if (message.destination_channel != null && message.hasOwnProperty("destination_channel"))
                            object.destination_channel = message.destination_channel;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                            object.timeout_height = $root.ibc.core.client.v1.Height.toObject(message.timeout_height, options);
                        if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                            if (typeof message.timeout_timestamp === "number")
                                object.timeout_timestamp = options.longs === String ? String(message.timeout_timestamp) : message.timeout_timestamp;
                            else
                                object.timeout_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_timestamp) : options.longs === Number ? new $util.LongBits(message.timeout_timestamp.low >>> 0, message.timeout_timestamp.high >>> 0).toNumber(true) : message.timeout_timestamp;
                        return object;
                    };

                    /**
                     * Converts this Packet to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Packet
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Packet.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Packet;
                })();

                v1.PacketState = (function() {

                    /**
                     * Properties of a PacketState.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacketState
                     * @property {string|null} [port_id] PacketState port_id
                     * @property {string|null} [channel_id] PacketState channel_id
                     * @property {Long|null} [sequence] PacketState sequence
                     * @property {Uint8Array|null} [data] PacketState data
                     */

                    /**
                     * Constructs a new PacketState.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a PacketState.
                     * @implements IPacketState
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacketState=} [properties] Properties to set
                     */
                    function PacketState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketState port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.port_id = "";

                    /**
                     * PacketState channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.channel_id = "";

                    /**
                     * PacketState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PacketState data.
                     * @member {Uint8Array} data
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     */
                    PacketState.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketState message. Does not implicitly {@link ibc.core.channel.v1.PacketState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {ibc.core.channel.v1.IPacketState} message PacketState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketState message, length delimited. Does not implicitly {@link ibc.core.channel.v1.PacketState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {ibc.core.channel.v1.IPacketState} message PacketState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.PacketState} PacketState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.PacketState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            case 4:
                                message.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.PacketState} PacketState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketState message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.PacketState} PacketState
                     */
                    PacketState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.PacketState)
                            return object;
                        let message = new $root.ibc.core.channel.v1.PacketState();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.PacketState
                     * @static
                     * @param {ibc.core.channel.v1.PacketState} message PacketState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };

                    /**
                     * Converts this PacketState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.PacketState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketState;
                })();

                v1.Acknowledgement = (function() {

                    /**
                     * Properties of an Acknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @interface IAcknowledgement
                     * @property {Uint8Array|null} [result] Acknowledgement result
                     * @property {string|null} [error] Acknowledgement error
                     */

                    /**
                     * Constructs a new Acknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents an Acknowledgement.
                     * @implements IAcknowledgement
                     * @constructor
                     * @param {ibc.core.channel.v1.IAcknowledgement=} [properties] Properties to set
                     */
                    function Acknowledgement(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Acknowledgement result.
                     * @member {Uint8Array|null|undefined} result
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Acknowledgement.prototype.result = null;

                    /**
                     * Acknowledgement error.
                     * @member {string|null|undefined} error
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Acknowledgement.prototype.error = null;

                    // OneOf field names bound to virtual getters and setters
                    let $oneOfFields;

                    /**
                     * Acknowledgement response.
                     * @member {"result"|"error"|undefined} response
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     */
                    Object.defineProperty(Acknowledgement.prototype, "response", {
                        get: $util.oneOfGetter($oneOfFields = ["result", "error"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });

                    /**
                     * Encodes the specified Acknowledgement message. Does not implicitly {@link ibc.core.channel.v1.Acknowledgement.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IAcknowledgement} message Acknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Acknowledgement.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                            writer.uint32(/* id 21, wireType 2 =*/170).bytes(message.result);
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 22, wireType 2 =*/178).string(message.error);
                        return writer;
                    };

                    /**
                     * Encodes the specified Acknowledgement message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Acknowledgement.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IAcknowledgement} message Acknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Acknowledgement.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an Acknowledgement message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Acknowledgement.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Acknowledgement();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 21:
                                message.result = reader.bytes();
                                break;
                            case 22:
                                message.error = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an Acknowledgement message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Acknowledgement.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an Acknowledgement message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Acknowledgement.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        let properties = {};
                        if (message.result != null && message.hasOwnProperty("result")) {
                            properties.response = 1;
                            if (!(message.result && typeof message.result.length === "number" || $util.isString(message.result)))
                                return "result: buffer expected";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            if (properties.response === 1)
                                return "response: multiple values";
                            properties.response = 1;
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        }
                        return null;
                    };

                    /**
                     * Creates an Acknowledgement message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                     */
                    Acknowledgement.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.Acknowledgement)
                            return object;
                        let message = new $root.ibc.core.channel.v1.Acknowledgement();
                        if (object.result != null)
                            if (typeof object.result === "string")
                                $util.base64.decode(object.result, message.result = $util.newBuffer($util.base64.length(object.result)), 0);
                            else if (object.result.length)
                                message.result = object.result;
                        if (object.error != null)
                            message.error = String(object.error);
                        return message;
                    };

                    /**
                     * Creates a plain object from an Acknowledgement message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.Acknowledgement} message Acknowledgement
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Acknowledgement.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (message.result != null && message.hasOwnProperty("result")) {
                            object.result = options.bytes === String ? $util.base64.encode(message.result, 0, message.result.length) : options.bytes === Array ? Array.prototype.slice.call(message.result) : message.result;
                            if (options.oneofs)
                                object.response = "result";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            object.error = message.error;
                            if (options.oneofs)
                                object.response = "error";
                        }
                        return object;
                    };

                    /**
                     * Converts this Acknowledgement to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.Acknowledgement
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Acknowledgement.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Acknowledgement;
                })();

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenInit}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenInitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenInitResponse} [response] MsgChannelOpenInitResponse
                     */

                    /**
                     * Calls ChannelOpenInit.
                     * @function channelOpenInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} request MsgChannelOpenInit message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenInitCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenInitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenInit = function channelOpenInit(request, callback) {
                        return this.rpcCall(channelOpenInit, $root.ibc.core.channel.v1.MsgChannelOpenInit, $root.ibc.core.channel.v1.MsgChannelOpenInitResponse, request, callback);
                    }, "name", { value: "ChannelOpenInit" });

                    /**
                     * Calls ChannelOpenInit.
                     * @function channelOpenInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} request MsgChannelOpenInit message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenInitResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenTry}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenTryCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenTryResponse} [response] MsgChannelOpenTryResponse
                     */

                    /**
                     * Calls ChannelOpenTry.
                     * @function channelOpenTry
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} request MsgChannelOpenTry message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenTryCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenTryResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenTry = function channelOpenTry(request, callback) {
                        return this.rpcCall(channelOpenTry, $root.ibc.core.channel.v1.MsgChannelOpenTry, $root.ibc.core.channel.v1.MsgChannelOpenTryResponse, request, callback);
                    }, "name", { value: "ChannelOpenTry" });

                    /**
                     * Calls ChannelOpenTry.
                     * @function channelOpenTry
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} request MsgChannelOpenTry message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenTryResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenAck}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenAckCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenAckResponse} [response] MsgChannelOpenAckResponse
                     */

                    /**
                     * Calls ChannelOpenAck.
                     * @function channelOpenAck
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} request MsgChannelOpenAck message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenAckCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenAckResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenAck = function channelOpenAck(request, callback) {
                        return this.rpcCall(channelOpenAck, $root.ibc.core.channel.v1.MsgChannelOpenAck, $root.ibc.core.channel.v1.MsgChannelOpenAckResponse, request, callback);
                    }, "name", { value: "ChannelOpenAck" });

                    /**
                     * Calls ChannelOpenAck.
                     * @function channelOpenAck
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} request MsgChannelOpenAck message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenAckResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelOpenConfirm}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelOpenConfirmCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} [response] MsgChannelOpenConfirmResponse
                     */

                    /**
                     * Calls ChannelOpenConfirm.
                     * @function channelOpenConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} request MsgChannelOpenConfirm message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelOpenConfirmCallback} callback Node-style callback called with the error, if any, and MsgChannelOpenConfirmResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelOpenConfirm = function channelOpenConfirm(request, callback) {
                        return this.rpcCall(channelOpenConfirm, $root.ibc.core.channel.v1.MsgChannelOpenConfirm, $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse, request, callback);
                    }, "name", { value: "ChannelOpenConfirm" });

                    /**
                     * Calls ChannelOpenConfirm.
                     * @function channelOpenConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} request MsgChannelOpenConfirm message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelOpenConfirmResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelCloseInit}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelCloseInitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelCloseInitResponse} [response] MsgChannelCloseInitResponse
                     */

                    /**
                     * Calls ChannelCloseInit.
                     * @function channelCloseInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} request MsgChannelCloseInit message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelCloseInitCallback} callback Node-style callback called with the error, if any, and MsgChannelCloseInitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelCloseInit = function channelCloseInit(request, callback) {
                        return this.rpcCall(channelCloseInit, $root.ibc.core.channel.v1.MsgChannelCloseInit, $root.ibc.core.channel.v1.MsgChannelCloseInitResponse, request, callback);
                    }, "name", { value: "ChannelCloseInit" });

                    /**
                     * Calls ChannelCloseInit.
                     * @function channelCloseInit
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} request MsgChannelCloseInit message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelCloseInitResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#channelCloseConfirm}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef ChannelCloseConfirmCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} [response] MsgChannelCloseConfirmResponse
                     */

                    /**
                     * Calls ChannelCloseConfirm.
                     * @function channelCloseConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} request MsgChannelCloseConfirm message or plain object
                     * @param {ibc.core.channel.v1.Msg.ChannelCloseConfirmCallback} callback Node-style callback called with the error, if any, and MsgChannelCloseConfirmResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.channelCloseConfirm = function channelCloseConfirm(request, callback) {
                        return this.rpcCall(channelCloseConfirm, $root.ibc.core.channel.v1.MsgChannelCloseConfirm, $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse, request, callback);
                    }, "name", { value: "ChannelCloseConfirm" });

                    /**
                     * Calls ChannelCloseConfirm.
                     * @function channelCloseConfirm
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} request MsgChannelCloseConfirm message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgChannelCloseConfirmResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#recvPacket}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef RecvPacketCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgRecvPacketResponse} [response] MsgRecvPacketResponse
                     */

                    /**
                     * Calls RecvPacket.
                     * @function recvPacket
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} request MsgRecvPacket message or plain object
                     * @param {ibc.core.channel.v1.Msg.RecvPacketCallback} callback Node-style callback called with the error, if any, and MsgRecvPacketResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.recvPacket = function recvPacket(request, callback) {
                        return this.rpcCall(recvPacket, $root.ibc.core.channel.v1.MsgRecvPacket, $root.ibc.core.channel.v1.MsgRecvPacketResponse, request, callback);
                    }, "name", { value: "RecvPacket" });

                    /**
                     * Calls RecvPacket.
                     * @function recvPacket
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} request MsgRecvPacket message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgRecvPacketResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#timeout}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef TimeoutCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgTimeoutResponse} [response] MsgTimeoutResponse
                     */

                    /**
                     * Calls Timeout.
                     * @function timeout
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeout} request MsgTimeout message or plain object
                     * @param {ibc.core.channel.v1.Msg.TimeoutCallback} callback Node-style callback called with the error, if any, and MsgTimeoutResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.timeout = function timeout(request, callback) {
                        return this.rpcCall(timeout, $root.ibc.core.channel.v1.MsgTimeout, $root.ibc.core.channel.v1.MsgTimeoutResponse, request, callback);
                    }, "name", { value: "Timeout" });

                    /**
                     * Calls Timeout.
                     * @function timeout
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeout} request MsgTimeout message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgTimeoutResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#timeoutOnClose}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef TimeoutOnCloseCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} [response] MsgTimeoutOnCloseResponse
                     */

                    /**
                     * Calls TimeoutOnClose.
                     * @function timeoutOnClose
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} request MsgTimeoutOnClose message or plain object
                     * @param {ibc.core.channel.v1.Msg.TimeoutOnCloseCallback} callback Node-style callback called with the error, if any, and MsgTimeoutOnCloseResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.timeoutOnClose = function timeoutOnClose(request, callback) {
                        return this.rpcCall(timeoutOnClose, $root.ibc.core.channel.v1.MsgTimeoutOnClose, $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse, request, callback);
                    }, "name", { value: "TimeoutOnClose" });

                    /**
                     * Calls TimeoutOnClose.
                     * @function timeoutOnClose
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} request MsgTimeoutOnClose message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgTimeoutOnCloseResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.channel.v1.Msg#acknowledgement}.
                     * @memberof ibc.core.channel.v1.Msg
                     * @typedef AcknowledgementCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.channel.v1.MsgAcknowledgementResponse} [response] MsgAcknowledgementResponse
                     */

                    /**
                     * Calls Acknowledgement.
                     * @function acknowledgement
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} request MsgAcknowledgement message or plain object
                     * @param {ibc.core.channel.v1.Msg.AcknowledgementCallback} callback Node-style callback called with the error, if any, and MsgAcknowledgementResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.acknowledgement = function acknowledgement(request, callback) {
                        return this.rpcCall(acknowledgement, $root.ibc.core.channel.v1.MsgAcknowledgement, $root.ibc.core.channel.v1.MsgAcknowledgementResponse, request, callback);
                    }, "name", { value: "Acknowledgement" });

                    /**
                     * Calls Acknowledgement.
                     * @function acknowledgement
                     * @memberof ibc.core.channel.v1.Msg
                     * @instance
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} request MsgAcknowledgement message or plain object
                     * @returns {Promise<ibc.core.channel.v1.MsgAcknowledgementResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgChannelOpenInit = (function() {

                    /**
                     * Properties of a MsgChannelOpenInit.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenInit
                     * @property {string|null} [port_id] MsgChannelOpenInit port_id
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] MsgChannelOpenInit channel
                     * @property {string|null} [signer] MsgChannelOpenInit signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenInit.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenInit.
                     * @implements IMsgChannelOpenInit
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit=} [properties] Properties to set
                     */
                    function MsgChannelOpenInit(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenInit port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.port_id = "";

                    /**
                     * MsgChannelOpenInit channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.channel = null;

                    /**
                     * MsgChannelOpenInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     */
                    MsgChannelOpenInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenInit message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} message MsgChannelOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenInit message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInit} message MsgChannelOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInit} MsgChannelOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenInit();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenInit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInit} MsgChannelOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenInit message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenInit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenInit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInit} MsgChannelOpenInit
                     */
                    MsgChannelOpenInit.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenInit)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenInit();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenInit.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenInit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenInit} message MsgChannelOpenInit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenInit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenInit to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenInit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenInit;
                })();

                v1.MsgChannelOpenInitResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenInitResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenInitResponse.
                     * @implements IMsgChannelOpenInitResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenInitResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse} message MsgChannelOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenInitResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenInitResponse} message MsgChannelOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInitResponse} MsgChannelOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInitResponse} MsgChannelOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenInitResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenInitResponse} MsgChannelOpenInitResponse
                     */
                    MsgChannelOpenInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenInitResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenInitResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenInitResponse} message MsgChannelOpenInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenInitResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenInitResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenInitResponse;
                })();

                v1.MsgChannelOpenTry = (function() {

                    /**
                     * Properties of a MsgChannelOpenTry.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenTry
                     * @property {string|null} [port_id] MsgChannelOpenTry port_id
                     * @property {string|null} [previous_channel_id] MsgChannelOpenTry previous_channel_id
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] MsgChannelOpenTry channel
                     * @property {string|null} [counterparty_version] MsgChannelOpenTry counterparty_version
                     * @property {Uint8Array|null} [proof_init] MsgChannelOpenTry proof_init
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenTry proof_height
                     * @property {string|null} [signer] MsgChannelOpenTry signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenTry.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenTry.
                     * @implements IMsgChannelOpenTry
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry=} [properties] Properties to set
                     */
                    function MsgChannelOpenTry(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenTry port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.port_id = "";

                    /**
                     * MsgChannelOpenTry previous_channel_id.
                     * @member {string} previous_channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.previous_channel_id = "";

                    /**
                     * MsgChannelOpenTry channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.channel = null;

                    /**
                     * MsgChannelOpenTry counterparty_version.
                     * @member {string} counterparty_version
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.counterparty_version = "";

                    /**
                     * MsgChannelOpenTry proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenTry proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenTry signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     */
                    MsgChannelOpenTry.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenTry message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTry.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} message MsgChannelOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTry.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.previous_channel_id != null && Object.hasOwnProperty.call(message, "previous_channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.previous_channel_id);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.counterparty_version != null && Object.hasOwnProperty.call(message, "counterparty_version"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.counterparty_version);
                        if (message.proof_init != null && Object.hasOwnProperty.call(message, "proof_init"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.proof_init);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenTry message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTry.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTry} message MsgChannelOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTry.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenTry message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTry} MsgChannelOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTry.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenTry();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.previous_channel_id = reader.string();
                                break;
                            case 3:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.counterparty_version = reader.string();
                                break;
                            case 5:
                                message.proof_init = reader.bytes();
                                break;
                            case 6:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenTry message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTry} MsgChannelOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTry.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenTry message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenTry.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.previous_channel_id != null && message.hasOwnProperty("previous_channel_id"))
                            if (!$util.isString(message.previous_channel_id))
                                return "previous_channel_id: string expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            if (!$util.isString(message.counterparty_version))
                                return "counterparty_version: string expected";
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            if (!(message.proof_init && typeof message.proof_init.length === "number" || $util.isString(message.proof_init)))
                                return "proof_init: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenTry message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTry} MsgChannelOpenTry
                     */
                    MsgChannelOpenTry.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenTry)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenTry();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.previous_channel_id != null)
                            message.previous_channel_id = String(object.previous_channel_id);
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenTry.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        if (object.counterparty_version != null)
                            message.counterparty_version = String(object.counterparty_version);
                        if (object.proof_init != null)
                            if (typeof object.proof_init === "string")
                                $util.base64.decode(object.proof_init, message.proof_init = $util.newBuffer($util.base64.length(object.proof_init)), 0);
                            else if (object.proof_init.length)
                                message.proof_init = object.proof_init;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenTry.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenTry message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenTry} message MsgChannelOpenTry
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenTry.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.previous_channel_id = "";
                            object.channel = null;
                            object.counterparty_version = "";
                            if (options.bytes === String)
                                object.proof_init = "";
                            else {
                                object.proof_init = [];
                                if (options.bytes !== Array)
                                    object.proof_init = $util.newBuffer(object.proof_init);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.previous_channel_id != null && message.hasOwnProperty("previous_channel_id"))
                            object.previous_channel_id = message.previous_channel_id;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            object.counterparty_version = message.counterparty_version;
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            object.proof_init = options.bytes === String ? $util.base64.encode(message.proof_init, 0, message.proof_init.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_init) : message.proof_init;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenTry to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTry
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenTry.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenTry;
                })();

                v1.MsgChannelOpenTryResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenTryResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenTryResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenTryResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenTryResponse.
                     * @implements IMsgChannelOpenTryResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenTryResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenTryResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse} message MsgChannelOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTryResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenTryResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenTryResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenTryResponse} message MsgChannelOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenTryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenTryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTryResponse} MsgChannelOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTryResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenTryResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenTryResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTryResponse} MsgChannelOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenTryResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenTryResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenTryResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenTryResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenTryResponse} MsgChannelOpenTryResponse
                     */
                    MsgChannelOpenTryResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenTryResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenTryResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenTryResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenTryResponse} message MsgChannelOpenTryResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenTryResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenTryResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenTryResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenTryResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenTryResponse;
                })();

                v1.MsgChannelOpenAck = (function() {

                    /**
                     * Properties of a MsgChannelOpenAck.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenAck
                     * @property {string|null} [port_id] MsgChannelOpenAck port_id
                     * @property {string|null} [channel_id] MsgChannelOpenAck channel_id
                     * @property {string|null} [counterparty_channel_id] MsgChannelOpenAck counterparty_channel_id
                     * @property {string|null} [counterparty_version] MsgChannelOpenAck counterparty_version
                     * @property {Uint8Array|null} [proof_try] MsgChannelOpenAck proof_try
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenAck proof_height
                     * @property {string|null} [signer] MsgChannelOpenAck signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenAck.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenAck.
                     * @implements IMsgChannelOpenAck
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck=} [properties] Properties to set
                     */
                    function MsgChannelOpenAck(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenAck port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.port_id = "";

                    /**
                     * MsgChannelOpenAck channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.channel_id = "";

                    /**
                     * MsgChannelOpenAck counterparty_channel_id.
                     * @member {string} counterparty_channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.counterparty_channel_id = "";

                    /**
                     * MsgChannelOpenAck counterparty_version.
                     * @member {string} counterparty_version
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.counterparty_version = "";

                    /**
                     * MsgChannelOpenAck proof_try.
                     * @member {Uint8Array} proof_try
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.proof_try = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenAck proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenAck signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     */
                    MsgChannelOpenAck.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenAck message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAck.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} message MsgChannelOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAck.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.counterparty_channel_id != null && Object.hasOwnProperty.call(message, "counterparty_channel_id"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.counterparty_channel_id);
                        if (message.counterparty_version != null && Object.hasOwnProperty.call(message, "counterparty_version"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.counterparty_version);
                        if (message.proof_try != null && Object.hasOwnProperty.call(message, "proof_try"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.proof_try);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 7, wireType 2 =*/58).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenAck message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAck.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAck} message MsgChannelOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAck.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenAck message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAck} MsgChannelOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAck.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenAck();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.counterparty_channel_id = reader.string();
                                break;
                            case 4:
                                message.counterparty_version = reader.string();
                                break;
                            case 5:
                                message.proof_try = reader.bytes();
                                break;
                            case 6:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenAck message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAck} MsgChannelOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAck.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenAck message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenAck.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.counterparty_channel_id != null && message.hasOwnProperty("counterparty_channel_id"))
                            if (!$util.isString(message.counterparty_channel_id))
                                return "counterparty_channel_id: string expected";
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            if (!$util.isString(message.counterparty_version))
                                return "counterparty_version: string expected";
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            if (!(message.proof_try && typeof message.proof_try.length === "number" || $util.isString(message.proof_try)))
                                return "proof_try: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenAck message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAck} MsgChannelOpenAck
                     */
                    MsgChannelOpenAck.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenAck)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenAck();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.counterparty_channel_id != null)
                            message.counterparty_channel_id = String(object.counterparty_channel_id);
                        if (object.counterparty_version != null)
                            message.counterparty_version = String(object.counterparty_version);
                        if (object.proof_try != null)
                            if (typeof object.proof_try === "string")
                                $util.base64.decode(object.proof_try, message.proof_try = $util.newBuffer($util.base64.length(object.proof_try)), 0);
                            else if (object.proof_try.length)
                                message.proof_try = object.proof_try;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenAck.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenAck message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenAck} message MsgChannelOpenAck
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenAck.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.counterparty_channel_id = "";
                            object.counterparty_version = "";
                            if (options.bytes === String)
                                object.proof_try = "";
                            else {
                                object.proof_try = [];
                                if (options.bytes !== Array)
                                    object.proof_try = $util.newBuffer(object.proof_try);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.counterparty_channel_id != null && message.hasOwnProperty("counterparty_channel_id"))
                            object.counterparty_channel_id = message.counterparty_channel_id;
                        if (message.counterparty_version != null && message.hasOwnProperty("counterparty_version"))
                            object.counterparty_version = message.counterparty_version;
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            object.proof_try = options.bytes === String ? $util.base64.encode(message.proof_try, 0, message.proof_try.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_try) : message.proof_try;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenAck to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAck
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenAck.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenAck;
                })();

                v1.MsgChannelOpenAckResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenAckResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenAckResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenAckResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenAckResponse.
                     * @implements IMsgChannelOpenAckResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenAckResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenAckResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAckResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse} message MsgChannelOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAckResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenAckResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenAckResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenAckResponse} message MsgChannelOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenAckResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenAckResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAckResponse} MsgChannelOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAckResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenAckResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenAckResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAckResponse} MsgChannelOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenAckResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenAckResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenAckResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenAckResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenAckResponse} MsgChannelOpenAckResponse
                     */
                    MsgChannelOpenAckResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenAckResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenAckResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenAckResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenAckResponse} message MsgChannelOpenAckResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenAckResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenAckResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenAckResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenAckResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenAckResponse;
                })();

                v1.MsgChannelOpenConfirm = (function() {

                    /**
                     * Properties of a MsgChannelOpenConfirm.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenConfirm
                     * @property {string|null} [port_id] MsgChannelOpenConfirm port_id
                     * @property {string|null} [channel_id] MsgChannelOpenConfirm channel_id
                     * @property {Uint8Array|null} [proof_ack] MsgChannelOpenConfirm proof_ack
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelOpenConfirm proof_height
                     * @property {string|null} [signer] MsgChannelOpenConfirm signer
                     */

                    /**
                     * Constructs a new MsgChannelOpenConfirm.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenConfirm.
                     * @implements IMsgChannelOpenConfirm
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm=} [properties] Properties to set
                     */
                    function MsgChannelOpenConfirm(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelOpenConfirm port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.port_id = "";

                    /**
                     * MsgChannelOpenConfirm channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.channel_id = "";

                    /**
                     * MsgChannelOpenConfirm proof_ack.
                     * @member {Uint8Array} proof_ack
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.proof_ack = $util.newBuffer([]);

                    /**
                     * MsgChannelOpenConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.proof_height = null;

                    /**
                     * MsgChannelOpenConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     */
                    MsgChannelOpenConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelOpenConfirm message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} message MsgChannelOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.proof_ack != null && Object.hasOwnProperty.call(message, "proof_ack"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_ack);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenConfirm message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirm} message MsgChannelOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirm} MsgChannelOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenConfirm();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.proof_ack = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirm} MsgChannelOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenConfirm message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenConfirm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            if (!(message.proof_ack && typeof message.proof_ack.length === "number" || $util.isString(message.proof_ack)))
                                return "proof_ack: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenConfirm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirm} MsgChannelOpenConfirm
                     */
                    MsgChannelOpenConfirm.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenConfirm)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelOpenConfirm();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.proof_ack != null)
                            if (typeof object.proof_ack === "string")
                                $util.base64.decode(object.proof_ack, message.proof_ack = $util.newBuffer($util.base64.length(object.proof_ack)), 0);
                            else if (object.proof_ack.length)
                                message.proof_ack = object.proof_ack;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelOpenConfirm.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenConfirm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenConfirm} message MsgChannelOpenConfirm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenConfirm.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if (options.bytes === String)
                                object.proof_ack = "";
                            else {
                                object.proof_ack = [];
                                if (options.bytes !== Array)
                                    object.proof_ack = $util.newBuffer(object.proof_ack);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            object.proof_ack = options.bytes === String ? $util.base64.encode(message.proof_ack, 0, message.proof_ack.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_ack) : message.proof_ack;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelOpenConfirm to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenConfirm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenConfirm;
                })();

                v1.MsgChannelOpenConfirmResponse = (function() {

                    /**
                     * Properties of a MsgChannelOpenConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelOpenConfirmResponse
                     */

                    /**
                     * Constructs a new MsgChannelOpenConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelOpenConfirmResponse.
                     * @implements IMsgChannelOpenConfirmResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse=} [properties] Properties to set
                     */
                    function MsgChannelOpenConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelOpenConfirmResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse} message MsgChannelOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelOpenConfirmResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelOpenConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelOpenConfirmResponse} message MsgChannelOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelOpenConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} MsgChannelOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelOpenConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} MsgChannelOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelOpenConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelOpenConfirmResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelOpenConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelOpenConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} MsgChannelOpenConfirmResponse
                     */
                    MsgChannelOpenConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelOpenConfirmResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelOpenConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelOpenConfirmResponse} message MsgChannelOpenConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelOpenConfirmResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelOpenConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelOpenConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelOpenConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelOpenConfirmResponse;
                })();

                v1.MsgChannelCloseInit = (function() {

                    /**
                     * Properties of a MsgChannelCloseInit.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseInit
                     * @property {string|null} [port_id] MsgChannelCloseInit port_id
                     * @property {string|null} [channel_id] MsgChannelCloseInit channel_id
                     * @property {string|null} [signer] MsgChannelCloseInit signer
                     */

                    /**
                     * Constructs a new MsgChannelCloseInit.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseInit.
                     * @implements IMsgChannelCloseInit
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit=} [properties] Properties to set
                     */
                    function MsgChannelCloseInit(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelCloseInit port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.port_id = "";

                    /**
                     * MsgChannelCloseInit channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.channel_id = "";

                    /**
                     * MsgChannelCloseInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     */
                    MsgChannelCloseInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelCloseInit message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} message MsgChannelCloseInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseInit message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInit} message MsgChannelCloseInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInit} MsgChannelCloseInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseInit();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseInit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInit} MsgChannelCloseInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseInit message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseInit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseInit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInit} MsgChannelCloseInit
                     */
                    MsgChannelCloseInit.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseInit)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelCloseInit();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseInit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseInit} message MsgChannelCloseInit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseInit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelCloseInit to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseInit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseInit;
                })();

                v1.MsgChannelCloseInitResponse = (function() {

                    /**
                     * Properties of a MsgChannelCloseInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseInitResponse
                     */

                    /**
                     * Constructs a new MsgChannelCloseInitResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseInitResponse.
                     * @implements IMsgChannelCloseInitResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse=} [properties] Properties to set
                     */
                    function MsgChannelCloseInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelCloseInitResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse} message MsgChannelCloseInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseInitResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseInitResponse} message MsgChannelCloseInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInitResponse} MsgChannelCloseInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInitResponse} MsgChannelCloseInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseInitResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseInitResponse} MsgChannelCloseInitResponse
                     */
                    MsgChannelCloseInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseInitResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelCloseInitResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseInitResponse} message MsgChannelCloseInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseInitResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelCloseInitResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseInitResponse;
                })();

                v1.MsgChannelCloseConfirm = (function() {

                    /**
                     * Properties of a MsgChannelCloseConfirm.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseConfirm
                     * @property {string|null} [port_id] MsgChannelCloseConfirm port_id
                     * @property {string|null} [channel_id] MsgChannelCloseConfirm channel_id
                     * @property {Uint8Array|null} [proof_init] MsgChannelCloseConfirm proof_init
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgChannelCloseConfirm proof_height
                     * @property {string|null} [signer] MsgChannelCloseConfirm signer
                     */

                    /**
                     * Constructs a new MsgChannelCloseConfirm.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseConfirm.
                     * @implements IMsgChannelCloseConfirm
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm=} [properties] Properties to set
                     */
                    function MsgChannelCloseConfirm(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgChannelCloseConfirm port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.port_id = "";

                    /**
                     * MsgChannelCloseConfirm channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.channel_id = "";

                    /**
                     * MsgChannelCloseConfirm proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgChannelCloseConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.proof_height = null;

                    /**
                     * MsgChannelCloseConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     */
                    MsgChannelCloseConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgChannelCloseConfirm message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} message MsgChannelCloseConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.proof_init != null && Object.hasOwnProperty.call(message, "proof_init"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_init);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseConfirm message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirm} message MsgChannelCloseConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirm} MsgChannelCloseConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseConfirm();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.proof_init = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirm} MsgChannelCloseConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseConfirm message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseConfirm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            if (!(message.proof_init && typeof message.proof_init.length === "number" || $util.isString(message.proof_init)))
                                return "proof_init: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseConfirm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirm} MsgChannelCloseConfirm
                     */
                    MsgChannelCloseConfirm.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseConfirm)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgChannelCloseConfirm();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.proof_init != null)
                            if (typeof object.proof_init === "string")
                                $util.base64.decode(object.proof_init, message.proof_init = $util.newBuffer($util.base64.length(object.proof_init)), 0);
                            else if (object.proof_init.length)
                                message.proof_init = object.proof_init;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgChannelCloseConfirm.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseConfirm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseConfirm} message MsgChannelCloseConfirm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseConfirm.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if (options.bytes === String)
                                object.proof_init = "";
                            else {
                                object.proof_init = [];
                                if (options.bytes !== Array)
                                    object.proof_init = $util.newBuffer(object.proof_init);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            object.proof_init = options.bytes === String ? $util.base64.encode(message.proof_init, 0, message.proof_init.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_init) : message.proof_init;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgChannelCloseConfirm to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseConfirm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseConfirm;
                })();

                v1.MsgChannelCloseConfirmResponse = (function() {

                    /**
                     * Properties of a MsgChannelCloseConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgChannelCloseConfirmResponse
                     */

                    /**
                     * Constructs a new MsgChannelCloseConfirmResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgChannelCloseConfirmResponse.
                     * @implements IMsgChannelCloseConfirmResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse=} [properties] Properties to set
                     */
                    function MsgChannelCloseConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgChannelCloseConfirmResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse} message MsgChannelCloseConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgChannelCloseConfirmResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgChannelCloseConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgChannelCloseConfirmResponse} message MsgChannelCloseConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChannelCloseConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} MsgChannelCloseConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgChannelCloseConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} MsgChannelCloseConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChannelCloseConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgChannelCloseConfirmResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChannelCloseConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgChannelCloseConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} MsgChannelCloseConfirmResponse
                     */
                    MsgChannelCloseConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgChannelCloseConfirmResponse();
                    };

                    /**
                     * Creates a plain object from a MsgChannelCloseConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgChannelCloseConfirmResponse} message MsgChannelCloseConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChannelCloseConfirmResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgChannelCloseConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgChannelCloseConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChannelCloseConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgChannelCloseConfirmResponse;
                })();

                v1.MsgRecvPacket = (function() {

                    /**
                     * Properties of a MsgRecvPacket.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgRecvPacket
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgRecvPacket packet
                     * @property {Uint8Array|null} [proof_commitment] MsgRecvPacket proof_commitment
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgRecvPacket proof_height
                     * @property {string|null} [signer] MsgRecvPacket signer
                     */

                    /**
                     * Constructs a new MsgRecvPacket.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgRecvPacket.
                     * @implements IMsgRecvPacket
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgRecvPacket=} [properties] Properties to set
                     */
                    function MsgRecvPacket(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgRecvPacket packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.packet = null;

                    /**
                     * MsgRecvPacket proof_commitment.
                     * @member {Uint8Array} proof_commitment
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.proof_commitment = $util.newBuffer([]);

                    /**
                     * MsgRecvPacket proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.proof_height = null;

                    /**
                     * MsgRecvPacket signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     */
                    MsgRecvPacket.prototype.signer = "";

                    /**
                     * Encodes the specified MsgRecvPacket message. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacket.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} message MsgRecvPacket message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacket.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof_commitment != null && Object.hasOwnProperty.call(message, "proof_commitment"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_commitment);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgRecvPacket message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacket.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacket} message MsgRecvPacket message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacket.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgRecvPacket message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgRecvPacket} MsgRecvPacket
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacket.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgRecvPacket();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof_commitment = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgRecvPacket message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgRecvPacket} MsgRecvPacket
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacket.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgRecvPacket message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRecvPacket.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.proof_commitment != null && message.hasOwnProperty("proof_commitment"))
                            if (!(message.proof_commitment && typeof message.proof_commitment.length === "number" || $util.isString(message.proof_commitment)))
                                return "proof_commitment: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgRecvPacket message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgRecvPacket} MsgRecvPacket
                     */
                    MsgRecvPacket.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgRecvPacket)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgRecvPacket();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgRecvPacket.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.proof_commitment != null)
                            if (typeof object.proof_commitment === "string")
                                $util.base64.decode(object.proof_commitment, message.proof_commitment = $util.newBuffer($util.base64.length(object.proof_commitment)), 0);
                            else if (object.proof_commitment.length)
                                message.proof_commitment = object.proof_commitment;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgRecvPacket.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgRecvPacket message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @static
                     * @param {ibc.core.channel.v1.MsgRecvPacket} message MsgRecvPacket
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRecvPacket.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.proof_commitment = "";
                            else {
                                object.proof_commitment = [];
                                if (options.bytes !== Array)
                                    object.proof_commitment = $util.newBuffer(object.proof_commitment);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.proof_commitment != null && message.hasOwnProperty("proof_commitment"))
                            object.proof_commitment = options.bytes === String ? $util.base64.encode(message.proof_commitment, 0, message.proof_commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_commitment) : message.proof_commitment;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgRecvPacket to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgRecvPacket
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRecvPacket.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgRecvPacket;
                })();

                v1.MsgRecvPacketResponse = (function() {

                    /**
                     * Properties of a MsgRecvPacketResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgRecvPacketResponse
                     */

                    /**
                     * Constructs a new MsgRecvPacketResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgRecvPacketResponse.
                     * @implements IMsgRecvPacketResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse=} [properties] Properties to set
                     */
                    function MsgRecvPacketResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgRecvPacketResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacketResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse} message MsgRecvPacketResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacketResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgRecvPacketResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgRecvPacketResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgRecvPacketResponse} message MsgRecvPacketResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRecvPacketResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgRecvPacketResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgRecvPacketResponse} MsgRecvPacketResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacketResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgRecvPacketResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgRecvPacketResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgRecvPacketResponse} MsgRecvPacketResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRecvPacketResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgRecvPacketResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRecvPacketResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgRecvPacketResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgRecvPacketResponse} MsgRecvPacketResponse
                     */
                    MsgRecvPacketResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgRecvPacketResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgRecvPacketResponse();
                    };

                    /**
                     * Creates a plain object from a MsgRecvPacketResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgRecvPacketResponse} message MsgRecvPacketResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRecvPacketResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgRecvPacketResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgRecvPacketResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRecvPacketResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgRecvPacketResponse;
                })();

                v1.MsgTimeout = (function() {

                    /**
                     * Properties of a MsgTimeout.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeout
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgTimeout packet
                     * @property {Uint8Array|null} [proof_unreceived] MsgTimeout proof_unreceived
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgTimeout proof_height
                     * @property {Long|null} [next_sequence_recv] MsgTimeout next_sequence_recv
                     * @property {string|null} [signer] MsgTimeout signer
                     */

                    /**
                     * Constructs a new MsgTimeout.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeout.
                     * @implements IMsgTimeout
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeout=} [properties] Properties to set
                     */
                    function MsgTimeout(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgTimeout packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.packet = null;

                    /**
                     * MsgTimeout proof_unreceived.
                     * @member {Uint8Array} proof_unreceived
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.proof_unreceived = $util.newBuffer([]);

                    /**
                     * MsgTimeout proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.proof_height = null;

                    /**
                     * MsgTimeout next_sequence_recv.
                     * @member {Long} next_sequence_recv
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.next_sequence_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgTimeout signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     */
                    MsgTimeout.prototype.signer = "";

                    /**
                     * Encodes the specified MsgTimeout message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeout.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeout} message MsgTimeout message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeout.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof_unreceived != null && Object.hasOwnProperty.call(message, "proof_unreceived"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_unreceived);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.next_sequence_recv != null && Object.hasOwnProperty.call(message, "next_sequence_recv"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.next_sequence_recv);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeout message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeout.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeout} message MsgTimeout message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeout.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeout message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeout} MsgTimeout
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeout.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeout();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof_unreceived = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.next_sequence_recv = reader.uint64();
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeout message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeout} MsgTimeout
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeout.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeout message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeout.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            if (!(message.proof_unreceived && typeof message.proof_unreceived.length === "number" || $util.isString(message.proof_unreceived)))
                                return "proof_unreceived: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (!$util.isInteger(message.next_sequence_recv) && !(message.next_sequence_recv && $util.isInteger(message.next_sequence_recv.low) && $util.isInteger(message.next_sequence_recv.high)))
                                return "next_sequence_recv: integer|Long expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeout message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeout} MsgTimeout
                     */
                    MsgTimeout.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeout)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgTimeout();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeout.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.proof_unreceived != null)
                            if (typeof object.proof_unreceived === "string")
                                $util.base64.decode(object.proof_unreceived, message.proof_unreceived = $util.newBuffer($util.base64.length(object.proof_unreceived)), 0);
                            else if (object.proof_unreceived.length)
                                message.proof_unreceived = object.proof_unreceived;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeout.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.next_sequence_recv != null)
                            if ($util.Long)
                                (message.next_sequence_recv = $util.Long.fromValue(object.next_sequence_recv)).unsigned = true;
                            else if (typeof object.next_sequence_recv === "string")
                                message.next_sequence_recv = parseInt(object.next_sequence_recv, 10);
                            else if (typeof object.next_sequence_recv === "number")
                                message.next_sequence_recv = object.next_sequence_recv;
                            else if (typeof object.next_sequence_recv === "object")
                                message.next_sequence_recv = new $util.LongBits(object.next_sequence_recv.low >>> 0, object.next_sequence_recv.high >>> 0).toNumber(true);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgTimeout message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeout} message MsgTimeout
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeout.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.proof_unreceived = "";
                            else {
                                object.proof_unreceived = [];
                                if (options.bytes !== Array)
                                    object.proof_unreceived = $util.newBuffer(object.proof_unreceived);
                            }
                            object.proof_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_sequence_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_sequence_recv = options.longs === String ? "0" : 0;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            object.proof_unreceived = options.bytes === String ? $util.base64.encode(message.proof_unreceived, 0, message.proof_unreceived.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_unreceived) : message.proof_unreceived;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (typeof message.next_sequence_recv === "number")
                                object.next_sequence_recv = options.longs === String ? String(message.next_sequence_recv) : message.next_sequence_recv;
                            else
                                object.next_sequence_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_sequence_recv) : options.longs === Number ? new $util.LongBits(message.next_sequence_recv.low >>> 0, message.next_sequence_recv.high >>> 0).toNumber(true) : message.next_sequence_recv;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgTimeout to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeout
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeout.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeout;
                })();

                v1.MsgTimeoutResponse = (function() {

                    /**
                     * Properties of a MsgTimeoutResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutResponse
                     */

                    /**
                     * Constructs a new MsgTimeoutResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutResponse.
                     * @implements IMsgTimeoutResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse=} [properties] Properties to set
                     */
                    function MsgTimeoutResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgTimeoutResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse} message MsgTimeoutResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeoutResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutResponse} message MsgTimeoutResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeoutResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutResponse} MsgTimeoutResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeoutResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeoutResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeoutResponse} MsgTimeoutResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeoutResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeoutResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeoutResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeoutResponse} MsgTimeoutResponse
                     */
                    MsgTimeoutResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeoutResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgTimeoutResponse();
                    };

                    /**
                     * Creates a plain object from a MsgTimeoutResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeoutResponse} message MsgTimeoutResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeoutResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgTimeoutResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeoutResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeoutResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeoutResponse;
                })();

                v1.MsgTimeoutOnClose = (function() {

                    /**
                     * Properties of a MsgTimeoutOnClose.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutOnClose
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgTimeoutOnClose packet
                     * @property {Uint8Array|null} [proof_unreceived] MsgTimeoutOnClose proof_unreceived
                     * @property {Uint8Array|null} [proof_close] MsgTimeoutOnClose proof_close
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgTimeoutOnClose proof_height
                     * @property {Long|null} [next_sequence_recv] MsgTimeoutOnClose next_sequence_recv
                     * @property {string|null} [signer] MsgTimeoutOnClose signer
                     */

                    /**
                     * Constructs a new MsgTimeoutOnClose.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutOnClose.
                     * @implements IMsgTimeoutOnClose
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose=} [properties] Properties to set
                     */
                    function MsgTimeoutOnClose(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgTimeoutOnClose packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.packet = null;

                    /**
                     * MsgTimeoutOnClose proof_unreceived.
                     * @member {Uint8Array} proof_unreceived
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_unreceived = $util.newBuffer([]);

                    /**
                     * MsgTimeoutOnClose proof_close.
                     * @member {Uint8Array} proof_close
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_close = $util.newBuffer([]);

                    /**
                     * MsgTimeoutOnClose proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.proof_height = null;

                    /**
                     * MsgTimeoutOnClose next_sequence_recv.
                     * @member {Long} next_sequence_recv
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.next_sequence_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgTimeoutOnClose signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     */
                    MsgTimeoutOnClose.prototype.signer = "";

                    /**
                     * Encodes the specified MsgTimeoutOnClose message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnClose.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} message MsgTimeoutOnClose message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnClose.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof_unreceived != null && Object.hasOwnProperty.call(message, "proof_unreceived"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_unreceived);
                        if (message.proof_close != null && Object.hasOwnProperty.call(message, "proof_close"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_close);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.next_sequence_recv != null && Object.hasOwnProperty.call(message, "next_sequence_recv"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.next_sequence_recv);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeoutOnClose message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnClose.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnClose} message MsgTimeoutOnClose message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnClose.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeoutOnClose message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnClose} MsgTimeoutOnClose
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnClose.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeoutOnClose();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof_unreceived = reader.bytes();
                                break;
                            case 3:
                                message.proof_close = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.next_sequence_recv = reader.uint64();
                                break;
                            case 6:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeoutOnClose message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnClose} MsgTimeoutOnClose
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnClose.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeoutOnClose message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeoutOnClose.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            if (!(message.proof_unreceived && typeof message.proof_unreceived.length === "number" || $util.isString(message.proof_unreceived)))
                                return "proof_unreceived: buffer expected";
                        if (message.proof_close != null && message.hasOwnProperty("proof_close"))
                            if (!(message.proof_close && typeof message.proof_close.length === "number" || $util.isString(message.proof_close)))
                                return "proof_close: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (!$util.isInteger(message.next_sequence_recv) && !(message.next_sequence_recv && $util.isInteger(message.next_sequence_recv.low) && $util.isInteger(message.next_sequence_recv.high)))
                                return "next_sequence_recv: integer|Long expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeoutOnClose message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnClose} MsgTimeoutOnClose
                     */
                    MsgTimeoutOnClose.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeoutOnClose)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgTimeoutOnClose();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeoutOnClose.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.proof_unreceived != null)
                            if (typeof object.proof_unreceived === "string")
                                $util.base64.decode(object.proof_unreceived, message.proof_unreceived = $util.newBuffer($util.base64.length(object.proof_unreceived)), 0);
                            else if (object.proof_unreceived.length)
                                message.proof_unreceived = object.proof_unreceived;
                        if (object.proof_close != null)
                            if (typeof object.proof_close === "string")
                                $util.base64.decode(object.proof_close, message.proof_close = $util.newBuffer($util.base64.length(object.proof_close)), 0);
                            else if (object.proof_close.length)
                                message.proof_close = object.proof_close;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgTimeoutOnClose.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.next_sequence_recv != null)
                            if ($util.Long)
                                (message.next_sequence_recv = $util.Long.fromValue(object.next_sequence_recv)).unsigned = true;
                            else if (typeof object.next_sequence_recv === "string")
                                message.next_sequence_recv = parseInt(object.next_sequence_recv, 10);
                            else if (typeof object.next_sequence_recv === "number")
                                message.next_sequence_recv = object.next_sequence_recv;
                            else if (typeof object.next_sequence_recv === "object")
                                message.next_sequence_recv = new $util.LongBits(object.next_sequence_recv.low >>> 0, object.next_sequence_recv.high >>> 0).toNumber(true);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgTimeoutOnClose message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeoutOnClose} message MsgTimeoutOnClose
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeoutOnClose.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.proof_unreceived = "";
                            else {
                                object.proof_unreceived = [];
                                if (options.bytes !== Array)
                                    object.proof_unreceived = $util.newBuffer(object.proof_unreceived);
                            }
                            if (options.bytes === String)
                                object.proof_close = "";
                            else {
                                object.proof_close = [];
                                if (options.bytes !== Array)
                                    object.proof_close = $util.newBuffer(object.proof_close);
                            }
                            object.proof_height = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_sequence_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_sequence_recv = options.longs === String ? "0" : 0;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.proof_unreceived != null && message.hasOwnProperty("proof_unreceived"))
                            object.proof_unreceived = options.bytes === String ? $util.base64.encode(message.proof_unreceived, 0, message.proof_unreceived.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_unreceived) : message.proof_unreceived;
                        if (message.proof_close != null && message.hasOwnProperty("proof_close"))
                            object.proof_close = options.bytes === String ? $util.base64.encode(message.proof_close, 0, message.proof_close.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_close) : message.proof_close;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.next_sequence_recv != null && message.hasOwnProperty("next_sequence_recv"))
                            if (typeof message.next_sequence_recv === "number")
                                object.next_sequence_recv = options.longs === String ? String(message.next_sequence_recv) : message.next_sequence_recv;
                            else
                                object.next_sequence_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_sequence_recv) : options.longs === Number ? new $util.LongBits(message.next_sequence_recv.low >>> 0, message.next_sequence_recv.high >>> 0).toNumber(true) : message.next_sequence_recv;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgTimeoutOnClose to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnClose
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeoutOnClose.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeoutOnClose;
                })();

                v1.MsgTimeoutOnCloseResponse = (function() {

                    /**
                     * Properties of a MsgTimeoutOnCloseResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgTimeoutOnCloseResponse
                     */

                    /**
                     * Constructs a new MsgTimeoutOnCloseResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgTimeoutOnCloseResponse.
                     * @implements IMsgTimeoutOnCloseResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse=} [properties] Properties to set
                     */
                    function MsgTimeoutOnCloseResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgTimeoutOnCloseResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnCloseResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse} message MsgTimeoutOnCloseResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnCloseResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgTimeoutOnCloseResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgTimeoutOnCloseResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgTimeoutOnCloseResponse} message MsgTimeoutOnCloseResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgTimeoutOnCloseResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgTimeoutOnCloseResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} MsgTimeoutOnCloseResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnCloseResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgTimeoutOnCloseResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} MsgTimeoutOnCloseResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgTimeoutOnCloseResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgTimeoutOnCloseResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgTimeoutOnCloseResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgTimeoutOnCloseResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} MsgTimeoutOnCloseResponse
                     */
                    MsgTimeoutOnCloseResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgTimeoutOnCloseResponse();
                    };

                    /**
                     * Creates a plain object from a MsgTimeoutOnCloseResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgTimeoutOnCloseResponse} message MsgTimeoutOnCloseResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgTimeoutOnCloseResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgTimeoutOnCloseResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgTimeoutOnCloseResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgTimeoutOnCloseResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgTimeoutOnCloseResponse;
                })();

                v1.MsgAcknowledgement = (function() {

                    /**
                     * Properties of a MsgAcknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgAcknowledgement
                     * @property {ibc.core.channel.v1.IPacket|null} [packet] MsgAcknowledgement packet
                     * @property {Uint8Array|null} [acknowledgement] MsgAcknowledgement acknowledgement
                     * @property {Uint8Array|null} [proof_acked] MsgAcknowledgement proof_acked
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgAcknowledgement proof_height
                     * @property {string|null} [signer] MsgAcknowledgement signer
                     */

                    /**
                     * Constructs a new MsgAcknowledgement.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgAcknowledgement.
                     * @implements IMsgAcknowledgement
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement=} [properties] Properties to set
                     */
                    function MsgAcknowledgement(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgAcknowledgement packet.
                     * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.packet = null;

                    /**
                     * MsgAcknowledgement acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * MsgAcknowledgement proof_acked.
                     * @member {Uint8Array} proof_acked
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.proof_acked = $util.newBuffer([]);

                    /**
                     * MsgAcknowledgement proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.proof_height = null;

                    /**
                     * MsgAcknowledgement signer.
                     * @member {string} signer
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     */
                    MsgAcknowledgement.prototype.signer = "";

                    /**
                     * Encodes the specified MsgAcknowledgement message. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgement.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} message MsgAcknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgement.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                            $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.acknowledgement);
                        if (message.proof_acked != null && Object.hasOwnProperty.call(message, "proof_acked"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof_acked);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgAcknowledgement message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgement.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgement} message MsgAcknowledgement message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgement.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgAcknowledgement message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgAcknowledgement} MsgAcknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgement.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgAcknowledgement();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.acknowledgement = reader.bytes();
                                break;
                            case 3:
                                message.proof_acked = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgAcknowledgement message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgAcknowledgement} MsgAcknowledgement
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgement.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgAcknowledgement message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgAcknowledgement.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.packet != null && message.hasOwnProperty("packet")) {
                            let error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                            if (error)
                                return "packet." + error;
                        }
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        if (message.proof_acked != null && message.hasOwnProperty("proof_acked"))
                            if (!(message.proof_acked && typeof message.proof_acked.length === "number" || $util.isString(message.proof_acked)))
                                return "proof_acked: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgAcknowledgement message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgAcknowledgement} MsgAcknowledgement
                     */
                    MsgAcknowledgement.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgAcknowledgement)
                            return object;
                        let message = new $root.ibc.core.channel.v1.MsgAcknowledgement();
                        if (object.packet != null) {
                            if (typeof object.packet !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgAcknowledgement.packet: object expected");
                            message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                        }
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        if (object.proof_acked != null)
                            if (typeof object.proof_acked === "string")
                                $util.base64.decode(object.proof_acked, message.proof_acked = $util.newBuffer($util.base64.length(object.proof_acked)), 0);
                            else if (object.proof_acked.length)
                                message.proof_acked = object.proof_acked;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.channel.v1.MsgAcknowledgement.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgAcknowledgement message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @static
                     * @param {ibc.core.channel.v1.MsgAcknowledgement} message MsgAcknowledgement
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgAcknowledgement.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.packet = null;
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                            if (options.bytes === String)
                                object.proof_acked = "";
                            else {
                                object.proof_acked = [];
                                if (options.bytes !== Array)
                                    object.proof_acked = $util.newBuffer(object.proof_acked);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.packet != null && message.hasOwnProperty("packet"))
                            object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        if (message.proof_acked != null && message.hasOwnProperty("proof_acked"))
                            object.proof_acked = options.bytes === String ? $util.base64.encode(message.proof_acked, 0, message.proof_acked.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_acked) : message.proof_acked;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgAcknowledgement to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgAcknowledgement
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgAcknowledgement.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgAcknowledgement;
                })();

                v1.MsgAcknowledgementResponse = (function() {

                    /**
                     * Properties of a MsgAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @interface IMsgAcknowledgementResponse
                     */

                    /**
                     * Constructs a new MsgAcknowledgementResponse.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a MsgAcknowledgementResponse.
                     * @implements IMsgAcknowledgementResponse
                     * @constructor
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse=} [properties] Properties to set
                     */
                    function MsgAcknowledgementResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgAcknowledgementResponse message. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgementResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse} message MsgAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgementResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgAcknowledgementResponse message, length delimited. Does not implicitly {@link ibc.core.channel.v1.MsgAcknowledgementResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.IMsgAcknowledgementResponse} message MsgAcknowledgementResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgAcknowledgementResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgAcknowledgementResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.MsgAcknowledgementResponse} MsgAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgementResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.MsgAcknowledgementResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgAcknowledgementResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.MsgAcknowledgementResponse} MsgAcknowledgementResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgAcknowledgementResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgAcknowledgementResponse message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgAcknowledgementResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgAcknowledgementResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.MsgAcknowledgementResponse} MsgAcknowledgementResponse
                     */
                    MsgAcknowledgementResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.MsgAcknowledgementResponse)
                            return object;
                        return new $root.ibc.core.channel.v1.MsgAcknowledgementResponse();
                    };

                    /**
                     * Creates a plain object from a MsgAcknowledgementResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @static
                     * @param {ibc.core.channel.v1.MsgAcknowledgementResponse} message MsgAcknowledgementResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgAcknowledgementResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgAcknowledgementResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.MsgAcknowledgementResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgAcknowledgementResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgAcknowledgementResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.channel.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.channel.v1.IIdentifiedChannel>|null} [channels] GenesisState channels
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [acknowledgements] GenesisState acknowledgements
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [commitments] GenesisState commitments
                     * @property {Array.<ibc.core.channel.v1.IPacketState>|null} [receipts] GenesisState receipts
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [send_sequences] GenesisState send_sequences
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [recv_sequences] GenesisState recv_sequences
                     * @property {Array.<ibc.core.channel.v1.IPacketSequence>|null} [ack_sequences] GenesisState ack_sequences
                     * @property {Long|null} [next_channel_sequence] GenesisState next_channel_sequence
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.channel.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.channels = [];
                        this.acknowledgements = [];
                        this.commitments = [];
                        this.receipts = [];
                        this.send_sequences = [];
                        this.recv_sequences = [];
                        this.ack_sequences = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState channels.
                     * @member {Array.<ibc.core.channel.v1.IIdentifiedChannel>} channels
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.channels = $util.emptyArray;

                    /**
                     * GenesisState acknowledgements.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} acknowledgements
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.acknowledgements = $util.emptyArray;

                    /**
                     * GenesisState commitments.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} commitments
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.commitments = $util.emptyArray;

                    /**
                     * GenesisState receipts.
                     * @member {Array.<ibc.core.channel.v1.IPacketState>} receipts
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.receipts = $util.emptyArray;

                    /**
                     * GenesisState send_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} send_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.send_sequences = $util.emptyArray;

                    /**
                     * GenesisState recv_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} recv_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.recv_sequences = $util.emptyArray;

                    /**
                     * GenesisState ack_sequences.
                     * @member {Array.<ibc.core.channel.v1.IPacketSequence>} ack_sequences
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.ack_sequences = $util.emptyArray;

                    /**
                     * GenesisState next_channel_sequence.
                     * @member {Long} next_channel_sequence
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_channel_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.channel.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {ibc.core.channel.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channels != null && message.channels.length)
                            for (let i = 0; i < message.channels.length; ++i)
                                $root.ibc.core.channel.v1.IdentifiedChannel.encode(message.channels[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.acknowledgements != null && message.acknowledgements.length)
                            for (let i = 0; i < message.acknowledgements.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.acknowledgements[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.commitments != null && message.commitments.length)
                            for (let i = 0; i < message.commitments.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.commitments[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.receipts != null && message.receipts.length)
                            for (let i = 0; i < message.receipts.length; ++i)
                                $root.ibc.core.channel.v1.PacketState.encode(message.receipts[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.send_sequences != null && message.send_sequences.length)
                            for (let i = 0; i < message.send_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(message.send_sequences[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.recv_sequences != null && message.recv_sequences.length)
                            for (let i = 0; i < message.recv_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(message.recv_sequences[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.ack_sequences != null && message.ack_sequences.length)
                            for (let i = 0; i < message.ack_sequences.length; ++i)
                                $root.ibc.core.channel.v1.PacketSequence.encode(message.ack_sequences[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.next_channel_sequence != null && Object.hasOwnProperty.call(message, "next_channel_sequence"))
                            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.next_channel_sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.channel.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {ibc.core.channel.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.channels && message.channels.length))
                                    message.channels = [];
                                message.channels.push($root.ibc.core.channel.v1.IdentifiedChannel.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.acknowledgements && message.acknowledgements.length))
                                    message.acknowledgements = [];
                                message.acknowledgements.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                if (!(message.commitments && message.commitments.length))
                                    message.commitments = [];
                                message.commitments.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                if (!(message.receipts && message.receipts.length))
                                    message.receipts = [];
                                message.receipts.push($root.ibc.core.channel.v1.PacketState.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                if (!(message.send_sequences && message.send_sequences.length))
                                    message.send_sequences = [];
                                message.send_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(reader, reader.uint32()));
                                break;
                            case 6:
                                if (!(message.recv_sequences && message.recv_sequences.length))
                                    message.recv_sequences = [];
                                message.recv_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                if (!(message.ack_sequences && message.ack_sequences.length))
                                    message.ack_sequences = [];
                                message.ack_sequences.push($root.ibc.core.channel.v1.PacketSequence.decode(reader, reader.uint32()));
                                break;
                            case 8:
                                message.next_channel_sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channels != null && message.hasOwnProperty("channels")) {
                            if (!Array.isArray(message.channels))
                                return "channels: array expected";
                            for (let i = 0; i < message.channels.length; ++i) {
                                let error = $root.ibc.core.channel.v1.IdentifiedChannel.verify(message.channels[i]);
                                if (error)
                                    return "channels." + error;
                            }
                        }
                        if (message.acknowledgements != null && message.hasOwnProperty("acknowledgements")) {
                            if (!Array.isArray(message.acknowledgements))
                                return "acknowledgements: array expected";
                            for (let i = 0; i < message.acknowledgements.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.acknowledgements[i]);
                                if (error)
                                    return "acknowledgements." + error;
                            }
                        }
                        if (message.commitments != null && message.hasOwnProperty("commitments")) {
                            if (!Array.isArray(message.commitments))
                                return "commitments: array expected";
                            for (let i = 0; i < message.commitments.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.commitments[i]);
                                if (error)
                                    return "commitments." + error;
                            }
                        }
                        if (message.receipts != null && message.hasOwnProperty("receipts")) {
                            if (!Array.isArray(message.receipts))
                                return "receipts: array expected";
                            for (let i = 0; i < message.receipts.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketState.verify(message.receipts[i]);
                                if (error)
                                    return "receipts." + error;
                            }
                        }
                        if (message.send_sequences != null && message.hasOwnProperty("send_sequences")) {
                            if (!Array.isArray(message.send_sequences))
                                return "send_sequences: array expected";
                            for (let i = 0; i < message.send_sequences.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketSequence.verify(message.send_sequences[i]);
                                if (error)
                                    return "send_sequences." + error;
                            }
                        }
                        if (message.recv_sequences != null && message.hasOwnProperty("recv_sequences")) {
                            if (!Array.isArray(message.recv_sequences))
                                return "recv_sequences: array expected";
                            for (let i = 0; i < message.recv_sequences.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketSequence.verify(message.recv_sequences[i]);
                                if (error)
                                    return "recv_sequences." + error;
                            }
                        }
                        if (message.ack_sequences != null && message.hasOwnProperty("ack_sequences")) {
                            if (!Array.isArray(message.ack_sequences))
                                return "ack_sequences: array expected";
                            for (let i = 0; i < message.ack_sequences.length; ++i) {
                                let error = $root.ibc.core.channel.v1.PacketSequence.verify(message.ack_sequences[i]);
                                if (error)
                                    return "ack_sequences." + error;
                            }
                        }
                        if (message.next_channel_sequence != null && message.hasOwnProperty("next_channel_sequence"))
                            if (!$util.isInteger(message.next_channel_sequence) && !(message.next_channel_sequence && $util.isInteger(message.next_channel_sequence.low) && $util.isInteger(message.next_channel_sequence.high)))
                                return "next_channel_sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.channel.v1.GenesisState();
                        if (object.channels) {
                            if (!Array.isArray(object.channels))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.channels: array expected");
                            message.channels = [];
                            for (let i = 0; i < object.channels.length; ++i) {
                                if (typeof object.channels[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.channels: object expected");
                                message.channels[i] = $root.ibc.core.channel.v1.IdentifiedChannel.fromObject(object.channels[i]);
                            }
                        }
                        if (object.acknowledgements) {
                            if (!Array.isArray(object.acknowledgements))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.acknowledgements: array expected");
                            message.acknowledgements = [];
                            for (let i = 0; i < object.acknowledgements.length; ++i) {
                                if (typeof object.acknowledgements[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.acknowledgements: object expected");
                                message.acknowledgements[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.acknowledgements[i]);
                            }
                        }
                        if (object.commitments) {
                            if (!Array.isArray(object.commitments))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.commitments: array expected");
                            message.commitments = [];
                            for (let i = 0; i < object.commitments.length; ++i) {
                                if (typeof object.commitments[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.commitments: object expected");
                                message.commitments[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.commitments[i]);
                            }
                        }
                        if (object.receipts) {
                            if (!Array.isArray(object.receipts))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.receipts: array expected");
                            message.receipts = [];
                            for (let i = 0; i < object.receipts.length; ++i) {
                                if (typeof object.receipts[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.receipts: object expected");
                                message.receipts[i] = $root.ibc.core.channel.v1.PacketState.fromObject(object.receipts[i]);
                            }
                        }
                        if (object.send_sequences) {
                            if (!Array.isArray(object.send_sequences))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.send_sequences: array expected");
                            message.send_sequences = [];
                            for (let i = 0; i < object.send_sequences.length; ++i) {
                                if (typeof object.send_sequences[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.send_sequences: object expected");
                                message.send_sequences[i] = $root.ibc.core.channel.v1.PacketSequence.fromObject(object.send_sequences[i]);
                            }
                        }
                        if (object.recv_sequences) {
                            if (!Array.isArray(object.recv_sequences))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.recv_sequences: array expected");
                            message.recv_sequences = [];
                            for (let i = 0; i < object.recv_sequences.length; ++i) {
                                if (typeof object.recv_sequences[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.recv_sequences: object expected");
                                message.recv_sequences[i] = $root.ibc.core.channel.v1.PacketSequence.fromObject(object.recv_sequences[i]);
                            }
                        }
                        if (object.ack_sequences) {
                            if (!Array.isArray(object.ack_sequences))
                                throw TypeError(".ibc.core.channel.v1.GenesisState.ack_sequences: array expected");
                            message.ack_sequences = [];
                            for (let i = 0; i < object.ack_sequences.length; ++i) {
                                if (typeof object.ack_sequences[i] !== "object")
                                    throw TypeError(".ibc.core.channel.v1.GenesisState.ack_sequences: object expected");
                                message.ack_sequences[i] = $root.ibc.core.channel.v1.PacketSequence.fromObject(object.ack_sequences[i]);
                            }
                        }
                        if (object.next_channel_sequence != null)
                            if ($util.Long)
                                (message.next_channel_sequence = $util.Long.fromValue(object.next_channel_sequence)).unsigned = true;
                            else if (typeof object.next_channel_sequence === "string")
                                message.next_channel_sequence = parseInt(object.next_channel_sequence, 10);
                            else if (typeof object.next_channel_sequence === "number")
                                message.next_channel_sequence = object.next_channel_sequence;
                            else if (typeof object.next_channel_sequence === "object")
                                message.next_channel_sequence = new $util.LongBits(object.next_channel_sequence.low >>> 0, object.next_channel_sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @static
                     * @param {ibc.core.channel.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.channels = [];
                            object.acknowledgements = [];
                            object.commitments = [];
                            object.receipts = [];
                            object.send_sequences = [];
                            object.recv_sequences = [];
                            object.ack_sequences = [];
                        }
                        if (options.defaults)
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_channel_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_channel_sequence = options.longs === String ? "0" : 0;
                        if (message.channels && message.channels.length) {
                            object.channels = [];
                            for (let j = 0; j < message.channels.length; ++j)
                                object.channels[j] = $root.ibc.core.channel.v1.IdentifiedChannel.toObject(message.channels[j], options);
                        }
                        if (message.acknowledgements && message.acknowledgements.length) {
                            object.acknowledgements = [];
                            for (let j = 0; j < message.acknowledgements.length; ++j)
                                object.acknowledgements[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.acknowledgements[j], options);
                        }
                        if (message.commitments && message.commitments.length) {
                            object.commitments = [];
                            for (let j = 0; j < message.commitments.length; ++j)
                                object.commitments[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.commitments[j], options);
                        }
                        if (message.receipts && message.receipts.length) {
                            object.receipts = [];
                            for (let j = 0; j < message.receipts.length; ++j)
                                object.receipts[j] = $root.ibc.core.channel.v1.PacketState.toObject(message.receipts[j], options);
                        }
                        if (message.send_sequences && message.send_sequences.length) {
                            object.send_sequences = [];
                            for (let j = 0; j < message.send_sequences.length; ++j)
                                object.send_sequences[j] = $root.ibc.core.channel.v1.PacketSequence.toObject(message.send_sequences[j], options);
                        }
                        if (message.recv_sequences && message.recv_sequences.length) {
                            object.recv_sequences = [];
                            for (let j = 0; j < message.recv_sequences.length; ++j)
                                object.recv_sequences[j] = $root.ibc.core.channel.v1.PacketSequence.toObject(message.recv_sequences[j], options);
                        }
                        if (message.ack_sequences && message.ack_sequences.length) {
                            object.ack_sequences = [];
                            for (let j = 0; j < message.ack_sequences.length; ++j)
                                object.ack_sequences[j] = $root.ibc.core.channel.v1.PacketSequence.toObject(message.ack_sequences[j], options);
                        }
                        if (message.next_channel_sequence != null && message.hasOwnProperty("next_channel_sequence"))
                            if (typeof message.next_channel_sequence === "number")
                                object.next_channel_sequence = options.longs === String ? String(message.next_channel_sequence) : message.next_channel_sequence;
                            else
                                object.next_channel_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.next_channel_sequence) : options.longs === Number ? new $util.LongBits(message.next_channel_sequence.low >>> 0, message.next_channel_sequence.high >>> 0).toNumber(true) : message.next_channel_sequence;
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                v1.PacketSequence = (function() {

                    /**
                     * Properties of a PacketSequence.
                     * @memberof ibc.core.channel.v1
                     * @interface IPacketSequence
                     * @property {string|null} [port_id] PacketSequence port_id
                     * @property {string|null} [channel_id] PacketSequence channel_id
                     * @property {Long|null} [sequence] PacketSequence sequence
                     */

                    /**
                     * Constructs a new PacketSequence.
                     * @memberof ibc.core.channel.v1
                     * @classdesc Represents a PacketSequence.
                     * @implements IPacketSequence
                     * @constructor
                     * @param {ibc.core.channel.v1.IPacketSequence=} [properties] Properties to set
                     */
                    function PacketSequence(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketSequence port_id.
                     * @member {string} port_id
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.port_id = "";

                    /**
                     * PacketSequence channel_id.
                     * @member {string} channel_id
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.channel_id = "";

                    /**
                     * PacketSequence sequence.
                     * @member {Long} sequence
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     */
                    PacketSequence.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified PacketSequence message. Does not implicitly {@link ibc.core.channel.v1.PacketSequence.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {ibc.core.channel.v1.IPacketSequence} message PacketSequence message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketSequence.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketSequence message, length delimited. Does not implicitly {@link ibc.core.channel.v1.PacketSequence.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {ibc.core.channel.v1.IPacketSequence} message PacketSequence message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketSequence.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketSequence message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.channel.v1.PacketSequence} PacketSequence
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketSequence.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.PacketSequence();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.port_id = reader.string();
                                break;
                            case 2:
                                message.channel_id = reader.string();
                                break;
                            case 3:
                                message.sequence = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketSequence message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.channel.v1.PacketSequence} PacketSequence
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketSequence.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketSequence message.
                     * @function verify
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketSequence.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            if (!$util.isString(message.port_id))
                                return "port_id: string expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a PacketSequence message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.channel.v1.PacketSequence} PacketSequence
                     */
                    PacketSequence.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.channel.v1.PacketSequence)
                            return object;
                        let message = new $root.ibc.core.channel.v1.PacketSequence();
                        if (object.port_id != null)
                            message.port_id = String(object.port_id);
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketSequence message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @static
                     * @param {ibc.core.channel.v1.PacketSequence} message PacketSequence
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketSequence.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.port_id = "";
                            object.channel_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                        }
                        if (message.port_id != null && message.hasOwnProperty("port_id"))
                            object.port_id = message.port_id;
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        return object;
                    };

                    /**
                     * Converts this PacketSequence to JSON.
                     * @function toJSON
                     * @memberof ibc.core.channel.v1.PacketSequence
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketSequence.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketSequence;
                })();

                return v1;
            })();

            return channel;
        })();

        core.commitment = (function() {

            /**
             * Namespace commitment.
             * @memberof ibc.core
             * @namespace
             */
            const commitment = {};

            commitment.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.commitment
                 * @namespace
                 */
                const v1 = {};

                v1.MerkleRoot = (function() {

                    /**
                     * Properties of a MerkleRoot.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerkleRoot
                     * @property {Uint8Array|null} [hash] MerkleRoot hash
                     */

                    /**
                     * Constructs a new MerkleRoot.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerkleRoot.
                     * @implements IMerkleRoot
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerkleRoot=} [properties] Properties to set
                     */
                    function MerkleRoot(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerkleRoot hash.
                     * @member {Uint8Array} hash
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @instance
                     */
                    MerkleRoot.prototype.hash = $util.newBuffer([]);

                    /**
                     * Encodes the specified MerkleRoot message. Does not implicitly {@link ibc.core.commitment.v1.MerkleRoot.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleRoot} message MerkleRoot message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleRoot.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                        return writer;
                    };

                    /**
                     * Encodes the specified MerkleRoot message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerkleRoot.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleRoot} message MerkleRoot message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleRoot.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerkleRoot message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerkleRoot} MerkleRoot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleRoot.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerkleRoot();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.hash = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerkleRoot message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerkleRoot} MerkleRoot
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleRoot.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerkleRoot message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerkleRoot.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                                return "hash: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a MerkleRoot message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerkleRoot} MerkleRoot
                     */
                    MerkleRoot.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerkleRoot)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerkleRoot();
                        if (object.hash != null)
                            if (typeof object.hash === "string")
                                $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                            else if (object.hash.length)
                                message.hash = object.hash;
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerkleRoot message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @static
                     * @param {ibc.core.commitment.v1.MerkleRoot} message MerkleRoot
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerkleRoot.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.hash = "";
                            else {
                                object.hash = [];
                                if (options.bytes !== Array)
                                    object.hash = $util.newBuffer(object.hash);
                            }
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                        return object;
                    };

                    /**
                     * Converts this MerkleRoot to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerkleRoot
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerkleRoot.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerkleRoot;
                })();

                v1.MerklePrefix = (function() {

                    /**
                     * Properties of a MerklePrefix.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerklePrefix
                     * @property {Uint8Array|null} [key_prefix] MerklePrefix key_prefix
                     */

                    /**
                     * Constructs a new MerklePrefix.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerklePrefix.
                     * @implements IMerklePrefix
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerklePrefix=} [properties] Properties to set
                     */
                    function MerklePrefix(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerklePrefix key_prefix.
                     * @member {Uint8Array} key_prefix
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @instance
                     */
                    MerklePrefix.prototype.key_prefix = $util.newBuffer([]);

                    /**
                     * Encodes the specified MerklePrefix message. Does not implicitly {@link ibc.core.commitment.v1.MerklePrefix.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePrefix} message MerklePrefix message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePrefix.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key_prefix != null && Object.hasOwnProperty.call(message, "key_prefix"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key_prefix);
                        return writer;
                    };

                    /**
                     * Encodes the specified MerklePrefix message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerklePrefix.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePrefix} message MerklePrefix message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePrefix.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerklePrefix message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerklePrefix} MerklePrefix
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePrefix.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerklePrefix();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key_prefix = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerklePrefix message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerklePrefix} MerklePrefix
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePrefix.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerklePrefix message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerklePrefix.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key_prefix != null && message.hasOwnProperty("key_prefix"))
                            if (!(message.key_prefix && typeof message.key_prefix.length === "number" || $util.isString(message.key_prefix)))
                                return "key_prefix: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a MerklePrefix message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerklePrefix} MerklePrefix
                     */
                    MerklePrefix.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerklePrefix)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerklePrefix();
                        if (object.key_prefix != null)
                            if (typeof object.key_prefix === "string")
                                $util.base64.decode(object.key_prefix, message.key_prefix = $util.newBuffer($util.base64.length(object.key_prefix)), 0);
                            else if (object.key_prefix.length)
                                message.key_prefix = object.key_prefix;
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerklePrefix message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @static
                     * @param {ibc.core.commitment.v1.MerklePrefix} message MerklePrefix
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerklePrefix.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.key_prefix = "";
                            else {
                                object.key_prefix = [];
                                if (options.bytes !== Array)
                                    object.key_prefix = $util.newBuffer(object.key_prefix);
                            }
                        if (message.key_prefix != null && message.hasOwnProperty("key_prefix"))
                            object.key_prefix = options.bytes === String ? $util.base64.encode(message.key_prefix, 0, message.key_prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.key_prefix) : message.key_prefix;
                        return object;
                    };

                    /**
                     * Converts this MerklePrefix to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerklePrefix
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerklePrefix.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerklePrefix;
                })();

                v1.MerklePath = (function() {

                    /**
                     * Properties of a MerklePath.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerklePath
                     * @property {Array.<string>|null} [key_path] MerklePath key_path
                     */

                    /**
                     * Constructs a new MerklePath.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerklePath.
                     * @implements IMerklePath
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerklePath=} [properties] Properties to set
                     */
                    function MerklePath(properties) {
                        this.key_path = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerklePath key_path.
                     * @member {Array.<string>} key_path
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @instance
                     */
                    MerklePath.prototype.key_path = $util.emptyArray;

                    /**
                     * Encodes the specified MerklePath message. Does not implicitly {@link ibc.core.commitment.v1.MerklePath.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePath} message MerklePath message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePath.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key_path != null && message.key_path.length)
                            for (let i = 0; i < message.key_path.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key_path[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified MerklePath message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerklePath.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {ibc.core.commitment.v1.IMerklePath} message MerklePath message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerklePath.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerklePath message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerklePath} MerklePath
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePath.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerklePath();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.key_path && message.key_path.length))
                                    message.key_path = [];
                                message.key_path.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerklePath message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerklePath} MerklePath
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerklePath.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerklePath message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerklePath.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key_path != null && message.hasOwnProperty("key_path")) {
                            if (!Array.isArray(message.key_path))
                                return "key_path: array expected";
                            for (let i = 0; i < message.key_path.length; ++i)
                                if (!$util.isString(message.key_path[i]))
                                    return "key_path: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a MerklePath message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerklePath} MerklePath
                     */
                    MerklePath.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerklePath)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerklePath();
                        if (object.key_path) {
                            if (!Array.isArray(object.key_path))
                                throw TypeError(".ibc.core.commitment.v1.MerklePath.key_path: array expected");
                            message.key_path = [];
                            for (let i = 0; i < object.key_path.length; ++i)
                                message.key_path[i] = String(object.key_path[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerklePath message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @static
                     * @param {ibc.core.commitment.v1.MerklePath} message MerklePath
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerklePath.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.key_path = [];
                        if (message.key_path && message.key_path.length) {
                            object.key_path = [];
                            for (let j = 0; j < message.key_path.length; ++j)
                                object.key_path[j] = message.key_path[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this MerklePath to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerklePath
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerklePath.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerklePath;
                })();

                v1.MerkleProof = (function() {

                    /**
                     * Properties of a MerkleProof.
                     * @memberof ibc.core.commitment.v1
                     * @interface IMerkleProof
                     * @property {Array.<ics23.ICommitmentProof>|null} [proofs] MerkleProof proofs
                     */

                    /**
                     * Constructs a new MerkleProof.
                     * @memberof ibc.core.commitment.v1
                     * @classdesc Represents a MerkleProof.
                     * @implements IMerkleProof
                     * @constructor
                     * @param {ibc.core.commitment.v1.IMerkleProof=} [properties] Properties to set
                     */
                    function MerkleProof(properties) {
                        this.proofs = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MerkleProof proofs.
                     * @member {Array.<ics23.ICommitmentProof>} proofs
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @instance
                     */
                    MerkleProof.prototype.proofs = $util.emptyArray;

                    /**
                     * Encodes the specified MerkleProof message. Does not implicitly {@link ibc.core.commitment.v1.MerkleProof.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleProof} message MerkleProof message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleProof.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.proofs != null && message.proofs.length)
                            for (let i = 0; i < message.proofs.length; ++i)
                                $root.ics23.CommitmentProof.encode(message.proofs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified MerkleProof message, length delimited. Does not implicitly {@link ibc.core.commitment.v1.MerkleProof.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {ibc.core.commitment.v1.IMerkleProof} message MerkleProof message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MerkleProof.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MerkleProof message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.commitment.v1.MerkleProof} MerkleProof
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleProof.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.commitment.v1.MerkleProof();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.proofs && message.proofs.length))
                                    message.proofs = [];
                                message.proofs.push($root.ics23.CommitmentProof.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MerkleProof message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.commitment.v1.MerkleProof} MerkleProof
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MerkleProof.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MerkleProof message.
                     * @function verify
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MerkleProof.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.proofs != null && message.hasOwnProperty("proofs")) {
                            if (!Array.isArray(message.proofs))
                                return "proofs: array expected";
                            for (let i = 0; i < message.proofs.length; ++i) {
                                let error = $root.ics23.CommitmentProof.verify(message.proofs[i]);
                                if (error)
                                    return "proofs." + error;
                            }
                        }
                        return null;
                    };

                    /**
                     * Creates a MerkleProof message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.commitment.v1.MerkleProof} MerkleProof
                     */
                    MerkleProof.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.commitment.v1.MerkleProof)
                            return object;
                        let message = new $root.ibc.core.commitment.v1.MerkleProof();
                        if (object.proofs) {
                            if (!Array.isArray(object.proofs))
                                throw TypeError(".ibc.core.commitment.v1.MerkleProof.proofs: array expected");
                            message.proofs = [];
                            for (let i = 0; i < object.proofs.length; ++i) {
                                if (typeof object.proofs[i] !== "object")
                                    throw TypeError(".ibc.core.commitment.v1.MerkleProof.proofs: object expected");
                                message.proofs[i] = $root.ics23.CommitmentProof.fromObject(object.proofs[i]);
                            }
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a MerkleProof message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @static
                     * @param {ibc.core.commitment.v1.MerkleProof} message MerkleProof
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MerkleProof.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.proofs = [];
                        if (message.proofs && message.proofs.length) {
                            object.proofs = [];
                            for (let j = 0; j < message.proofs.length; ++j)
                                object.proofs[j] = $root.ics23.CommitmentProof.toObject(message.proofs[j], options);
                        }
                        return object;
                    };

                    /**
                     * Converts this MerkleProof to JSON.
                     * @function toJSON
                     * @memberof ibc.core.commitment.v1.MerkleProof
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MerkleProof.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MerkleProof;
                })();

                return v1;
            })();

            return commitment;
        })();

        core.connection = (function() {

            /**
             * Namespace connection.
             * @memberof ibc.core
             * @namespace
             */
            const connection = {};

            connection.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.connection
                 * @namespace
                 */
                const v1 = {};

                v1.Query = (function() {

                    /**
                     * Constructs a new Query service.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connection}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionResponse} [response] QueryConnectionResponse
                     */

                    /**
                     * Calls Connection.
                     * @function connection
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} request QueryConnectionRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionCallback} callback Node-style callback called with the error, if any, and QueryConnectionResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connection = function connection(request, callback) {
                        return this.rpcCall(connection, $root.ibc.core.connection.v1.QueryConnectionRequest, $root.ibc.core.connection.v1.QueryConnectionResponse, request, callback);
                    }, "name", { value: "Connection" });

                    /**
                     * Calls Connection.
                     * @function connection
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} request QueryConnectionRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connections}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionsResponse} [response] QueryConnectionsResponse
                     */

                    /**
                     * Calls Connections.
                     * @function connections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} request QueryConnectionsRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionsCallback} callback Node-style callback called with the error, if any, and QueryConnectionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connections = function connections(request, callback) {
                        return this.rpcCall(connections, $root.ibc.core.connection.v1.QueryConnectionsRequest, $root.ibc.core.connection.v1.QueryConnectionsResponse, request, callback);
                    }, "name", { value: "Connections" });

                    /**
                     * Calls Connections.
                     * @function connections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} request QueryConnectionsRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#clientConnections}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ClientConnectionsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryClientConnectionsResponse} [response] QueryClientConnectionsResponse
                     */

                    /**
                     * Calls ClientConnections.
                     * @function clientConnections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} request QueryClientConnectionsRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ClientConnectionsCallback} callback Node-style callback called with the error, if any, and QueryClientConnectionsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.clientConnections = function clientConnections(request, callback) {
                        return this.rpcCall(clientConnections, $root.ibc.core.connection.v1.QueryClientConnectionsRequest, $root.ibc.core.connection.v1.QueryClientConnectionsResponse, request, callback);
                    }, "name", { value: "ClientConnections" });

                    /**
                     * Calls ClientConnections.
                     * @function clientConnections
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} request QueryClientConnectionsRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryClientConnectionsResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connectionClientState}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionClientStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionClientStateResponse} [response] QueryConnectionClientStateResponse
                     */

                    /**
                     * Calls ConnectionClientState.
                     * @function connectionClientState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} request QueryConnectionClientStateRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionClientStateCallback} callback Node-style callback called with the error, if any, and QueryConnectionClientStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connectionClientState = function connectionClientState(request, callback) {
                        return this.rpcCall(connectionClientState, $root.ibc.core.connection.v1.QueryConnectionClientStateRequest, $root.ibc.core.connection.v1.QueryConnectionClientStateResponse, request, callback);
                    }, "name", { value: "ConnectionClientState" });

                    /**
                     * Calls ConnectionClientState.
                     * @function connectionClientState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} request QueryConnectionClientStateRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionClientStateResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Query#connectionConsensusState}.
                     * @memberof ibc.core.connection.v1.Query
                     * @typedef ConnectionConsensusStateCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} [response] QueryConnectionConsensusStateResponse
                     */

                    /**
                     * Calls ConnectionConsensusState.
                     * @function connectionConsensusState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} request QueryConnectionConsensusStateRequest message or plain object
                     * @param {ibc.core.connection.v1.Query.ConnectionConsensusStateCallback} callback Node-style callback called with the error, if any, and QueryConnectionConsensusStateResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.connectionConsensusState = function connectionConsensusState(request, callback) {
                        return this.rpcCall(connectionConsensusState, $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest, $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse, request, callback);
                    }, "name", { value: "ConnectionConsensusState" });

                    /**
                     * Calls ConnectionConsensusState.
                     * @function connectionConsensusState
                     * @memberof ibc.core.connection.v1.Query
                     * @instance
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} request QueryConnectionConsensusStateRequest message or plain object
                     * @returns {Promise<ibc.core.connection.v1.QueryConnectionConsensusStateResponse>} Promise
                     * @variation 2
                     */

                    return Query;
                })();

                v1.QueryConnectionRequest = (function() {

                    /**
                     * Properties of a QueryConnectionRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionRequest
                     * @property {string|null} [connection_id] QueryConnectionRequest connection_id
                     */

                    /**
                     * Constructs a new QueryConnectionRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionRequest.
                     * @implements IQueryConnectionRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest=} [properties] Properties to set
                     */
                    function QueryConnectionRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @instance
                     */
                    QueryConnectionRequest.prototype.connection_id = "";

                    /**
                     * Encodes the specified QueryConnectionRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} message QueryConnectionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionRequest} message QueryConnectionRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionRequest} QueryConnectionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionRequest} QueryConnectionRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionRequest} QueryConnectionRequest
                     */
                    QueryConnectionRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionRequest();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionRequest} message QueryConnectionRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.connection_id = "";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionRequest;
                })();

                v1.QueryConnectionResponse = (function() {

                    /**
                     * Properties of a QueryConnectionResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionResponse
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] QueryConnectionResponse connection
                     * @property {Uint8Array|null} [proof] QueryConnectionResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionResponse.
                     * @implements IQueryConnectionResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse=} [properties] Properties to set
                     */
                    function QueryConnectionResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionResponse connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.connection = null;

                    /**
                     * QueryConnectionResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     */
                    QueryConnectionResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse} message QueryConnectionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(message.connection, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionResponse} message QueryConnectionResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionResponse} QueryConnectionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionResponse} QueryConnectionResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection != null && message.hasOwnProperty("connection")) {
                            let error = $root.ibc.core.connection.v1.ConnectionEnd.verify(message.connection);
                            if (error)
                                return "connection." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionResponse} QueryConnectionResponse
                     */
                    QueryConnectionResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionResponse();
                        if (object.connection != null) {
                            if (typeof object.connection !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionResponse.connection: object expected");
                            message.connection = $root.ibc.core.connection.v1.ConnectionEnd.fromObject(object.connection);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionResponse} message QueryConnectionResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = $root.ibc.core.connection.v1.ConnectionEnd.toObject(message.connection, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionResponse;
                })();

                v1.QueryConnectionsRequest = (function() {

                    /**
                     * Properties of a QueryConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionsRequest
                     * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryConnectionsRequest pagination
                     */

                    /**
                     * Constructs a new QueryConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionsRequest.
                     * @implements IQueryConnectionsRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest=} [properties] Properties to set
                     */
                    function QueryConnectionsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionsRequest pagination.
                     * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @instance
                     */
                    QueryConnectionsRequest.prototype.pagination = null;

                    /**
                     * Encodes the specified QueryConnectionsRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} message QueryConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionsRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsRequest} message QueryConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionsRequest} QueryConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionsRequest} QueryConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionsRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionsRequest} QueryConnectionsRequest
                     */
                    QueryConnectionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionsRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionsRequest();
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsRequest.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionsRequest} message QueryConnectionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.pagination = null;
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionsRequest;
                })();

                v1.QueryConnectionsResponse = (function() {

                    /**
                     * Properties of a QueryConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionsResponse
                     * @property {Array.<ibc.core.connection.v1.IIdentifiedConnection>|null} [connections] QueryConnectionsResponse connections
                     * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryConnectionsResponse pagination
                     * @property {ibc.core.client.v1.IHeight|null} [height] QueryConnectionsResponse height
                     */

                    /**
                     * Constructs a new QueryConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionsResponse.
                     * @implements IQueryConnectionsResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse=} [properties] Properties to set
                     */
                    function QueryConnectionsResponse(properties) {
                        this.connections = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionsResponse connections.
                     * @member {Array.<ibc.core.connection.v1.IIdentifiedConnection>} connections
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.connections = $util.emptyArray;

                    /**
                     * QueryConnectionsResponse pagination.
                     * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.pagination = null;

                    /**
                     * QueryConnectionsResponse height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     */
                    QueryConnectionsResponse.prototype.height = null;

                    /**
                     * Encodes the specified QueryConnectionsResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse} message QueryConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connections != null && message.connections.length)
                            for (let i = 0; i < message.connections.length; ++i)
                                $root.ibc.core.connection.v1.IdentifiedConnection.encode(message.connections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                            $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionsResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionsResponse} message QueryConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionsResponse} QueryConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.connections && message.connections.length))
                                    message.connections = [];
                                message.connections.push($root.ibc.core.connection.v1.IdentifiedConnection.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionsResponse} QueryConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionsResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connections != null && message.hasOwnProperty("connections")) {
                            if (!Array.isArray(message.connections))
                                return "connections: array expected";
                            for (let i = 0; i < message.connections.length; ++i) {
                                let error = $root.ibc.core.connection.v1.IdentifiedConnection.verify(message.connections[i]);
                                if (error)
                                    return "connections." + error;
                            }
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination")) {
                            let error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                            if (error)
                                return "pagination." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionsResponse} QueryConnectionsResponse
                     */
                    QueryConnectionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionsResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionsResponse();
                        if (object.connections) {
                            if (!Array.isArray(object.connections))
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.connections: array expected");
                            message.connections = [];
                            for (let i = 0; i < object.connections.length; ++i) {
                                if (typeof object.connections[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.connections: object expected");
                                message.connections[i] = $root.ibc.core.connection.v1.IdentifiedConnection.fromObject(object.connections[i]);
                            }
                        }
                        if (object.pagination != null) {
                            if (typeof object.pagination !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.pagination: object expected");
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                        }
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionsResponse.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionsResponse} message QueryConnectionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connections = [];
                        if (options.defaults) {
                            object.pagination = null;
                            object.height = null;
                        }
                        if (message.connections && message.connections.length) {
                            object.connections = [];
                            for (let j = 0; j < message.connections.length; ++j)
                                object.connections[j] = $root.ibc.core.connection.v1.IdentifiedConnection.toObject(message.connections[j], options);
                        }
                        if (message.pagination != null && message.hasOwnProperty("pagination"))
                            object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionsResponse;
                })();

                v1.QueryClientConnectionsRequest = (function() {

                    /**
                     * Properties of a QueryClientConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryClientConnectionsRequest
                     * @property {string|null} [client_id] QueryClientConnectionsRequest client_id
                     */

                    /**
                     * Constructs a new QueryClientConnectionsRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryClientConnectionsRequest.
                     * @implements IQueryClientConnectionsRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest=} [properties] Properties to set
                     */
                    function QueryClientConnectionsRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientConnectionsRequest client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @instance
                     */
                    QueryClientConnectionsRequest.prototype.client_id = "";

                    /**
                     * Encodes the specified QueryClientConnectionsRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} message QueryClientConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientConnectionsRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsRequest} message QueryClientConnectionsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientConnectionsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsRequest} QueryClientConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryClientConnectionsRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientConnectionsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsRequest} QueryClientConnectionsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientConnectionsRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientConnectionsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryClientConnectionsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsRequest} QueryClientConnectionsRequest
                     */
                    QueryClientConnectionsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryClientConnectionsRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryClientConnectionsRequest();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientConnectionsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryClientConnectionsRequest} message QueryClientConnectionsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientConnectionsRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        return object;
                    };

                    /**
                     * Converts this QueryClientConnectionsRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientConnectionsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientConnectionsRequest;
                })();

                v1.QueryClientConnectionsResponse = (function() {

                    /**
                     * Properties of a QueryClientConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryClientConnectionsResponse
                     * @property {Array.<string>|null} [connection_paths] QueryClientConnectionsResponse connection_paths
                     * @property {Uint8Array|null} [proof] QueryClientConnectionsResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryClientConnectionsResponse proof_height
                     */

                    /**
                     * Constructs a new QueryClientConnectionsResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryClientConnectionsResponse.
                     * @implements IQueryClientConnectionsResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse=} [properties] Properties to set
                     */
                    function QueryClientConnectionsResponse(properties) {
                        this.connection_paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryClientConnectionsResponse connection_paths.
                     * @member {Array.<string>} connection_paths
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.connection_paths = $util.emptyArray;

                    /**
                     * QueryClientConnectionsResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryClientConnectionsResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     */
                    QueryClientConnectionsResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryClientConnectionsResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse} message QueryClientConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_paths != null && message.connection_paths.length)
                            for (let i = 0; i < message.connection_paths.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_paths[i]);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryClientConnectionsResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryClientConnectionsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryClientConnectionsResponse} message QueryClientConnectionsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryClientConnectionsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryClientConnectionsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsResponse} QueryClientConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryClientConnectionsResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.connection_paths && message.connection_paths.length))
                                    message.connection_paths = [];
                                message.connection_paths.push(reader.string());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryClientConnectionsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsResponse} QueryClientConnectionsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryClientConnectionsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryClientConnectionsResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryClientConnectionsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_paths != null && message.hasOwnProperty("connection_paths")) {
                            if (!Array.isArray(message.connection_paths))
                                return "connection_paths: array expected";
                            for (let i = 0; i < message.connection_paths.length; ++i)
                                if (!$util.isString(message.connection_paths[i]))
                                    return "connection_paths: string[] expected";
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryClientConnectionsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryClientConnectionsResponse} QueryClientConnectionsResponse
                     */
                    QueryClientConnectionsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryClientConnectionsResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryClientConnectionsResponse();
                        if (object.connection_paths) {
                            if (!Array.isArray(object.connection_paths))
                                throw TypeError(".ibc.core.connection.v1.QueryClientConnectionsResponse.connection_paths: array expected");
                            message.connection_paths = [];
                            for (let i = 0; i < object.connection_paths.length; ++i)
                                message.connection_paths[i] = String(object.connection_paths[i]);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryClientConnectionsResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryClientConnectionsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryClientConnectionsResponse} message QueryClientConnectionsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryClientConnectionsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.connection_paths = [];
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.connection_paths && message.connection_paths.length) {
                            object.connection_paths = [];
                            for (let j = 0; j < message.connection_paths.length; ++j)
                                object.connection_paths[j] = message.connection_paths[j];
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryClientConnectionsResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryClientConnectionsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryClientConnectionsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryClientConnectionsResponse;
                })();

                v1.QueryConnectionClientStateRequest = (function() {

                    /**
                     * Properties of a QueryConnectionClientStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionClientStateRequest
                     * @property {string|null} [connection_id] QueryConnectionClientStateRequest connection_id
                     */

                    /**
                     * Constructs a new QueryConnectionClientStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionClientStateRequest.
                     * @implements IQueryConnectionClientStateRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest=} [properties] Properties to set
                     */
                    function QueryConnectionClientStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionClientStateRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @instance
                     */
                    QueryConnectionClientStateRequest.prototype.connection_id = "";

                    /**
                     * Encodes the specified QueryConnectionClientStateRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} message QueryConnectionClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionClientStateRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateRequest} message QueryConnectionClientStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionClientStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateRequest} QueryConnectionClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionClientStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionClientStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateRequest} QueryConnectionClientStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionClientStateRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionClientStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionClientStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateRequest} QueryConnectionClientStateRequest
                     */
                    QueryConnectionClientStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionClientStateRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionClientStateRequest();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionClientStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionClientStateRequest} message QueryConnectionClientStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionClientStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.connection_id = "";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionClientStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionClientStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionClientStateRequest;
                })();

                v1.QueryConnectionClientStateResponse = (function() {

                    /**
                     * Properties of a QueryConnectionClientStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionClientStateResponse
                     * @property {ibc.core.client.v1.IIdentifiedClientState|null} [identified_client_state] QueryConnectionClientStateResponse identified_client_state
                     * @property {Uint8Array|null} [proof] QueryConnectionClientStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionClientStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionClientStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionClientStateResponse.
                     * @implements IQueryConnectionClientStateResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse=} [properties] Properties to set
                     */
                    function QueryConnectionClientStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionClientStateResponse identified_client_state.
                     * @member {ibc.core.client.v1.IIdentifiedClientState|null|undefined} identified_client_state
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.identified_client_state = null;

                    /**
                     * QueryConnectionClientStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionClientStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     */
                    QueryConnectionClientStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionClientStateResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse} message QueryConnectionClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identified_client_state != null && Object.hasOwnProperty.call(message, "identified_client_state"))
                            $root.ibc.core.client.v1.IdentifiedClientState.encode(message.identified_client_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionClientStateResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionClientStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionClientStateResponse} message QueryConnectionClientStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionClientStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionClientStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateResponse} QueryConnectionClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionClientStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.proof = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionClientStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateResponse} QueryConnectionClientStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionClientStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionClientStateResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionClientStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state")) {
                            let error = $root.ibc.core.client.v1.IdentifiedClientState.verify(message.identified_client_state);
                            if (error)
                                return "identified_client_state." + error;
                        }
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionClientStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionClientStateResponse} QueryConnectionClientStateResponse
                     */
                    QueryConnectionClientStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionClientStateResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionClientStateResponse();
                        if (object.identified_client_state != null) {
                            if (typeof object.identified_client_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionClientStateResponse.identified_client_state: object expected");
                            message.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.fromObject(object.identified_client_state);
                        }
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionClientStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionClientStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionClientStateResponse} message QueryConnectionClientStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionClientStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.identified_client_state = null;
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.identified_client_state != null && message.hasOwnProperty("identified_client_state"))
                            object.identified_client_state = $root.ibc.core.client.v1.IdentifiedClientState.toObject(message.identified_client_state, options);
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionClientStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionClientStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionClientStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionClientStateResponse;
                })();

                v1.QueryConnectionConsensusStateRequest = (function() {

                    /**
                     * Properties of a QueryConnectionConsensusStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionConsensusStateRequest
                     * @property {string|null} [connection_id] QueryConnectionConsensusStateRequest connection_id
                     * @property {Long|null} [revision_number] QueryConnectionConsensusStateRequest revision_number
                     * @property {Long|null} [revision_height] QueryConnectionConsensusStateRequest revision_height
                     */

                    /**
                     * Constructs a new QueryConnectionConsensusStateRequest.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionConsensusStateRequest.
                     * @implements IQueryConnectionConsensusStateRequest
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest=} [properties] Properties to set
                     */
                    function QueryConnectionConsensusStateRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionConsensusStateRequest connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.connection_id = "";

                    /**
                     * QueryConnectionConsensusStateRequest revision_number.
                     * @member {Long} revision_number
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * QueryConnectionConsensusStateRequest revision_height.
                     * @member {Long} revision_height
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     */
                    QueryConnectionConsensusStateRequest.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified QueryConnectionConsensusStateRequest message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} message QueryConnectionConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.revision_number);
                        if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.revision_height);
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionConsensusStateRequest message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateRequest} message QueryConnectionConsensusStateRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} QueryConnectionConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            case 2:
                                message.revision_number = reader.uint64();
                                break;
                            case 3:
                                message.revision_height = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} QueryConnectionConsensusStateRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionConsensusStateRequest message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionConsensusStateRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                return "revision_number: integer|Long expected";
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                return "revision_height: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionConsensusStateRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} QueryConnectionConsensusStateRequest
                     */
                    QueryConnectionConsensusStateRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateRequest();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.revision_number != null)
                            if ($util.Long)
                                (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                            else if (typeof object.revision_number === "string")
                                message.revision_number = parseInt(object.revision_number, 10);
                            else if (typeof object.revision_number === "number")
                                message.revision_number = object.revision_number;
                            else if (typeof object.revision_number === "object")
                                message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                        if (object.revision_height != null)
                            if ($util.Long)
                                (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                            else if (typeof object.revision_height === "string")
                                message.revision_height = parseInt(object.revision_height, 10);
                            else if (typeof object.revision_height === "number")
                                message.revision_height = object.revision_height;
                            else if (typeof object.revision_height === "object")
                                message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionConsensusStateRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionConsensusStateRequest} message QueryConnectionConsensusStateRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionConsensusStateRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_number = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.revision_height = options.longs === String ? "0" : 0;
                        }
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                            if (typeof message.revision_number === "number")
                                object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                            else
                                object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                        if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                            if (typeof message.revision_height === "number")
                                object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                            else
                                object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionConsensusStateRequest to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionConsensusStateRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionConsensusStateRequest;
                })();

                v1.QueryConnectionConsensusStateResponse = (function() {

                    /**
                     * Properties of a QueryConnectionConsensusStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IQueryConnectionConsensusStateResponse
                     * @property {google.protobuf.IAny|null} [consensus_state] QueryConnectionConsensusStateResponse consensus_state
                     * @property {string|null} [client_id] QueryConnectionConsensusStateResponse client_id
                     * @property {Uint8Array|null} [proof] QueryConnectionConsensusStateResponse proof
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] QueryConnectionConsensusStateResponse proof_height
                     */

                    /**
                     * Constructs a new QueryConnectionConsensusStateResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a QueryConnectionConsensusStateResponse.
                     * @implements IQueryConnectionConsensusStateResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse=} [properties] Properties to set
                     */
                    function QueryConnectionConsensusStateResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * QueryConnectionConsensusStateResponse consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.consensus_state = null;

                    /**
                     * QueryConnectionConsensusStateResponse client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.client_id = "";

                    /**
                     * QueryConnectionConsensusStateResponse proof.
                     * @member {Uint8Array} proof
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.proof = $util.newBuffer([]);

                    /**
                     * QueryConnectionConsensusStateResponse proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     */
                    QueryConnectionConsensusStateResponse.prototype.proof_height = null;

                    /**
                     * Encodes the specified QueryConnectionConsensusStateResponse message. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse} message QueryConnectionConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.client_id);
                        if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.proof);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified QueryConnectionConsensusStateResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.QueryConnectionConsensusStateResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.IQueryConnectionConsensusStateResponse} message QueryConnectionConsensusStateResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryConnectionConsensusStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} QueryConnectionConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.client_id = reader.string();
                                break;
                            case 3:
                                message.proof = reader.bytes();
                                break;
                            case 4:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a QueryConnectionConsensusStateResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} QueryConnectionConsensusStateResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryConnectionConsensusStateResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a QueryConnectionConsensusStateResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryConnectionConsensusStateResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            if (!(message.proof && typeof message.proof.length === "number" || $util.isString(message.proof)))
                                return "proof: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a QueryConnectionConsensusStateResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} QueryConnectionConsensusStateResponse
                     */
                    QueryConnectionConsensusStateResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse)
                            return object;
                        let message = new $root.ibc.core.connection.v1.QueryConnectionConsensusStateResponse();
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionConsensusStateResponse.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.proof != null)
                            if (typeof object.proof === "string")
                                $util.base64.decode(object.proof, message.proof = $util.newBuffer($util.base64.length(object.proof)), 0);
                            else if (object.proof.length)
                                message.proof = object.proof;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.QueryConnectionConsensusStateResponse.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a QueryConnectionConsensusStateResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @static
                     * @param {ibc.core.connection.v1.QueryConnectionConsensusStateResponse} message QueryConnectionConsensusStateResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryConnectionConsensusStateResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.consensus_state = null;
                            object.client_id = "";
                            if (options.bytes === String)
                                object.proof = "";
                            else {
                                object.proof = [];
                                if (options.bytes !== Array)
                                    object.proof = $util.newBuffer(object.proof);
                            }
                            object.proof_height = null;
                        }
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.proof != null && message.hasOwnProperty("proof"))
                            object.proof = options.bytes === String ? $util.base64.encode(message.proof, 0, message.proof.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof) : message.proof;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        return object;
                    };

                    /**
                     * Converts this QueryConnectionConsensusStateResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.QueryConnectionConsensusStateResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryConnectionConsensusStateResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return QueryConnectionConsensusStateResponse;
                })();

                v1.ConnectionEnd = (function() {

                    /**
                     * Properties of a ConnectionEnd.
                     * @memberof ibc.core.connection.v1
                     * @interface IConnectionEnd
                     * @property {string|null} [client_id] ConnectionEnd client_id
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [versions] ConnectionEnd versions
                     * @property {ibc.core.connection.v1.State|null} [state] ConnectionEnd state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] ConnectionEnd counterparty
                     * @property {Long|null} [delay_period] ConnectionEnd delay_period
                     */

                    /**
                     * Constructs a new ConnectionEnd.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ConnectionEnd.
                     * @implements IConnectionEnd
                     * @constructor
                     * @param {ibc.core.connection.v1.IConnectionEnd=} [properties] Properties to set
                     */
                    function ConnectionEnd(properties) {
                        this.versions = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionEnd client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.client_id = "";

                    /**
                     * ConnectionEnd versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} versions
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.versions = $util.emptyArray;

                    /**
                     * ConnectionEnd state.
                     * @member {ibc.core.connection.v1.State} state
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.state = 0;

                    /**
                     * ConnectionEnd counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.counterparty = null;

                    /**
                     * ConnectionEnd delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     */
                    ConnectionEnd.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified ConnectionEnd message. Does not implicitly {@link ibc.core.connection.v1.ConnectionEnd.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionEnd} message ConnectionEnd message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionEnd.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.versions != null && message.versions.length)
                            for (let i = 0; i < message.versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(message.versions[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.delay_period);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionEnd message, length delimited. Does not implicitly {@link ibc.core.connection.v1.ConnectionEnd.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionEnd} message ConnectionEnd message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionEnd.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionEnd message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ConnectionEnd} ConnectionEnd
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionEnd.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.ConnectionEnd();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.versions && message.versions.length))
                                    message.versions = [];
                                message.versions.push($root.ibc.core.connection.v1.Version.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.state = reader.int32();
                                break;
                            case 4:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.delay_period = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionEnd message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.ConnectionEnd} ConnectionEnd
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionEnd.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionEnd message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionEnd.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.versions != null && message.hasOwnProperty("versions")) {
                            if (!Array.isArray(message.versions))
                                return "versions: array expected";
                            for (let i = 0; i < message.versions.length; ++i) {
                                let error = $root.ibc.core.connection.v1.Version.verify(message.versions[i]);
                                if (error)
                                    return "versions." + error;
                            }
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a ConnectionEnd message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.ConnectionEnd} ConnectionEnd
                     */
                    ConnectionEnd.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.ConnectionEnd)
                            return object;
                        let message = new $root.ibc.core.connection.v1.ConnectionEnd();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.versions) {
                            if (!Array.isArray(object.versions))
                                throw TypeError(".ibc.core.connection.v1.ConnectionEnd.versions: array expected");
                            message.versions = [];
                            for (let i = 0; i < object.versions.length; ++i) {
                                if (typeof object.versions[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.ConnectionEnd.versions: object expected");
                                message.versions[i] = $root.ibc.core.connection.v1.Version.fromObject(object.versions[i]);
                            }
                        }
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.ConnectionEnd.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionEnd message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @static
                     * @param {ibc.core.connection.v1.ConnectionEnd} message ConnectionEnd
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionEnd.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.versions = [];
                        if (options.defaults) {
                            object.client_id = "";
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.versions && message.versions.length) {
                            object.versions = [];
                            for (let j = 0; j < message.versions.length; ++j)
                                object.versions[j] = $root.ibc.core.connection.v1.Version.toObject(message.versions[j], options);
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.connection.v1.State[message.state] : message.state;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        return object;
                    };

                    /**
                     * Converts this ConnectionEnd to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.ConnectionEnd
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionEnd.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionEnd;
                })();

                v1.IdentifiedConnection = (function() {

                    /**
                     * Properties of an IdentifiedConnection.
                     * @memberof ibc.core.connection.v1
                     * @interface IIdentifiedConnection
                     * @property {string|null} [id] IdentifiedConnection id
                     * @property {string|null} [client_id] IdentifiedConnection client_id
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [versions] IdentifiedConnection versions
                     * @property {ibc.core.connection.v1.State|null} [state] IdentifiedConnection state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] IdentifiedConnection counterparty
                     * @property {Long|null} [delay_period] IdentifiedConnection delay_period
                     */

                    /**
                     * Constructs a new IdentifiedConnection.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents an IdentifiedConnection.
                     * @implements IIdentifiedConnection
                     * @constructor
                     * @param {ibc.core.connection.v1.IIdentifiedConnection=} [properties] Properties to set
                     */
                    function IdentifiedConnection(properties) {
                        this.versions = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * IdentifiedConnection id.
                     * @member {string} id
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.id = "";

                    /**
                     * IdentifiedConnection client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.client_id = "";

                    /**
                     * IdentifiedConnection versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} versions
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.versions = $util.emptyArray;

                    /**
                     * IdentifiedConnection state.
                     * @member {ibc.core.connection.v1.State} state
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.state = 0;

                    /**
                     * IdentifiedConnection counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.counterparty = null;

                    /**
                     * IdentifiedConnection delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     */
                    IdentifiedConnection.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified IdentifiedConnection message. Does not implicitly {@link ibc.core.connection.v1.IdentifiedConnection.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {ibc.core.connection.v1.IIdentifiedConnection} message IdentifiedConnection message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedConnection.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.client_id);
                        if (message.versions != null && message.versions.length)
                            for (let i = 0; i < message.versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(message.versions[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.state);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.delay_period);
                        return writer;
                    };

                    /**
                     * Encodes the specified IdentifiedConnection message, length delimited. Does not implicitly {@link ibc.core.connection.v1.IdentifiedConnection.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {ibc.core.connection.v1.IIdentifiedConnection} message IdentifiedConnection message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IdentifiedConnection.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes an IdentifiedConnection message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.IdentifiedConnection} IdentifiedConnection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedConnection.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.IdentifiedConnection();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.id = reader.string();
                                break;
                            case 2:
                                message.client_id = reader.string();
                                break;
                            case 3:
                                if (!(message.versions && message.versions.length))
                                    message.versions = [];
                                message.versions.push($root.ibc.core.connection.v1.Version.decode(reader, reader.uint32()));
                                break;
                            case 4:
                                message.state = reader.int32();
                                break;
                            case 5:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.delay_period = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes an IdentifiedConnection message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.IdentifiedConnection} IdentifiedConnection
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IdentifiedConnection.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies an IdentifiedConnection message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IdentifiedConnection.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.versions != null && message.hasOwnProperty("versions")) {
                            if (!Array.isArray(message.versions))
                                return "versions: array expected";
                            for (let i = 0; i < message.versions.length; ++i) {
                                let error = $root.ibc.core.connection.v1.Version.verify(message.versions[i]);
                                if (error)
                                    return "versions." + error;
                            }
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            switch (message.state) {
                            default:
                                return "state: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                                break;
                            }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates an IdentifiedConnection message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.IdentifiedConnection} IdentifiedConnection
                     */
                    IdentifiedConnection.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.IdentifiedConnection)
                            return object;
                        let message = new $root.ibc.core.connection.v1.IdentifiedConnection();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.versions) {
                            if (!Array.isArray(object.versions))
                                throw TypeError(".ibc.core.connection.v1.IdentifiedConnection.versions: array expected");
                            message.versions = [];
                            for (let i = 0; i < object.versions.length; ++i) {
                                if (typeof object.versions[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.IdentifiedConnection.versions: object expected");
                                message.versions[i] = $root.ibc.core.connection.v1.Version.fromObject(object.versions[i]);
                            }
                        }
                        switch (object.state) {
                        case "STATE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.state = 0;
                            break;
                        case "STATE_INIT":
                        case 1:
                            message.state = 1;
                            break;
                        case "STATE_TRYOPEN":
                        case 2:
                            message.state = 2;
                            break;
                        case "STATE_OPEN":
                        case 3:
                            message.state = 3;
                            break;
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.IdentifiedConnection.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from an IdentifiedConnection message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @static
                     * @param {ibc.core.connection.v1.IdentifiedConnection} message IdentifiedConnection
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IdentifiedConnection.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.versions = [];
                        if (options.defaults) {
                            object.id = "";
                            object.client_id = "";
                            object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                            object.counterparty = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.versions && message.versions.length) {
                            object.versions = [];
                            for (let j = 0; j < message.versions.length; ++j)
                                object.versions[j] = $root.ibc.core.connection.v1.Version.toObject(message.versions[j], options);
                        }
                        if (message.state != null && message.hasOwnProperty("state"))
                            object.state = options.enums === String ? $root.ibc.core.connection.v1.State[message.state] : message.state;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        return object;
                    };

                    /**
                     * Converts this IdentifiedConnection to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.IdentifiedConnection
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IdentifiedConnection.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return IdentifiedConnection;
                })();

                /**
                 * State enum.
                 * @name ibc.core.connection.v1.State
                 * @enum {number}
                 * @property {number} STATE_UNINITIALIZED_UNSPECIFIED=0 STATE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} STATE_INIT=1 STATE_INIT value
                 * @property {number} STATE_TRYOPEN=2 STATE_TRYOPEN value
                 * @property {number} STATE_OPEN=3 STATE_OPEN value
                 */
                v1.State = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STATE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "STATE_INIT"] = 1;
                    values[valuesById[2] = "STATE_TRYOPEN"] = 2;
                    values[valuesById[3] = "STATE_OPEN"] = 3;
                    return values;
                })();

                v1.Counterparty = (function() {

                    /**
                     * Properties of a Counterparty.
                     * @memberof ibc.core.connection.v1
                     * @interface ICounterparty
                     * @property {string|null} [client_id] Counterparty client_id
                     * @property {string|null} [connection_id] Counterparty connection_id
                     * @property {ibc.core.commitment.v1.IMerklePrefix|null} [prefix] Counterparty prefix
                     */

                    /**
                     * Constructs a new Counterparty.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Counterparty.
                     * @implements ICounterparty
                     * @constructor
                     * @param {ibc.core.connection.v1.ICounterparty=} [properties] Properties to set
                     */
                    function Counterparty(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Counterparty client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.client_id = "";

                    /**
                     * Counterparty connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.connection_id = "";

                    /**
                     * Counterparty prefix.
                     * @member {ibc.core.commitment.v1.IMerklePrefix|null|undefined} prefix
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     */
                    Counterparty.prototype.prefix = null;

                    /**
                     * Encodes the specified Counterparty message. Does not implicitly {@link ibc.core.connection.v1.Counterparty.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {ibc.core.connection.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.connection_id);
                        if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
                            $root.ibc.core.commitment.v1.MerklePrefix.encode(message.prefix, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Counterparty message, length delimited. Does not implicitly {@link ibc.core.connection.v1.Counterparty.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {ibc.core.connection.v1.ICounterparty} message Counterparty message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Counterparty.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.Counterparty();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.connection_id = reader.string();
                                break;
                            case 3:
                                message.prefix = $root.ibc.core.commitment.v1.MerklePrefix.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Counterparty message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.Counterparty} Counterparty
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Counterparty.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Counterparty message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Counterparty.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.prefix != null && message.hasOwnProperty("prefix")) {
                            let error = $root.ibc.core.commitment.v1.MerklePrefix.verify(message.prefix);
                            if (error)
                                return "prefix." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Counterparty message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.Counterparty} Counterparty
                     */
                    Counterparty.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.Counterparty)
                            return object;
                        let message = new $root.ibc.core.connection.v1.Counterparty();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.prefix != null) {
                            if (typeof object.prefix !== "object")
                                throw TypeError(".ibc.core.connection.v1.Counterparty.prefix: object expected");
                            message.prefix = $root.ibc.core.commitment.v1.MerklePrefix.fromObject(object.prefix);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Counterparty message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @static
                     * @param {ibc.core.connection.v1.Counterparty} message Counterparty
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Counterparty.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.connection_id = "";
                            object.prefix = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.prefix != null && message.hasOwnProperty("prefix"))
                            object.prefix = $root.ibc.core.commitment.v1.MerklePrefix.toObject(message.prefix, options);
                        return object;
                    };

                    /**
                     * Converts this Counterparty to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.Counterparty
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Counterparty.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Counterparty;
                })();

                v1.ClientPaths = (function() {

                    /**
                     * Properties of a ClientPaths.
                     * @memberof ibc.core.connection.v1
                     * @interface IClientPaths
                     * @property {Array.<string>|null} [paths] ClientPaths paths
                     */

                    /**
                     * Constructs a new ClientPaths.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ClientPaths.
                     * @implements IClientPaths
                     * @constructor
                     * @param {ibc.core.connection.v1.IClientPaths=} [properties] Properties to set
                     */
                    function ClientPaths(properties) {
                        this.paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientPaths paths.
                     * @member {Array.<string>} paths
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @instance
                     */
                    ClientPaths.prototype.paths = $util.emptyArray;

                    /**
                     * Encodes the specified ClientPaths message. Does not implicitly {@link ibc.core.connection.v1.ClientPaths.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {ibc.core.connection.v1.IClientPaths} message ClientPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientPaths.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.paths != null && message.paths.length)
                            for (let i = 0; i < message.paths.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.paths[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientPaths message, length delimited. Does not implicitly {@link ibc.core.connection.v1.ClientPaths.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {ibc.core.connection.v1.IClientPaths} message ClientPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientPaths.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientPaths message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ClientPaths} ClientPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientPaths.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.ClientPaths();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientPaths message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.ClientPaths} ClientPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientPaths.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientPaths message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientPaths.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.paths != null && message.hasOwnProperty("paths")) {
                            if (!Array.isArray(message.paths))
                                return "paths: array expected";
                            for (let i = 0; i < message.paths.length; ++i)
                                if (!$util.isString(message.paths[i]))
                                    return "paths: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientPaths message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.ClientPaths} ClientPaths
                     */
                    ClientPaths.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.ClientPaths)
                            return object;
                        let message = new $root.ibc.core.connection.v1.ClientPaths();
                        if (object.paths) {
                            if (!Array.isArray(object.paths))
                                throw TypeError(".ibc.core.connection.v1.ClientPaths.paths: array expected");
                            message.paths = [];
                            for (let i = 0; i < object.paths.length; ++i)
                                message.paths[i] = String(object.paths[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientPaths message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @static
                     * @param {ibc.core.connection.v1.ClientPaths} message ClientPaths
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientPaths.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.paths = [];
                        if (message.paths && message.paths.length) {
                            object.paths = [];
                            for (let j = 0; j < message.paths.length; ++j)
                                object.paths[j] = message.paths[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this ClientPaths to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.ClientPaths
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientPaths.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientPaths;
                })();

                v1.ConnectionPaths = (function() {

                    /**
                     * Properties of a ConnectionPaths.
                     * @memberof ibc.core.connection.v1
                     * @interface IConnectionPaths
                     * @property {string|null} [client_id] ConnectionPaths client_id
                     * @property {Array.<string>|null} [paths] ConnectionPaths paths
                     */

                    /**
                     * Constructs a new ConnectionPaths.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a ConnectionPaths.
                     * @implements IConnectionPaths
                     * @constructor
                     * @param {ibc.core.connection.v1.IConnectionPaths=} [properties] Properties to set
                     */
                    function ConnectionPaths(properties) {
                        this.paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionPaths client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     */
                    ConnectionPaths.prototype.client_id = "";

                    /**
                     * ConnectionPaths paths.
                     * @member {Array.<string>} paths
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     */
                    ConnectionPaths.prototype.paths = $util.emptyArray;

                    /**
                     * Encodes the specified ConnectionPaths message. Does not implicitly {@link ibc.core.connection.v1.ConnectionPaths.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionPaths} message ConnectionPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionPaths.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.paths != null && message.paths.length)
                            for (let i = 0; i < message.paths.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.paths[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionPaths message, length delimited. Does not implicitly {@link ibc.core.connection.v1.ConnectionPaths.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {ibc.core.connection.v1.IConnectionPaths} message ConnectionPaths message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionPaths.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionPaths message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.ConnectionPaths} ConnectionPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionPaths.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.ConnectionPaths();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                if (!(message.paths && message.paths.length))
                                    message.paths = [];
                                message.paths.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionPaths message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.ConnectionPaths} ConnectionPaths
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionPaths.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionPaths message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionPaths.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.paths != null && message.hasOwnProperty("paths")) {
                            if (!Array.isArray(message.paths))
                                return "paths: array expected";
                            for (let i = 0; i < message.paths.length; ++i)
                                if (!$util.isString(message.paths[i]))
                                    return "paths: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a ConnectionPaths message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.ConnectionPaths} ConnectionPaths
                     */
                    ConnectionPaths.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.ConnectionPaths)
                            return object;
                        let message = new $root.ibc.core.connection.v1.ConnectionPaths();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.paths) {
                            if (!Array.isArray(object.paths))
                                throw TypeError(".ibc.core.connection.v1.ConnectionPaths.paths: array expected");
                            message.paths = [];
                            for (let i = 0; i < object.paths.length; ++i)
                                message.paths[i] = String(object.paths[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionPaths message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @static
                     * @param {ibc.core.connection.v1.ConnectionPaths} message ConnectionPaths
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionPaths.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.paths = [];
                        if (options.defaults)
                            object.client_id = "";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.paths && message.paths.length) {
                            object.paths = [];
                            for (let j = 0; j < message.paths.length; ++j)
                                object.paths[j] = message.paths[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this ConnectionPaths to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.ConnectionPaths
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionPaths.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionPaths;
                })();

                v1.Version = (function() {

                    /**
                     * Properties of a Version.
                     * @memberof ibc.core.connection.v1
                     * @interface IVersion
                     * @property {string|null} [identifier] Version identifier
                     * @property {Array.<string>|null} [features] Version features
                     */

                    /**
                     * Constructs a new Version.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Version.
                     * @implements IVersion
                     * @constructor
                     * @param {ibc.core.connection.v1.IVersion=} [properties] Properties to set
                     */
                    function Version(properties) {
                        this.features = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Version identifier.
                     * @member {string} identifier
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     */
                    Version.prototype.identifier = "";

                    /**
                     * Version features.
                     * @member {Array.<string>} features
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     */
                    Version.prototype.features = $util.emptyArray;

                    /**
                     * Encodes the specified Version message. Does not implicitly {@link ibc.core.connection.v1.Version.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {ibc.core.connection.v1.IVersion} message Version message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Version.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identifier != null && Object.hasOwnProperty.call(message, "identifier"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.identifier);
                        if (message.features != null && message.features.length)
                            for (let i = 0; i < message.features.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.features[i]);
                        return writer;
                    };

                    /**
                     * Encodes the specified Version message, length delimited. Does not implicitly {@link ibc.core.connection.v1.Version.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {ibc.core.connection.v1.IVersion} message Version message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Version.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Version message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Version} Version
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Version.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.Version();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.identifier = reader.string();
                                break;
                            case 2:
                                if (!(message.features && message.features.length))
                                    message.features = [];
                                message.features.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Version message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.Version} Version
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Version.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Version message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Version.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            if (!$util.isString(message.identifier))
                                return "identifier: string expected";
                        if (message.features != null && message.hasOwnProperty("features")) {
                            if (!Array.isArray(message.features))
                                return "features: array expected";
                            for (let i = 0; i < message.features.length; ++i)
                                if (!$util.isString(message.features[i]))
                                    return "features: string[] expected";
                        }
                        return null;
                    };

                    /**
                     * Creates a Version message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.Version} Version
                     */
                    Version.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.Version)
                            return object;
                        let message = new $root.ibc.core.connection.v1.Version();
                        if (object.identifier != null)
                            message.identifier = String(object.identifier);
                        if (object.features) {
                            if (!Array.isArray(object.features))
                                throw TypeError(".ibc.core.connection.v1.Version.features: array expected");
                            message.features = [];
                            for (let i = 0; i < object.features.length; ++i)
                                message.features[i] = String(object.features[i]);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Version message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.Version
                     * @static
                     * @param {ibc.core.connection.v1.Version} message Version
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Version.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.features = [];
                        if (options.defaults)
                            object.identifier = "";
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            object.identifier = message.identifier;
                        if (message.features && message.features.length) {
                            object.features = [];
                            for (let j = 0; j < message.features.length; ++j)
                                object.features[j] = message.features[j];
                        }
                        return object;
                    };

                    /**
                     * Converts this Version to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.Version
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Version.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Version;
                })();

                v1.Params = (function() {

                    /**
                     * Properties of a Params.
                     * @memberof ibc.core.connection.v1
                     * @interface IParams
                     * @property {Long|null} [max_expected_time_per_block] Params max_expected_time_per_block
                     */

                    /**
                     * Constructs a new Params.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {ibc.core.connection.v1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Params max_expected_time_per_block.
                     * @member {Long} max_expected_time_per_block
                     * @memberof ibc.core.connection.v1.Params
                     * @instance
                     */
                    Params.prototype.max_expected_time_per_block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Params message. Does not implicitly {@link ibc.core.connection.v1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {ibc.core.connection.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.max_expected_time_per_block != null && Object.hasOwnProperty.call(message, "max_expected_time_per_block"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.max_expected_time_per_block);
                        return writer;
                    };

                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.core.connection.v1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {ibc.core.connection.v1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.Params();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.max_expected_time_per_block = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.max_expected_time_per_block != null && message.hasOwnProperty("max_expected_time_per_block"))
                            if (!$util.isInteger(message.max_expected_time_per_block) && !(message.max_expected_time_per_block && $util.isInteger(message.max_expected_time_per_block.low) && $util.isInteger(message.max_expected_time_per_block.high)))
                                return "max_expected_time_per_block: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.Params)
                            return object;
                        let message = new $root.ibc.core.connection.v1.Params();
                        if (object.max_expected_time_per_block != null)
                            if ($util.Long)
                                (message.max_expected_time_per_block = $util.Long.fromValue(object.max_expected_time_per_block)).unsigned = true;
                            else if (typeof object.max_expected_time_per_block === "string")
                                message.max_expected_time_per_block = parseInt(object.max_expected_time_per_block, 10);
                            else if (typeof object.max_expected_time_per_block === "number")
                                message.max_expected_time_per_block = object.max_expected_time_per_block;
                            else if (typeof object.max_expected_time_per_block === "object")
                                message.max_expected_time_per_block = new $util.LongBits(object.max_expected_time_per_block.low >>> 0, object.max_expected_time_per_block.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.Params
                     * @static
                     * @param {ibc.core.connection.v1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.max_expected_time_per_block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.max_expected_time_per_block = options.longs === String ? "0" : 0;
                        if (message.max_expected_time_per_block != null && message.hasOwnProperty("max_expected_time_per_block"))
                            if (typeof message.max_expected_time_per_block === "number")
                                object.max_expected_time_per_block = options.longs === String ? String(message.max_expected_time_per_block) : message.max_expected_time_per_block;
                            else
                                object.max_expected_time_per_block = options.longs === String ? $util.Long.prototype.toString.call(message.max_expected_time_per_block) : options.longs === Number ? new $util.LongBits(message.max_expected_time_per_block.low >>> 0, message.max_expected_time_per_block.high >>> 0).toNumber(true) : message.max_expected_time_per_block;
                        return object;
                    };

                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Params;
                })();

                v1.Msg = (function() {

                    /**
                     * Constructs a new Msg service.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }

                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenInit}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenInitCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenInitResponse} [response] MsgConnectionOpenInitResponse
                     */

                    /**
                     * Calls ConnectionOpenInit.
                     * @function connectionOpenInit
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} request MsgConnectionOpenInit message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenInitCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenInitResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenInit = function connectionOpenInit(request, callback) {
                        return this.rpcCall(connectionOpenInit, $root.ibc.core.connection.v1.MsgConnectionOpenInit, $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse, request, callback);
                    }, "name", { value: "ConnectionOpenInit" });

                    /**
                     * Calls ConnectionOpenInit.
                     * @function connectionOpenInit
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} request MsgConnectionOpenInit message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenInitResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenTry}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenTryCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenTryResponse} [response] MsgConnectionOpenTryResponse
                     */

                    /**
                     * Calls ConnectionOpenTry.
                     * @function connectionOpenTry
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} request MsgConnectionOpenTry message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenTryCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenTryResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenTry = function connectionOpenTry(request, callback) {
                        return this.rpcCall(connectionOpenTry, $root.ibc.core.connection.v1.MsgConnectionOpenTry, $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse, request, callback);
                    }, "name", { value: "ConnectionOpenTry" });

                    /**
                     * Calls ConnectionOpenTry.
                     * @function connectionOpenTry
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} request MsgConnectionOpenTry message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenTryResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenAck}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenAckCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenAckResponse} [response] MsgConnectionOpenAckResponse
                     */

                    /**
                     * Calls ConnectionOpenAck.
                     * @function connectionOpenAck
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} request MsgConnectionOpenAck message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenAckCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenAckResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenAck = function connectionOpenAck(request, callback) {
                        return this.rpcCall(connectionOpenAck, $root.ibc.core.connection.v1.MsgConnectionOpenAck, $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse, request, callback);
                    }, "name", { value: "ConnectionOpenAck" });

                    /**
                     * Calls ConnectionOpenAck.
                     * @function connectionOpenAck
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} request MsgConnectionOpenAck message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenAckResponse>} Promise
                     * @variation 2
                     */

                    /**
                     * Callback as used by {@link ibc.core.connection.v1.Msg#connectionOpenConfirm}.
                     * @memberof ibc.core.connection.v1.Msg
                     * @typedef ConnectionOpenConfirmCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} [response] MsgConnectionOpenConfirmResponse
                     */

                    /**
                     * Calls ConnectionOpenConfirm.
                     * @function connectionOpenConfirm
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} request MsgConnectionOpenConfirm message or plain object
                     * @param {ibc.core.connection.v1.Msg.ConnectionOpenConfirmCallback} callback Node-style callback called with the error, if any, and MsgConnectionOpenConfirmResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.connectionOpenConfirm = function connectionOpenConfirm(request, callback) {
                        return this.rpcCall(connectionOpenConfirm, $root.ibc.core.connection.v1.MsgConnectionOpenConfirm, $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse, request, callback);
                    }, "name", { value: "ConnectionOpenConfirm" });

                    /**
                     * Calls ConnectionOpenConfirm.
                     * @function connectionOpenConfirm
                     * @memberof ibc.core.connection.v1.Msg
                     * @instance
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} request MsgConnectionOpenConfirm message or plain object
                     * @returns {Promise<ibc.core.connection.v1.MsgConnectionOpenConfirmResponse>} Promise
                     * @variation 2
                     */

                    return Msg;
                })();

                v1.MsgConnectionOpenInit = (function() {

                    /**
                     * Properties of a MsgConnectionOpenInit.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenInit
                     * @property {string|null} [client_id] MsgConnectionOpenInit client_id
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] MsgConnectionOpenInit counterparty
                     * @property {ibc.core.connection.v1.IVersion|null} [version] MsgConnectionOpenInit version
                     * @property {Long|null} [delay_period] MsgConnectionOpenInit delay_period
                     * @property {string|null} [signer] MsgConnectionOpenInit signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenInit.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenInit.
                     * @implements IMsgConnectionOpenInit
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit=} [properties] Properties to set
                     */
                    function MsgConnectionOpenInit(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenInit client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.client_id = "";

                    /**
                     * MsgConnectionOpenInit counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.counterparty = null;

                    /**
                     * MsgConnectionOpenInit version.
                     * @member {ibc.core.connection.v1.IVersion|null|undefined} version
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.version = null;

                    /**
                     * MsgConnectionOpenInit delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgConnectionOpenInit signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     */
                    MsgConnectionOpenInit.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenInit message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInit.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} message MsgConnectionOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            $root.ibc.core.connection.v1.Version.encode(message.version, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.delay_period);
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenInit message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInit} message MsgConnectionOpenInit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenInit message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInit} MsgConnectionOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenInit();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.version = $root.ibc.core.connection.v1.Version.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.delay_period = reader.uint64();
                                break;
                            case 5:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenInit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInit} MsgConnectionOpenInit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenInit message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenInit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.version != null && message.hasOwnProperty("version")) {
                            let error = $root.ibc.core.connection.v1.Version.verify(message.version);
                            if (error)
                                return "version." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenInit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInit} MsgConnectionOpenInit
                     */
                    MsgConnectionOpenInit.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenInit)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenInit();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenInit.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.version != null) {
                            if (typeof object.version !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenInit.version: object expected");
                            message.version = $root.ibc.core.connection.v1.Version.fromObject(object.version);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenInit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenInit} message MsgConnectionOpenInit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenInit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.counterparty = null;
                            object.version = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = $root.ibc.core.connection.v1.Version.toObject(message.version, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenInit to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenInit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenInit;
                })();

                v1.MsgConnectionOpenInitResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenInitResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenInitResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenInitResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenInitResponse.
                     * @implements IMsgConnectionOpenInitResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenInitResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenInitResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInitResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse} message MsgConnectionOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInitResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenInitResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenInitResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenInitResponse} message MsgConnectionOpenInitResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenInitResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenInitResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInitResponse} MsgConnectionOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInitResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenInitResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInitResponse} MsgConnectionOpenInitResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenInitResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenInitResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenInitResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenInitResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenInitResponse} MsgConnectionOpenInitResponse
                     */
                    MsgConnectionOpenInitResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenInitResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenInitResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenInitResponse} message MsgConnectionOpenInitResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenInitResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenInitResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenInitResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenInitResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenInitResponse;
                })();

                v1.MsgConnectionOpenTry = (function() {

                    /**
                     * Properties of a MsgConnectionOpenTry.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenTry
                     * @property {string|null} [client_id] MsgConnectionOpenTry client_id
                     * @property {string|null} [previous_connection_id] MsgConnectionOpenTry previous_connection_id
                     * @property {google.protobuf.IAny|null} [client_state] MsgConnectionOpenTry client_state
                     * @property {ibc.core.connection.v1.ICounterparty|null} [counterparty] MsgConnectionOpenTry counterparty
                     * @property {Long|null} [delay_period] MsgConnectionOpenTry delay_period
                     * @property {Array.<ibc.core.connection.v1.IVersion>|null} [counterparty_versions] MsgConnectionOpenTry counterparty_versions
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenTry proof_height
                     * @property {Uint8Array|null} [proof_init] MsgConnectionOpenTry proof_init
                     * @property {Uint8Array|null} [proof_client] MsgConnectionOpenTry proof_client
                     * @property {Uint8Array|null} [proof_consensus] MsgConnectionOpenTry proof_consensus
                     * @property {ibc.core.client.v1.IHeight|null} [consensus_height] MsgConnectionOpenTry consensus_height
                     * @property {string|null} [signer] MsgConnectionOpenTry signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenTry.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenTry.
                     * @implements IMsgConnectionOpenTry
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry=} [properties] Properties to set
                     */
                    function MsgConnectionOpenTry(properties) {
                        this.counterparty_versions = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenTry client_id.
                     * @member {string} client_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.client_id = "";

                    /**
                     * MsgConnectionOpenTry previous_connection_id.
                     * @member {string} previous_connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.previous_connection_id = "";

                    /**
                     * MsgConnectionOpenTry client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.client_state = null;

                    /**
                     * MsgConnectionOpenTry counterparty.
                     * @member {ibc.core.connection.v1.ICounterparty|null|undefined} counterparty
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.counterparty = null;

                    /**
                     * MsgConnectionOpenTry delay_period.
                     * @member {Long} delay_period
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.delay_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * MsgConnectionOpenTry counterparty_versions.
                     * @member {Array.<ibc.core.connection.v1.IVersion>} counterparty_versions
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.counterparty_versions = $util.emptyArray;

                    /**
                     * MsgConnectionOpenTry proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenTry proof_init.
                     * @member {Uint8Array} proof_init
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_init = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry proof_client.
                     * @member {Uint8Array} proof_client
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_client = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry proof_consensus.
                     * @member {Uint8Array} proof_consensus
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.proof_consensus = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenTry consensus_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} consensus_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.consensus_height = null;

                    /**
                     * MsgConnectionOpenTry signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     */
                    MsgConnectionOpenTry.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenTry message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTry.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} message MsgConnectionOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTry.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.previous_connection_id != null && Object.hasOwnProperty.call(message, "previous_connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.previous_connection_id);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                            $root.ibc.core.connection.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.delay_period != null && Object.hasOwnProperty.call(message, "delay_period"))
                            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.delay_period);
                        if (message.counterparty_versions != null && message.counterparty_versions.length)
                            for (let i = 0; i < message.counterparty_versions.length; ++i)
                                $root.ibc.core.connection.v1.Version.encode(message.counterparty_versions[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.proof_init != null && Object.hasOwnProperty.call(message, "proof_init"))
                            writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.proof_init);
                        if (message.proof_client != null && Object.hasOwnProperty.call(message, "proof_client"))
                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.proof_client);
                        if (message.proof_consensus != null && Object.hasOwnProperty.call(message, "proof_consensus"))
                            writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.proof_consensus);
                        if (message.consensus_height != null && Object.hasOwnProperty.call(message, "consensus_height"))
                            $root.ibc.core.client.v1.Height.encode(message.consensus_height, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenTry message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTry.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTry} message MsgConnectionOpenTry message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTry.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenTry message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTry} MsgConnectionOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTry.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenTry();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.previous_connection_id = reader.string();
                                break;
                            case 3:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.counterparty = $root.ibc.core.connection.v1.Counterparty.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.delay_period = reader.uint64();
                                break;
                            case 6:
                                if (!(message.counterparty_versions && message.counterparty_versions.length))
                                    message.counterparty_versions = [];
                                message.counterparty_versions.push($root.ibc.core.connection.v1.Version.decode(reader, reader.uint32()));
                                break;
                            case 7:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 8:
                                message.proof_init = reader.bytes();
                                break;
                            case 9:
                                message.proof_client = reader.bytes();
                                break;
                            case 10:
                                message.proof_consensus = reader.bytes();
                                break;
                            case 11:
                                message.consensus_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 12:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenTry message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTry} MsgConnectionOpenTry
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTry.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenTry message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenTry.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.previous_connection_id != null && message.hasOwnProperty("previous_connection_id"))
                            if (!$util.isString(message.previous_connection_id))
                                return "previous_connection_id: string expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                            let error = $root.ibc.core.connection.v1.Counterparty.verify(message.counterparty);
                            if (error)
                                return "counterparty." + error;
                        }
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (!$util.isInteger(message.delay_period) && !(message.delay_period && $util.isInteger(message.delay_period.low) && $util.isInteger(message.delay_period.high)))
                                return "delay_period: integer|Long expected";
                        if (message.counterparty_versions != null && message.hasOwnProperty("counterparty_versions")) {
                            if (!Array.isArray(message.counterparty_versions))
                                return "counterparty_versions: array expected";
                            for (let i = 0; i < message.counterparty_versions.length; ++i) {
                                let error = $root.ibc.core.connection.v1.Version.verify(message.counterparty_versions[i]);
                                if (error)
                                    return "counterparty_versions." + error;
                            }
                        }
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            if (!(message.proof_init && typeof message.proof_init.length === "number" || $util.isString(message.proof_init)))
                                return "proof_init: buffer expected";
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            if (!(message.proof_client && typeof message.proof_client.length === "number" || $util.isString(message.proof_client)))
                                return "proof_client: buffer expected";
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            if (!(message.proof_consensus && typeof message.proof_consensus.length === "number" || $util.isString(message.proof_consensus)))
                                return "proof_consensus: buffer expected";
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.consensus_height);
                            if (error)
                                return "consensus_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenTry message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTry} MsgConnectionOpenTry
                     */
                    MsgConnectionOpenTry.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenTry)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenTry();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.previous_connection_id != null)
                            message.previous_connection_id = String(object.previous_connection_id);
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.counterparty != null) {
                            if (typeof object.counterparty !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.counterparty: object expected");
                            message.counterparty = $root.ibc.core.connection.v1.Counterparty.fromObject(object.counterparty);
                        }
                        if (object.delay_period != null)
                            if ($util.Long)
                                (message.delay_period = $util.Long.fromValue(object.delay_period)).unsigned = true;
                            else if (typeof object.delay_period === "string")
                                message.delay_period = parseInt(object.delay_period, 10);
                            else if (typeof object.delay_period === "number")
                                message.delay_period = object.delay_period;
                            else if (typeof object.delay_period === "object")
                                message.delay_period = new $util.LongBits(object.delay_period.low >>> 0, object.delay_period.high >>> 0).toNumber(true);
                        if (object.counterparty_versions) {
                            if (!Array.isArray(object.counterparty_versions))
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions: array expected");
                            message.counterparty_versions = [];
                            for (let i = 0; i < object.counterparty_versions.length; ++i) {
                                if (typeof object.counterparty_versions[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions: object expected");
                                message.counterparty_versions[i] = $root.ibc.core.connection.v1.Version.fromObject(object.counterparty_versions[i]);
                            }
                        }
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.proof_init != null)
                            if (typeof object.proof_init === "string")
                                $util.base64.decode(object.proof_init, message.proof_init = $util.newBuffer($util.base64.length(object.proof_init)), 0);
                            else if (object.proof_init.length)
                                message.proof_init = object.proof_init;
                        if (object.proof_client != null)
                            if (typeof object.proof_client === "string")
                                $util.base64.decode(object.proof_client, message.proof_client = $util.newBuffer($util.base64.length(object.proof_client)), 0);
                            else if (object.proof_client.length)
                                message.proof_client = object.proof_client;
                        if (object.proof_consensus != null)
                            if (typeof object.proof_consensus === "string")
                                $util.base64.decode(object.proof_consensus, message.proof_consensus = $util.newBuffer($util.base64.length(object.proof_consensus)), 0);
                            else if (object.proof_consensus.length)
                                message.proof_consensus = object.proof_consensus;
                        if (object.consensus_height != null) {
                            if (typeof object.consensus_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height: object expected");
                            message.consensus_height = $root.ibc.core.client.v1.Height.fromObject(object.consensus_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenTry message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenTry} message MsgConnectionOpenTry
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenTry.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.counterparty_versions = [];
                        if (options.defaults) {
                            object.client_id = "";
                            object.previous_connection_id = "";
                            object.client_state = null;
                            object.counterparty = null;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.delay_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.delay_period = options.longs === String ? "0" : 0;
                            object.proof_height = null;
                            if (options.bytes === String)
                                object.proof_init = "";
                            else {
                                object.proof_init = [];
                                if (options.bytes !== Array)
                                    object.proof_init = $util.newBuffer(object.proof_init);
                            }
                            if (options.bytes === String)
                                object.proof_client = "";
                            else {
                                object.proof_client = [];
                                if (options.bytes !== Array)
                                    object.proof_client = $util.newBuffer(object.proof_client);
                            }
                            if (options.bytes === String)
                                object.proof_consensus = "";
                            else {
                                object.proof_consensus = [];
                                if (options.bytes !== Array)
                                    object.proof_consensus = $util.newBuffer(object.proof_consensus);
                            }
                            object.consensus_height = null;
                            object.signer = "";
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.previous_connection_id != null && message.hasOwnProperty("previous_connection_id"))
                            object.previous_connection_id = message.previous_connection_id;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                            object.counterparty = $root.ibc.core.connection.v1.Counterparty.toObject(message.counterparty, options);
                        if (message.delay_period != null && message.hasOwnProperty("delay_period"))
                            if (typeof message.delay_period === "number")
                                object.delay_period = options.longs === String ? String(message.delay_period) : message.delay_period;
                            else
                                object.delay_period = options.longs === String ? $util.Long.prototype.toString.call(message.delay_period) : options.longs === Number ? new $util.LongBits(message.delay_period.low >>> 0, message.delay_period.high >>> 0).toNumber(true) : message.delay_period;
                        if (message.counterparty_versions && message.counterparty_versions.length) {
                            object.counterparty_versions = [];
                            for (let j = 0; j < message.counterparty_versions.length; ++j)
                                object.counterparty_versions[j] = $root.ibc.core.connection.v1.Version.toObject(message.counterparty_versions[j], options);
                        }
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.proof_init != null && message.hasOwnProperty("proof_init"))
                            object.proof_init = options.bytes === String ? $util.base64.encode(message.proof_init, 0, message.proof_init.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_init) : message.proof_init;
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            object.proof_client = options.bytes === String ? $util.base64.encode(message.proof_client, 0, message.proof_client.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_client) : message.proof_client;
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            object.proof_consensus = options.bytes === String ? $util.base64.encode(message.proof_consensus, 0, message.proof_consensus.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_consensus) : message.proof_consensus;
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height"))
                            object.consensus_height = $root.ibc.core.client.v1.Height.toObject(message.consensus_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenTry to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTry
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenTry.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenTry;
                })();

                v1.MsgConnectionOpenTryResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenTryResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenTryResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenTryResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenTryResponse.
                     * @implements IMsgConnectionOpenTryResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenTryResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenTryResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTryResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse} message MsgConnectionOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTryResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenTryResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenTryResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenTryResponse} message MsgConnectionOpenTryResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenTryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenTryResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTryResponse} MsgConnectionOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTryResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenTryResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTryResponse} MsgConnectionOpenTryResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenTryResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenTryResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenTryResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenTryResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenTryResponse} MsgConnectionOpenTryResponse
                     */
                    MsgConnectionOpenTryResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenTryResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenTryResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenTryResponse} message MsgConnectionOpenTryResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenTryResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenTryResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenTryResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenTryResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenTryResponse;
                })();

                v1.MsgConnectionOpenAck = (function() {

                    /**
                     * Properties of a MsgConnectionOpenAck.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenAck
                     * @property {string|null} [connection_id] MsgConnectionOpenAck connection_id
                     * @property {string|null} [counterparty_connection_id] MsgConnectionOpenAck counterparty_connection_id
                     * @property {ibc.core.connection.v1.IVersion|null} [version] MsgConnectionOpenAck version
                     * @property {google.protobuf.IAny|null} [client_state] MsgConnectionOpenAck client_state
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenAck proof_height
                     * @property {Uint8Array|null} [proof_try] MsgConnectionOpenAck proof_try
                     * @property {Uint8Array|null} [proof_client] MsgConnectionOpenAck proof_client
                     * @property {Uint8Array|null} [proof_consensus] MsgConnectionOpenAck proof_consensus
                     * @property {ibc.core.client.v1.IHeight|null} [consensus_height] MsgConnectionOpenAck consensus_height
                     * @property {string|null} [signer] MsgConnectionOpenAck signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenAck.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenAck.
                     * @implements IMsgConnectionOpenAck
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck=} [properties] Properties to set
                     */
                    function MsgConnectionOpenAck(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenAck connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.connection_id = "";

                    /**
                     * MsgConnectionOpenAck counterparty_connection_id.
                     * @member {string} counterparty_connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.counterparty_connection_id = "";

                    /**
                     * MsgConnectionOpenAck version.
                     * @member {ibc.core.connection.v1.IVersion|null|undefined} version
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.version = null;

                    /**
                     * MsgConnectionOpenAck client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.client_state = null;

                    /**
                     * MsgConnectionOpenAck proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenAck proof_try.
                     * @member {Uint8Array} proof_try
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_try = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck proof_client.
                     * @member {Uint8Array} proof_client
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_client = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck proof_consensus.
                     * @member {Uint8Array} proof_consensus
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.proof_consensus = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenAck consensus_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} consensus_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.consensus_height = null;

                    /**
                     * MsgConnectionOpenAck signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     */
                    MsgConnectionOpenAck.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenAck message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAck.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} message MsgConnectionOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAck.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        if (message.counterparty_connection_id != null && Object.hasOwnProperty.call(message, "counterparty_connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.counterparty_connection_id);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            $root.ibc.core.connection.v1.Version.encode(message.version, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.proof_try != null && Object.hasOwnProperty.call(message, "proof_try"))
                            writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.proof_try);
                        if (message.proof_client != null && Object.hasOwnProperty.call(message, "proof_client"))
                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.proof_client);
                        if (message.proof_consensus != null && Object.hasOwnProperty.call(message, "proof_consensus"))
                            writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.proof_consensus);
                        if (message.consensus_height != null && Object.hasOwnProperty.call(message, "consensus_height"))
                            $root.ibc.core.client.v1.Height.encode(message.consensus_height, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenAck message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAck.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAck} message MsgConnectionOpenAck message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAck.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenAck message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAck} MsgConnectionOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAck.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenAck();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            case 2:
                                message.counterparty_connection_id = reader.string();
                                break;
                            case 3:
                                message.version = $root.ibc.core.connection.v1.Version.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.proof_try = reader.bytes();
                                break;
                            case 7:
                                message.proof_client = reader.bytes();
                                break;
                            case 8:
                                message.proof_consensus = reader.bytes();
                                break;
                            case 9:
                                message.consensus_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 10:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenAck message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAck} MsgConnectionOpenAck
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAck.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenAck message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenAck.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.counterparty_connection_id != null && message.hasOwnProperty("counterparty_connection_id"))
                            if (!$util.isString(message.counterparty_connection_id))
                                return "counterparty_connection_id: string expected";
                        if (message.version != null && message.hasOwnProperty("version")) {
                            let error = $root.ibc.core.connection.v1.Version.verify(message.version);
                            if (error)
                                return "version." + error;
                        }
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            if (!(message.proof_try && typeof message.proof_try.length === "number" || $util.isString(message.proof_try)))
                                return "proof_try: buffer expected";
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            if (!(message.proof_client && typeof message.proof_client.length === "number" || $util.isString(message.proof_client)))
                                return "proof_client: buffer expected";
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            if (!(message.proof_consensus && typeof message.proof_consensus.length === "number" || $util.isString(message.proof_consensus)))
                                return "proof_consensus: buffer expected";
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.consensus_height);
                            if (error)
                                return "consensus_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenAck message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAck} MsgConnectionOpenAck
                     */
                    MsgConnectionOpenAck.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenAck)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenAck();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.counterparty_connection_id != null)
                            message.counterparty_connection_id = String(object.counterparty_connection_id);
                        if (object.version != null) {
                            if (typeof object.version !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.version: object expected");
                            message.version = $root.ibc.core.connection.v1.Version.fromObject(object.version);
                        }
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.proof_try != null)
                            if (typeof object.proof_try === "string")
                                $util.base64.decode(object.proof_try, message.proof_try = $util.newBuffer($util.base64.length(object.proof_try)), 0);
                            else if (object.proof_try.length)
                                message.proof_try = object.proof_try;
                        if (object.proof_client != null)
                            if (typeof object.proof_client === "string")
                                $util.base64.decode(object.proof_client, message.proof_client = $util.newBuffer($util.base64.length(object.proof_client)), 0);
                            else if (object.proof_client.length)
                                message.proof_client = object.proof_client;
                        if (object.proof_consensus != null)
                            if (typeof object.proof_consensus === "string")
                                $util.base64.decode(object.proof_consensus, message.proof_consensus = $util.newBuffer($util.base64.length(object.proof_consensus)), 0);
                            else if (object.proof_consensus.length)
                                message.proof_consensus = object.proof_consensus;
                        if (object.consensus_height != null) {
                            if (typeof object.consensus_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height: object expected");
                            message.consensus_height = $root.ibc.core.client.v1.Height.fromObject(object.consensus_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenAck message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenAck} message MsgConnectionOpenAck
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenAck.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection_id = "";
                            object.counterparty_connection_id = "";
                            object.version = null;
                            object.client_state = null;
                            object.proof_height = null;
                            if (options.bytes === String)
                                object.proof_try = "";
                            else {
                                object.proof_try = [];
                                if (options.bytes !== Array)
                                    object.proof_try = $util.newBuffer(object.proof_try);
                            }
                            if (options.bytes === String)
                                object.proof_client = "";
                            else {
                                object.proof_client = [];
                                if (options.bytes !== Array)
                                    object.proof_client = $util.newBuffer(object.proof_client);
                            }
                            if (options.bytes === String)
                                object.proof_consensus = "";
                            else {
                                object.proof_consensus = [];
                                if (options.bytes !== Array)
                                    object.proof_consensus = $util.newBuffer(object.proof_consensus);
                            }
                            object.consensus_height = null;
                            object.signer = "";
                        }
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.counterparty_connection_id != null && message.hasOwnProperty("counterparty_connection_id"))
                            object.counterparty_connection_id = message.counterparty_connection_id;
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = $root.ibc.core.connection.v1.Version.toObject(message.version, options);
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.proof_try != null && message.hasOwnProperty("proof_try"))
                            object.proof_try = options.bytes === String ? $util.base64.encode(message.proof_try, 0, message.proof_try.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_try) : message.proof_try;
                        if (message.proof_client != null && message.hasOwnProperty("proof_client"))
                            object.proof_client = options.bytes === String ? $util.base64.encode(message.proof_client, 0, message.proof_client.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_client) : message.proof_client;
                        if (message.proof_consensus != null && message.hasOwnProperty("proof_consensus"))
                            object.proof_consensus = options.bytes === String ? $util.base64.encode(message.proof_consensus, 0, message.proof_consensus.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_consensus) : message.proof_consensus;
                        if (message.consensus_height != null && message.hasOwnProperty("consensus_height"))
                            object.consensus_height = $root.ibc.core.client.v1.Height.toObject(message.consensus_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenAck to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAck
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenAck.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenAck;
                })();

                v1.MsgConnectionOpenAckResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenAckResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenAckResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenAckResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenAckResponse.
                     * @implements IMsgConnectionOpenAckResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenAckResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenAckResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAckResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse} message MsgConnectionOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAckResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenAckResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenAckResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenAckResponse} message MsgConnectionOpenAckResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenAckResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenAckResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAckResponse} MsgConnectionOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAckResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenAckResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAckResponse} MsgConnectionOpenAckResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenAckResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenAckResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenAckResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenAckResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenAckResponse} MsgConnectionOpenAckResponse
                     */
                    MsgConnectionOpenAckResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenAckResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenAckResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenAckResponse} message MsgConnectionOpenAckResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenAckResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenAckResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenAckResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenAckResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenAckResponse;
                })();

                v1.MsgConnectionOpenConfirm = (function() {

                    /**
                     * Properties of a MsgConnectionOpenConfirm.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenConfirm
                     * @property {string|null} [connection_id] MsgConnectionOpenConfirm connection_id
                     * @property {Uint8Array|null} [proof_ack] MsgConnectionOpenConfirm proof_ack
                     * @property {ibc.core.client.v1.IHeight|null} [proof_height] MsgConnectionOpenConfirm proof_height
                     * @property {string|null} [signer] MsgConnectionOpenConfirm signer
                     */

                    /**
                     * Constructs a new MsgConnectionOpenConfirm.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenConfirm.
                     * @implements IMsgConnectionOpenConfirm
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm=} [properties] Properties to set
                     */
                    function MsgConnectionOpenConfirm(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * MsgConnectionOpenConfirm connection_id.
                     * @member {string} connection_id
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.connection_id = "";

                    /**
                     * MsgConnectionOpenConfirm proof_ack.
                     * @member {Uint8Array} proof_ack
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.proof_ack = $util.newBuffer([]);

                    /**
                     * MsgConnectionOpenConfirm proof_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} proof_height
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.proof_height = null;

                    /**
                     * MsgConnectionOpenConfirm signer.
                     * @member {string} signer
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     */
                    MsgConnectionOpenConfirm.prototype.signer = "";

                    /**
                     * Encodes the specified MsgConnectionOpenConfirm message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirm.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} message MsgConnectionOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirm.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                        if (message.proof_ack != null && Object.hasOwnProperty.call(message, "proof_ack"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.proof_ack);
                        if (message.proof_height != null && Object.hasOwnProperty.call(message, "proof_height"))
                            $root.ibc.core.client.v1.Height.encode(message.proof_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signer != null && Object.hasOwnProperty.call(message, "signer"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.signer);
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenConfirm message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirm.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirm} message MsgConnectionOpenConfirm message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirm.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirm message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirm} MsgConnectionOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirm.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirm();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.connection_id = reader.string();
                                break;
                            case 2:
                                message.proof_ack = reader.bytes();
                                break;
                            case 3:
                                message.proof_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signer = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirm message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirm} MsgConnectionOpenConfirm
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirm.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenConfirm message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenConfirm.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            if (!(message.proof_ack && typeof message.proof_ack.length === "number" || $util.isString(message.proof_ack)))
                                return "proof_ack: buffer expected";
                        if (message.proof_height != null && message.hasOwnProperty("proof_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.proof_height);
                            if (error)
                                return "proof_height." + error;
                        }
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            if (!$util.isString(message.signer))
                                return "signer: string expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenConfirm message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirm} MsgConnectionOpenConfirm
                     */
                    MsgConnectionOpenConfirm.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenConfirm)
                            return object;
                        let message = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirm();
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.proof_ack != null)
                            if (typeof object.proof_ack === "string")
                                $util.base64.decode(object.proof_ack, message.proof_ack = $util.newBuffer($util.base64.length(object.proof_ack)), 0);
                            else if (object.proof_ack.length)
                                message.proof_ack = object.proof_ack;
                        if (object.proof_height != null) {
                            if (typeof object.proof_height !== "object")
                                throw TypeError(".ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height: object expected");
                            message.proof_height = $root.ibc.core.client.v1.Height.fromObject(object.proof_height);
                        }
                        if (object.signer != null)
                            message.signer = String(object.signer);
                        return message;
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenConfirm message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenConfirm} message MsgConnectionOpenConfirm
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenConfirm.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.connection_id = "";
                            if (options.bytes === String)
                                object.proof_ack = "";
                            else {
                                object.proof_ack = [];
                                if (options.bytes !== Array)
                                    object.proof_ack = $util.newBuffer(object.proof_ack);
                            }
                            object.proof_height = null;
                            object.signer = "";
                        }
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.proof_ack != null && message.hasOwnProperty("proof_ack"))
                            object.proof_ack = options.bytes === String ? $util.base64.encode(message.proof_ack, 0, message.proof_ack.length) : options.bytes === Array ? Array.prototype.slice.call(message.proof_ack) : message.proof_ack;
                        if (message.proof_height != null && message.hasOwnProperty("proof_height"))
                            object.proof_height = $root.ibc.core.client.v1.Height.toObject(message.proof_height, options);
                        if (message.signer != null && message.hasOwnProperty("signer"))
                            object.signer = message.signer;
                        return object;
                    };

                    /**
                     * Converts this MsgConnectionOpenConfirm to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirm
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenConfirm.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenConfirm;
                })();

                v1.MsgConnectionOpenConfirmResponse = (function() {

                    /**
                     * Properties of a MsgConnectionOpenConfirmResponse.
                     * @memberof ibc.core.connection.v1
                     * @interface IMsgConnectionOpenConfirmResponse
                     */

                    /**
                     * Constructs a new MsgConnectionOpenConfirmResponse.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a MsgConnectionOpenConfirmResponse.
                     * @implements IMsgConnectionOpenConfirmResponse
                     * @constructor
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse=} [properties] Properties to set
                     */
                    function MsgConnectionOpenConfirmResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Encodes the specified MsgConnectionOpenConfirmResponse message. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse} message MsgConnectionOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirmResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };

                    /**
                     * Encodes the specified MsgConnectionOpenConfirmResponse message, length delimited. Does not implicitly {@link ibc.core.connection.v1.MsgConnectionOpenConfirmResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {ibc.core.connection.v1.IMsgConnectionOpenConfirmResponse} message MsgConnectionOpenConfirmResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgConnectionOpenConfirmResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirmResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} MsgConnectionOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirmResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a MsgConnectionOpenConfirmResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} MsgConnectionOpenConfirmResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgConnectionOpenConfirmResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a MsgConnectionOpenConfirmResponse message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgConnectionOpenConfirmResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };

                    /**
                     * Creates a MsgConnectionOpenConfirmResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} MsgConnectionOpenConfirmResponse
                     */
                    MsgConnectionOpenConfirmResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse)
                            return object;
                        return new $root.ibc.core.connection.v1.MsgConnectionOpenConfirmResponse();
                    };

                    /**
                     * Creates a plain object from a MsgConnectionOpenConfirmResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @static
                     * @param {ibc.core.connection.v1.MsgConnectionOpenConfirmResponse} message MsgConnectionOpenConfirmResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgConnectionOpenConfirmResponse.toObject = function toObject() {
                        return {};
                    };

                    /**
                     * Converts this MsgConnectionOpenConfirmResponse to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.MsgConnectionOpenConfirmResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgConnectionOpenConfirmResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return MsgConnectionOpenConfirmResponse;
                })();

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.connection.v1
                     * @interface IGenesisState
                     * @property {Array.<ibc.core.connection.v1.IIdentifiedConnection>|null} [connections] GenesisState connections
                     * @property {Array.<ibc.core.connection.v1.IConnectionPaths>|null} [client_connection_paths] GenesisState client_connection_paths
                     * @property {Long|null} [next_connection_sequence] GenesisState next_connection_sequence
                     * @property {ibc.core.connection.v1.IParams|null} [params] GenesisState params
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.connection.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.connection.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.connections = [];
                        this.client_connection_paths = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState connections.
                     * @member {Array.<ibc.core.connection.v1.IIdentifiedConnection>} connections
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.connections = $util.emptyArray;

                    /**
                     * GenesisState client_connection_paths.
                     * @member {Array.<ibc.core.connection.v1.IConnectionPaths>} client_connection_paths
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.client_connection_paths = $util.emptyArray;

                    /**
                     * GenesisState next_connection_sequence.
                     * @member {Long} next_connection_sequence
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.next_connection_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * GenesisState params.
                     * @member {ibc.core.connection.v1.IParams|null|undefined} params
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.connection.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {ibc.core.connection.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.connections != null && message.connections.length)
                            for (let i = 0; i < message.connections.length; ++i)
                                $root.ibc.core.connection.v1.IdentifiedConnection.encode(message.connections[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.client_connection_paths != null && message.client_connection_paths.length)
                            for (let i = 0; i < message.client_connection_paths.length; ++i)
                                $root.ibc.core.connection.v1.ConnectionPaths.encode(message.client_connection_paths[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.next_connection_sequence != null && Object.hasOwnProperty.call(message, "next_connection_sequence"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.next_connection_sequence);
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.ibc.core.connection.v1.Params.encode(message.params, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.connection.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {ibc.core.connection.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.connection.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.connection.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.connections && message.connections.length))
                                    message.connections = [];
                                message.connections.push($root.ibc.core.connection.v1.IdentifiedConnection.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                if (!(message.client_connection_paths && message.client_connection_paths.length))
                                    message.client_connection_paths = [];
                                message.client_connection_paths.push($root.ibc.core.connection.v1.ConnectionPaths.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.next_connection_sequence = reader.uint64();
                                break;
                            case 4:
                                message.params = $root.ibc.core.connection.v1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.connection.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.connections != null && message.hasOwnProperty("connections")) {
                            if (!Array.isArray(message.connections))
                                return "connections: array expected";
                            for (let i = 0; i < message.connections.length; ++i) {
                                let error = $root.ibc.core.connection.v1.IdentifiedConnection.verify(message.connections[i]);
                                if (error)
                                    return "connections." + error;
                            }
                        }
                        if (message.client_connection_paths != null && message.hasOwnProperty("client_connection_paths")) {
                            if (!Array.isArray(message.client_connection_paths))
                                return "client_connection_paths: array expected";
                            for (let i = 0; i < message.client_connection_paths.length; ++i) {
                                let error = $root.ibc.core.connection.v1.ConnectionPaths.verify(message.client_connection_paths[i]);
                                if (error)
                                    return "client_connection_paths." + error;
                            }
                        }
                        if (message.next_connection_sequence != null && message.hasOwnProperty("next_connection_sequence"))
                            if (!$util.isInteger(message.next_connection_sequence) && !(message.next_connection_sequence && $util.isInteger(message.next_connection_sequence.low) && $util.isInteger(message.next_connection_sequence.high)))
                                return "next_connection_sequence: integer|Long expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            let error = $root.ibc.core.connection.v1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.connection.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.connection.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.connection.v1.GenesisState();
                        if (object.connections) {
                            if (!Array.isArray(object.connections))
                                throw TypeError(".ibc.core.connection.v1.GenesisState.connections: array expected");
                            message.connections = [];
                            for (let i = 0; i < object.connections.length; ++i) {
                                if (typeof object.connections[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.GenesisState.connections: object expected");
                                message.connections[i] = $root.ibc.core.connection.v1.IdentifiedConnection.fromObject(object.connections[i]);
                            }
                        }
                        if (object.client_connection_paths) {
                            if (!Array.isArray(object.client_connection_paths))
                                throw TypeError(".ibc.core.connection.v1.GenesisState.client_connection_paths: array expected");
                            message.client_connection_paths = [];
                            for (let i = 0; i < object.client_connection_paths.length; ++i) {
                                if (typeof object.client_connection_paths[i] !== "object")
                                    throw TypeError(".ibc.core.connection.v1.GenesisState.client_connection_paths: object expected");
                                message.client_connection_paths[i] = $root.ibc.core.connection.v1.ConnectionPaths.fromObject(object.client_connection_paths[i]);
                            }
                        }
                        if (object.next_connection_sequence != null)
                            if ($util.Long)
                                (message.next_connection_sequence = $util.Long.fromValue(object.next_connection_sequence)).unsigned = true;
                            else if (typeof object.next_connection_sequence === "string")
                                message.next_connection_sequence = parseInt(object.next_connection_sequence, 10);
                            else if (typeof object.next_connection_sequence === "number")
                                message.next_connection_sequence = object.next_connection_sequence;
                            else if (typeof object.next_connection_sequence === "object")
                                message.next_connection_sequence = new $util.LongBits(object.next_connection_sequence.low >>> 0, object.next_connection_sequence.high >>> 0).toNumber(true);
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".ibc.core.connection.v1.GenesisState.params: object expected");
                            message.params = $root.ibc.core.connection.v1.Params.fromObject(object.params);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @static
                     * @param {ibc.core.connection.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.connections = [];
                            object.client_connection_paths = [];
                        }
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_connection_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_connection_sequence = options.longs === String ? "0" : 0;
                            object.params = null;
                        }
                        if (message.connections && message.connections.length) {
                            object.connections = [];
                            for (let j = 0; j < message.connections.length; ++j)
                                object.connections[j] = $root.ibc.core.connection.v1.IdentifiedConnection.toObject(message.connections[j], options);
                        }
                        if (message.client_connection_paths && message.client_connection_paths.length) {
                            object.client_connection_paths = [];
                            for (let j = 0; j < message.client_connection_paths.length; ++j)
                                object.client_connection_paths[j] = $root.ibc.core.connection.v1.ConnectionPaths.toObject(message.client_connection_paths[j], options);
                        }
                        if (message.next_connection_sequence != null && message.hasOwnProperty("next_connection_sequence"))
                            if (typeof message.next_connection_sequence === "number")
                                object.next_connection_sequence = options.longs === String ? String(message.next_connection_sequence) : message.next_connection_sequence;
                            else
                                object.next_connection_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.next_connection_sequence) : options.longs === Number ? new $util.LongBits(message.next_connection_sequence.low >>> 0, message.next_connection_sequence.high >>> 0).toNumber(true) : message.next_connection_sequence;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.ibc.core.connection.v1.Params.toObject(message.params, options);
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.connection.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                return v1;
            })();

            return connection;
        })();

        core.types = (function() {

            /**
             * Namespace types.
             * @memberof ibc.core
             * @namespace
             */
            const types = {};

            types.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.core.types
                 * @namespace
                 */
                const v1 = {};

                v1.GenesisState = (function() {

                    /**
                     * Properties of a GenesisState.
                     * @memberof ibc.core.types.v1
                     * @interface IGenesisState
                     * @property {ibc.core.client.v1.IGenesisState|null} [client_genesis] GenesisState client_genesis
                     * @property {ibc.core.connection.v1.IGenesisState|null} [connection_genesis] GenesisState connection_genesis
                     * @property {ibc.core.channel.v1.IGenesisState|null} [channel_genesis] GenesisState channel_genesis
                     */

                    /**
                     * Constructs a new GenesisState.
                     * @memberof ibc.core.types.v1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {ibc.core.types.v1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GenesisState client_genesis.
                     * @member {ibc.core.client.v1.IGenesisState|null|undefined} client_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.client_genesis = null;

                    /**
                     * GenesisState connection_genesis.
                     * @member {ibc.core.connection.v1.IGenesisState|null|undefined} connection_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.connection_genesis = null;

                    /**
                     * GenesisState channel_genesis.
                     * @member {ibc.core.channel.v1.IGenesisState|null|undefined} channel_genesis
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.channel_genesis = null;

                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link ibc.core.types.v1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {ibc.core.types.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_genesis != null && Object.hasOwnProperty.call(message, "client_genesis"))
                            $root.ibc.core.client.v1.GenesisState.encode(message.client_genesis, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.connection_genesis != null && Object.hasOwnProperty.call(message, "connection_genesis"))
                            $root.ibc.core.connection.v1.GenesisState.encode(message.connection_genesis, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.channel_genesis != null && Object.hasOwnProperty.call(message, "channel_genesis"))
                            $root.ibc.core.channel.v1.GenesisState.encode(message.channel_genesis, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link ibc.core.types.v1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {ibc.core.types.v1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.core.types.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.types.v1.GenesisState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_genesis = $root.ibc.core.client.v1.GenesisState.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.connection_genesis = $root.ibc.core.connection.v1.GenesisState.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.channel_genesis = $root.ibc.core.channel.v1.GenesisState.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.core.types.v1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_genesis != null && message.hasOwnProperty("client_genesis")) {
                            let error = $root.ibc.core.client.v1.GenesisState.verify(message.client_genesis);
                            if (error)
                                return "client_genesis." + error;
                        }
                        if (message.connection_genesis != null && message.hasOwnProperty("connection_genesis")) {
                            let error = $root.ibc.core.connection.v1.GenesisState.verify(message.connection_genesis);
                            if (error)
                                return "connection_genesis." + error;
                        }
                        if (message.channel_genesis != null && message.hasOwnProperty("channel_genesis")) {
                            let error = $root.ibc.core.channel.v1.GenesisState.verify(message.channel_genesis);
                            if (error)
                                return "channel_genesis." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.core.types.v1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.core.types.v1.GenesisState)
                            return object;
                        let message = new $root.ibc.core.types.v1.GenesisState();
                        if (object.client_genesis != null) {
                            if (typeof object.client_genesis !== "object")
                                throw TypeError(".ibc.core.types.v1.GenesisState.client_genesis: object expected");
                            message.client_genesis = $root.ibc.core.client.v1.GenesisState.fromObject(object.client_genesis);
                        }
                        if (object.connection_genesis != null) {
                            if (typeof object.connection_genesis !== "object")
                                throw TypeError(".ibc.core.types.v1.GenesisState.connection_genesis: object expected");
                            message.connection_genesis = $root.ibc.core.connection.v1.GenesisState.fromObject(object.connection_genesis);
                        }
                        if (object.channel_genesis != null) {
                            if (typeof object.channel_genesis !== "object")
                                throw TypeError(".ibc.core.types.v1.GenesisState.channel_genesis: object expected");
                            message.channel_genesis = $root.ibc.core.channel.v1.GenesisState.fromObject(object.channel_genesis);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.core.types.v1.GenesisState
                     * @static
                     * @param {ibc.core.types.v1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_genesis = null;
                            object.connection_genesis = null;
                            object.channel_genesis = null;
                        }
                        if (message.client_genesis != null && message.hasOwnProperty("client_genesis"))
                            object.client_genesis = $root.ibc.core.client.v1.GenesisState.toObject(message.client_genesis, options);
                        if (message.connection_genesis != null && message.hasOwnProperty("connection_genesis"))
                            object.connection_genesis = $root.ibc.core.connection.v1.GenesisState.toObject(message.connection_genesis, options);
                        if (message.channel_genesis != null && message.hasOwnProperty("channel_genesis"))
                            object.channel_genesis = $root.ibc.core.channel.v1.GenesisState.toObject(message.channel_genesis, options);
                        return object;
                    };

                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof ibc.core.types.v1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return GenesisState;
                })();

                return v1;
            })();

            return types;
        })();

        return core;
    })();

    ibc.lightclients = (function() {

        /**
         * Namespace lightclients.
         * @memberof ibc
         * @namespace
         */
        const lightclients = {};

        lightclients.localhost = (function() {

            /**
             * Namespace localhost.
             * @memberof ibc.lightclients
             * @namespace
             */
            const localhost = {};

            localhost.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.localhost
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.localhost.v1
                     * @interface IClientState
                     * @property {string|null} [chain_id] ClientState chain_id
                     * @property {ibc.core.client.v1.IHeight|null} [height] ClientState height
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.localhost.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.localhost.v1.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState chain_id.
                     * @member {string} chain_id
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.chain_id = "";

                    /**
                     * ClientState height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} height
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.height = null;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.localhost.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.localhost.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.localhost.v1.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.localhost.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.localhost.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.localhost.v1.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.chain_id = reader.string();
                                break;
                            case 2:
                                message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.localhost.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            if (!$util.isString(message.chain_id))
                                return "chain_id: string expected";
                        if (message.height != null && message.hasOwnProperty("height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.height);
                            if (error)
                                return "height." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.localhost.v1.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.localhost.v1.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.localhost.v1.ClientState();
                        if (object.chain_id != null)
                            message.chain_id = String(object.chain_id);
                        if (object.height != null) {
                            if (typeof object.height !== "object")
                                throw TypeError(".ibc.lightclients.localhost.v1.ClientState.height: object expected");
                            message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.localhost.v1.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.chain_id = "";
                            object.height = null;
                        }
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            object.chain_id = message.chain_id;
                        if (message.height != null && message.hasOwnProperty("height"))
                            object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.localhost.v1.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                return v1;
            })();

            return localhost;
        })();

        lightclients.solomachine = (function() {

            /**
             * Namespace solomachine.
             * @memberof ibc.lightclients
             * @namespace
             */
            const solomachine = {};

            solomachine.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.solomachine
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IClientState
                     * @property {Long|null} [sequence] ClientState sequence
                     * @property {Long|null} [frozen_sequence] ClientState frozen_sequence
                     * @property {ibc.lightclients.solomachine.v1.IConsensusState|null} [consensus_state] ClientState consensus_state
                     * @property {boolean|null} [allow_update_after_proposal] ClientState allow_update_after_proposal
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * ClientState frozen_sequence.
                     * @member {Long} frozen_sequence
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.frozen_sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * ClientState consensus_state.
                     * @member {ibc.lightclients.solomachine.v1.IConsensusState|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.consensus_state = null;

                    /**
                     * ClientState allow_update_after_proposal.
                     * @member {boolean} allow_update_after_proposal
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_proposal = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.frozen_sequence != null && Object.hasOwnProperty.call(message, "frozen_sequence"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.frozen_sequence);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.ibc.lightclients.solomachine.v1.ConsensusState.encode(message.consensus_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.allow_update_after_proposal != null && Object.hasOwnProperty.call(message, "allow_update_after_proposal"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.allow_update_after_proposal);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.frozen_sequence = reader.uint64();
                                break;
                            case 3:
                                message.consensus_state = $root.ibc.lightclients.solomachine.v1.ConsensusState.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.allow_update_after_proposal = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.frozen_sequence != null && message.hasOwnProperty("frozen_sequence"))
                            if (!$util.isInteger(message.frozen_sequence) && !(message.frozen_sequence && $util.isInteger(message.frozen_sequence.low) && $util.isInteger(message.frozen_sequence.high)))
                                return "frozen_sequence: integer|Long expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.ibc.lightclients.solomachine.v1.ConsensusState.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            if (typeof message.allow_update_after_proposal !== "boolean")
                                return "allow_update_after_proposal: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ClientState();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.frozen_sequence != null)
                            if ($util.Long)
                                (message.frozen_sequence = $util.Long.fromValue(object.frozen_sequence)).unsigned = true;
                            else if (typeof object.frozen_sequence === "string")
                                message.frozen_sequence = parseInt(object.frozen_sequence, 10);
                            else if (typeof object.frozen_sequence === "number")
                                message.frozen_sequence = object.frozen_sequence;
                            else if (typeof object.frozen_sequence === "object")
                                message.frozen_sequence = new $util.LongBits(object.frozen_sequence.low >>> 0, object.frozen_sequence.high >>> 0).toNumber(true);
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ClientState.consensus_state: object expected");
                            message.consensus_state = $root.ibc.lightclients.solomachine.v1.ConsensusState.fromObject(object.consensus_state);
                        }
                        if (object.allow_update_after_proposal != null)
                            message.allow_update_after_proposal = Boolean(object.allow_update_after_proposal);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.frozen_sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.frozen_sequence = options.longs === String ? "0" : 0;
                            object.consensus_state = null;
                            object.allow_update_after_proposal = false;
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.frozen_sequence != null && message.hasOwnProperty("frozen_sequence"))
                            if (typeof message.frozen_sequence === "number")
                                object.frozen_sequence = options.longs === String ? String(message.frozen_sequence) : message.frozen_sequence;
                            else
                                object.frozen_sequence = options.longs === String ? $util.Long.prototype.toString.call(message.frozen_sequence) : options.longs === Number ? new $util.LongBits(message.frozen_sequence.low >>> 0, message.frozen_sequence.high >>> 0).toNumber(true) : message.frozen_sequence;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.ibc.lightclients.solomachine.v1.ConsensusState.toObject(message.consensus_state, options);
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            object.allow_update_after_proposal = message.allow_update_after_proposal;
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                v1.ConsensusState = (function() {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConsensusState
                     * @property {google.protobuf.IAny|null} [public_key] ConsensusState public_key
                     * @property {string|null} [diversifier] ConsensusState diversifier
                     * @property {Long|null} [timestamp] ConsensusState timestamp
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState=} [properties] Properties to set
                     */
                    function ConsensusState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusState public_key.
                     * @member {google.protobuf.IAny|null|undefined} public_key
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.public_key = null;

                    /**
                     * ConsensusState diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.diversifier = "";

                    /**
                     * ConsensusState timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.public_key != null && Object.hasOwnProperty.call(message, "public_key"))
                            $root.google.protobuf.Any.encode(message.public_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.diversifier);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ConsensusState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.diversifier = reader.string();
                                break;
                            case 3:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.public_key != null && message.hasOwnProperty("public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.public_key);
                            if (error)
                                return "public_key." + error;
                        }
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a ConsensusState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusState} ConsensusState
                     */
                    ConsensusState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ConsensusState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ConsensusState();
                        if (object.public_key != null) {
                            if (typeof object.public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ConsensusState.public_key: object expected");
                            message.public_key = $root.google.protobuf.Any.fromObject(object.public_key);
                        }
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ConsensusState} message ConsensusState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.public_key = null;
                            object.diversifier = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.public_key != null && message.hasOwnProperty("public_key"))
                            object.public_key = $root.google.protobuf.Any.toObject(message.public_key, options);
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this ConsensusState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusState;
                })();

                v1.Header = (function() {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IHeader
                     * @property {Long|null} [sequence] Header sequence
                     * @property {Long|null} [timestamp] Header timestamp
                     * @property {Uint8Array|null} [signature] Header signature
                     * @property {google.protobuf.IAny|null} [new_public_key] Header new_public_key
                     * @property {string|null} [new_diversifier] Header new_diversifier
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IHeader=} [properties] Properties to set
                     */
                    function Header(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Header sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.signature = $util.newBuffer([]);

                    /**
                     * Header new_public_key.
                     * @member {google.protobuf.IAny|null|undefined} new_public_key
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.new_public_key = null;

                    /**
                     * Header new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     */
                    Header.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.solomachine.v1.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
                        if (message.new_public_key != null && Object.hasOwnProperty.call(message, "new_public_key"))
                            $root.google.protobuf.Any.encode(message.new_public_key, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified Header message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.Header.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.Header();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.signature = reader.bytes();
                                break;
                            case 4:
                                message.new_public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Header message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Header.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_public_key);
                            if (error)
                                return "new_public_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a Header message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.Header} Header
                     */
                    Header.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.Header)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.Header();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        if (object.new_public_key != null) {
                            if (typeof object.new_public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.Header.new_public_key: object expected");
                            message.new_public_key = $root.google.protobuf.Any.fromObject(object.new_public_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Header message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.Header} message Header
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Header.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.new_public_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key"))
                            object.new_public_key = $root.google.protobuf.Any.toObject(message.new_public_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this Header to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.Header
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Header.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Header;
                })();

                v1.Misbehaviour = (function() {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {Long|null} [sequence] Misbehaviour sequence
                     * @property {ibc.lightclients.solomachine.v1.ISignatureAndData|null} [signature_one] Misbehaviour signature_one
                     * @property {ibc.lightclients.solomachine.v1.ISignatureAndData|null} [signature_two] Misbehaviour signature_two
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour=} [properties] Properties to set
                     */
                    function Misbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Misbehaviour signature_one.
                     * @member {ibc.lightclients.solomachine.v1.ISignatureAndData|null|undefined} signature_one
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_one = null;

                    /**
                     * Misbehaviour signature_two.
                     * @member {ibc.lightclients.solomachine.v1.ISignatureAndData|null|undefined} signature_two
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_two = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.solomachine.v1.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.sequence);
                        if (message.signature_one != null && Object.hasOwnProperty.call(message, "signature_one"))
                            $root.ibc.lightclients.solomachine.v1.SignatureAndData.encode(message.signature_one, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signature_two != null && Object.hasOwnProperty.call(message, "signature_two"))
                            $root.ibc.lightclients.solomachine.v1.SignatureAndData.encode(message.signature_two, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Misbehaviour message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.Misbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.Misbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.sequence = reader.uint64();
                                break;
                            case 3:
                                message.signature_one = $root.ibc.lightclients.solomachine.v1.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signature_two = $root.ibc.lightclients.solomachine.v1.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Misbehaviour message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Misbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.signature_one != null && message.hasOwnProperty("signature_one")) {
                            let error = $root.ibc.lightclients.solomachine.v1.SignatureAndData.verify(message.signature_one);
                            if (error)
                                return "signature_one." + error;
                        }
                        if (message.signature_two != null && message.hasOwnProperty("signature_two")) {
                            let error = $root.ibc.lightclients.solomachine.v1.SignatureAndData.verify(message.signature_two);
                            if (error)
                                return "signature_two." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Misbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.Misbehaviour} Misbehaviour
                     */
                    Misbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.Misbehaviour)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.Misbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.signature_one != null) {
                            if (typeof object.signature_one !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.Misbehaviour.signature_one: object expected");
                            message.signature_one = $root.ibc.lightclients.solomachine.v1.SignatureAndData.fromObject(object.signature_one);
                        }
                        if (object.signature_two != null) {
                            if (typeof object.signature_two !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.Misbehaviour.signature_two: object expected");
                            message.signature_two = $root.ibc.lightclients.solomachine.v1.SignatureAndData.fromObject(object.signature_two);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Misbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.Misbehaviour} message Misbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Misbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.signature_one = null;
                            object.signature_two = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.signature_one != null && message.hasOwnProperty("signature_one"))
                            object.signature_one = $root.ibc.lightclients.solomachine.v1.SignatureAndData.toObject(message.signature_one, options);
                        if (message.signature_two != null && message.hasOwnProperty("signature_two"))
                            object.signature_two = $root.ibc.lightclients.solomachine.v1.SignatureAndData.toObject(message.signature_two, options);
                        return object;
                    };

                    /**
                     * Converts this Misbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.Misbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Misbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Misbehaviour;
                })();

                v1.SignatureAndData = (function() {

                    /**
                     * Properties of a SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ISignatureAndData
                     * @property {Uint8Array|null} [signature] SignatureAndData signature
                     * @property {ibc.lightclients.solomachine.v1.DataType|null} [data_type] SignatureAndData data_type
                     * @property {Uint8Array|null} [data] SignatureAndData data
                     * @property {Long|null} [timestamp] SignatureAndData timestamp
                     */

                    /**
                     * Constructs a new SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a SignatureAndData.
                     * @implements ISignatureAndData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData=} [properties] Properties to set
                     */
                    function SignatureAndData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignatureAndData signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.signature = $util.newBuffer([]);

                    /**
                     * SignatureAndData data_type.
                     * @member {ibc.lightclients.solomachine.v1.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data_type = 0;

                    /**
                     * SignatureAndData data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data = $util.newBuffer([]);

                    /**
                     * SignatureAndData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified SignatureAndData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignatureAndData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignatureAndData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignatureAndData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.SignatureAndData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature = reader.bytes();
                                break;
                            case 2:
                                message.data_type = reader.int32();
                                break;
                            case 3:
                                message.data = reader.bytes();
                                break;
                            case 4:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignatureAndData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignatureAndData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a SignatureAndData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.SignatureAndData} SignatureAndData
                     */
                    SignatureAndData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.SignatureAndData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.SignatureAndData();
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignatureAndData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.SignatureAndData} message SignatureAndData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignatureAndData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v1.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this SignatureAndData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.SignatureAndData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignatureAndData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignatureAndData;
                })();

                v1.TimestampedSignatureData = (function() {

                    /**
                     * Properties of a TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ITimestampedSignatureData
                     * @property {Uint8Array|null} [signature_data] TimestampedSignatureData signature_data
                     * @property {Long|null} [timestamp] TimestampedSignatureData timestamp
                     */

                    /**
                     * Constructs a new TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a TimestampedSignatureData.
                     * @implements ITimestampedSignatureData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData=} [properties] Properties to set
                     */
                    function TimestampedSignatureData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TimestampedSignatureData signature_data.
                     * @member {Uint8Array} signature_data
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.signature_data = $util.newBuffer([]);

                    /**
                     * TimestampedSignatureData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified TimestampedSignatureData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.TimestampedSignatureData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature_data != null && Object.hasOwnProperty.call(message, "signature_data"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature_data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified TimestampedSignatureData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.TimestampedSignatureData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.TimestampedSignatureData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature_data = reader.bytes();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TimestampedSignatureData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TimestampedSignatureData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            if (!(message.signature_data && typeof message.signature_data.length === "number" || $util.isString(message.signature_data)))
                                return "signature_data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a TimestampedSignatureData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.TimestampedSignatureData} TimestampedSignatureData
                     */
                    TimestampedSignatureData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.TimestampedSignatureData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.TimestampedSignatureData();
                        if (object.signature_data != null)
                            if (typeof object.signature_data === "string")
                                $util.base64.decode(object.signature_data, message.signature_data = $util.newBuffer($util.base64.length(object.signature_data)), 0);
                            else if (object.signature_data.length)
                                message.signature_data = object.signature_data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TimestampedSignatureData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.TimestampedSignatureData} message TimestampedSignatureData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TimestampedSignatureData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature_data = "";
                            else {
                                object.signature_data = [];
                                if (options.bytes !== Array)
                                    object.signature_data = $util.newBuffer(object.signature_data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            object.signature_data = options.bytes === String ? $util.base64.encode(message.signature_data, 0, message.signature_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature_data) : message.signature_data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this TimestampedSignatureData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.TimestampedSignatureData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TimestampedSignatureData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TimestampedSignatureData;
                })();

                v1.SignBytes = (function() {

                    /**
                     * Properties of a SignBytes.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface ISignBytes
                     * @property {Long|null} [sequence] SignBytes sequence
                     * @property {Long|null} [timestamp] SignBytes timestamp
                     * @property {string|null} [diversifier] SignBytes diversifier
                     * @property {ibc.lightclients.solomachine.v1.DataType|null} [data_type] SignBytes data_type
                     * @property {Uint8Array|null} [data] SignBytes data
                     */

                    /**
                     * Constructs a new SignBytes.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a SignBytes.
                     * @implements ISignBytes
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes=} [properties] Properties to set
                     */
                    function SignBytes(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignBytes sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.diversifier = "";

                    /**
                     * SignBytes data_type.
                     * @member {ibc.lightclients.solomachine.v1.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data_type = 0;

                    /**
                     * SignBytes data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified SignBytes message. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignBytes.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.diversifier);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.data);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignBytes message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.SignBytes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.SignBytes();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.diversifier = reader.string();
                                break;
                            case 4:
                                message.data_type = reader.int32();
                                break;
                            case 5:
                                message.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignBytes message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignBytes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a SignBytes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.SignBytes} SignBytes
                     */
                    SignBytes.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.SignBytes)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.SignBytes();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignBytes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.SignBytes} message SignBytes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignBytes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            object.diversifier = "";
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v1.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };

                    /**
                     * Converts this SignBytes to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.SignBytes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignBytes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignBytes;
                })();

                /**
                 * DataType enum.
                 * @name ibc.lightclients.solomachine.v1.DataType
                 * @enum {number}
                 * @property {number} DATA_TYPE_UNINITIALIZED_UNSPECIFIED=0 DATA_TYPE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} DATA_TYPE_CLIENT_STATE=1 DATA_TYPE_CLIENT_STATE value
                 * @property {number} DATA_TYPE_CONSENSUS_STATE=2 DATA_TYPE_CONSENSUS_STATE value
                 * @property {number} DATA_TYPE_CONNECTION_STATE=3 DATA_TYPE_CONNECTION_STATE value
                 * @property {number} DATA_TYPE_CHANNEL_STATE=4 DATA_TYPE_CHANNEL_STATE value
                 * @property {number} DATA_TYPE_PACKET_COMMITMENT=5 DATA_TYPE_PACKET_COMMITMENT value
                 * @property {number} DATA_TYPE_PACKET_ACKNOWLEDGEMENT=6 DATA_TYPE_PACKET_ACKNOWLEDGEMENT value
                 * @property {number} DATA_TYPE_PACKET_RECEIPT_ABSENCE=7 DATA_TYPE_PACKET_RECEIPT_ABSENCE value
                 * @property {number} DATA_TYPE_NEXT_SEQUENCE_RECV=8 DATA_TYPE_NEXT_SEQUENCE_RECV value
                 * @property {number} DATA_TYPE_HEADER=9 DATA_TYPE_HEADER value
                 */
                v1.DataType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DATA_TYPE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DATA_TYPE_CLIENT_STATE"] = 1;
                    values[valuesById[2] = "DATA_TYPE_CONSENSUS_STATE"] = 2;
                    values[valuesById[3] = "DATA_TYPE_CONNECTION_STATE"] = 3;
                    values[valuesById[4] = "DATA_TYPE_CHANNEL_STATE"] = 4;
                    values[valuesById[5] = "DATA_TYPE_PACKET_COMMITMENT"] = 5;
                    values[valuesById[6] = "DATA_TYPE_PACKET_ACKNOWLEDGEMENT"] = 6;
                    values[valuesById[7] = "DATA_TYPE_PACKET_RECEIPT_ABSENCE"] = 7;
                    values[valuesById[8] = "DATA_TYPE_NEXT_SEQUENCE_RECV"] = 8;
                    values[valuesById[9] = "DATA_TYPE_HEADER"] = 9;
                    return values;
                })();

                v1.HeaderData = (function() {

                    /**
                     * Properties of a HeaderData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IHeaderData
                     * @property {google.protobuf.IAny|null} [new_pub_key] HeaderData new_pub_key
                     * @property {string|null} [new_diversifier] HeaderData new_diversifier
                     */

                    /**
                     * Constructs a new HeaderData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a HeaderData.
                     * @implements IHeaderData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData=} [properties] Properties to set
                     */
                    function HeaderData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * HeaderData new_pub_key.
                     * @member {google.protobuf.IAny|null|undefined} new_pub_key
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_pub_key = null;

                    /**
                     * HeaderData new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified HeaderData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.HeaderData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.new_pub_key != null && Object.hasOwnProperty.call(message, "new_pub_key"))
                            $root.google.protobuf.Any.encode(message.new_pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified HeaderData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.HeaderData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.HeaderData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.new_pub_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HeaderData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HeaderData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_pub_key);
                            if (error)
                                return "new_pub_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a HeaderData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.HeaderData} HeaderData
                     */
                    HeaderData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.HeaderData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.HeaderData();
                        if (object.new_pub_key != null) {
                            if (typeof object.new_pub_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.HeaderData.new_pub_key: object expected");
                            message.new_pub_key = $root.google.protobuf.Any.fromObject(object.new_pub_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a HeaderData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.HeaderData} message HeaderData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HeaderData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.new_pub_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key"))
                            object.new_pub_key = $root.google.protobuf.Any.toObject(message.new_pub_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this HeaderData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.HeaderData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HeaderData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return HeaderData;
                })();

                v1.ClientStateData = (function() {

                    /**
                     * Properties of a ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IClientStateData
                     * @property {Uint8Array|null} [path] ClientStateData path
                     * @property {google.protobuf.IAny|null} [client_state] ClientStateData client_state
                     */

                    /**
                     * Constructs a new ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ClientStateData.
                     * @implements IClientStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData=} [properties] Properties to set
                     */
                    function ClientStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ClientStateData client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.client_state = null;

                    /**
                     * Encodes the specified ClientStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ClientStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ClientStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ClientStateData} ClientStateData
                     */
                    ClientStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ClientStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ClientStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ClientStateData.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ClientStateData} message ClientStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.client_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        return object;
                    };

                    /**
                     * Converts this ClientStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ClientStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientStateData;
                })();

                v1.ConsensusStateData = (function() {

                    /**
                     * Properties of a ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConsensusStateData
                     * @property {Uint8Array|null} [path] ConsensusStateData path
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateData consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConsensusStateData.
                     * @implements IConsensusStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData=} [properties] Properties to set
                     */
                    function ConsensusStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConsensusStateData consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConsensusStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ConsensusStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConsensusStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ConsensusStateData} ConsensusStateData
                     */
                    ConsensusStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ConsensusStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ConsensusStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ConsensusStateData.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ConsensusStateData} message ConsensusStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.consensus_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this ConsensusStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ConsensusStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusStateData;
                })();

                v1.ConnectionStateData = (function() {

                    /**
                     * Properties of a ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IConnectionStateData
                     * @property {Uint8Array|null} [path] ConnectionStateData path
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] ConnectionStateData connection
                     */

                    /**
                     * Constructs a new ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ConnectionStateData.
                     * @implements IConnectionStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData=} [properties] Properties to set
                     */
                    function ConnectionStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConnectionStateData connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.connection = null;

                    /**
                     * Encodes the specified ConnectionStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConnectionStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(message.connection, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ConnectionStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ConnectionStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.connection != null && message.hasOwnProperty("connection")) {
                            let error = $root.ibc.core.connection.v1.ConnectionEnd.verify(message.connection);
                            if (error)
                                return "connection." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConnectionStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ConnectionStateData} ConnectionStateData
                     */
                    ConnectionStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ConnectionStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ConnectionStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.connection != null) {
                            if (typeof object.connection !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ConnectionStateData.connection: object expected");
                            message.connection = $root.ibc.core.connection.v1.ConnectionEnd.fromObject(object.connection);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ConnectionStateData} message ConnectionStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.connection = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = $root.ibc.core.connection.v1.ConnectionEnd.toObject(message.connection, options);
                        return object;
                    };

                    /**
                     * Converts this ConnectionStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ConnectionStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionStateData;
                })();

                v1.ChannelStateData = (function() {

                    /**
                     * Properties of a ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IChannelStateData
                     * @property {Uint8Array|null} [path] ChannelStateData path
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] ChannelStateData channel
                     */

                    /**
                     * Constructs a new ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a ChannelStateData.
                     * @implements IChannelStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData=} [properties] Properties to set
                     */
                    function ChannelStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ChannelStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ChannelStateData channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.channel = null;

                    /**
                     * Encodes the specified ChannelStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.ChannelStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ChannelStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.ChannelStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.ChannelStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ChannelStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ChannelStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ChannelStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.ChannelStateData} ChannelStateData
                     */
                    ChannelStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.ChannelStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.ChannelStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v1.ChannelStateData.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ChannelStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.ChannelStateData} message ChannelStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ChannelStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.channel = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        return object;
                    };

                    /**
                     * Converts this ChannelStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.ChannelStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ChannelStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ChannelStateData;
                })();

                v1.PacketCommitmentData = (function() {

                    /**
                     * Properties of a PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketCommitmentData
                     * @property {Uint8Array|null} [path] PacketCommitmentData path
                     * @property {Uint8Array|null} [commitment] PacketCommitmentData commitment
                     */

                    /**
                     * Constructs a new PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketCommitmentData.
                     * @implements IPacketCommitmentData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData=} [properties] Properties to set
                     */
                    function PacketCommitmentData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketCommitmentData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketCommitmentData commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.commitment = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketCommitmentData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketCommitmentData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.commitment != null && Object.hasOwnProperty.call(message, "commitment"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.commitment);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketCommitmentData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketCommitmentData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.PacketCommitmentData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.commitment = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketCommitmentData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketCommitmentData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            if (!(message.commitment && typeof message.commitment.length === "number" || $util.isString(message.commitment)))
                                return "commitment: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketCommitmentData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.PacketCommitmentData} PacketCommitmentData
                     */
                    PacketCommitmentData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.PacketCommitmentData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.PacketCommitmentData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.commitment != null)
                            if (typeof object.commitment === "string")
                                $util.base64.decode(object.commitment, message.commitment = $util.newBuffer($util.base64.length(object.commitment)), 0);
                            else if (object.commitment.length)
                                message.commitment = object.commitment;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketCommitmentData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.PacketCommitmentData} message PacketCommitmentData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketCommitmentData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.commitment = "";
                            else {
                                object.commitment = [];
                                if (options.bytes !== Array)
                                    object.commitment = $util.newBuffer(object.commitment);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            object.commitment = options.bytes === String ? $util.base64.encode(message.commitment, 0, message.commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.commitment) : message.commitment;
                        return object;
                    };

                    /**
                     * Converts this PacketCommitmentData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.PacketCommitmentData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketCommitmentData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketCommitmentData;
                })();

                v1.PacketAcknowledgementData = (function() {

                    /**
                     * Properties of a PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketAcknowledgementData
                     * @property {Uint8Array|null} [path] PacketAcknowledgementData path
                     * @property {Uint8Array|null} [acknowledgement] PacketAcknowledgementData acknowledgement
                     */

                    /**
                     * Constructs a new PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketAcknowledgementData.
                     * @implements IPacketAcknowledgementData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData=} [properties] Properties to set
                     */
                    function PacketAcknowledgementData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketAcknowledgementData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketAcknowledgementData acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketAcknowledgementData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketAcknowledgementData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.acknowledgement);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketAcknowledgementData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketAcknowledgementData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.PacketAcknowledgementData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.acknowledgement = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketAcknowledgementData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketAcknowledgementData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketAcknowledgementData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} PacketAcknowledgementData
                     */
                    PacketAcknowledgementData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.PacketAcknowledgementData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.PacketAcknowledgementData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketAcknowledgementData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.PacketAcknowledgementData} message PacketAcknowledgementData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketAcknowledgementData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        return object;
                    };

                    /**
                     * Converts this PacketAcknowledgementData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.PacketAcknowledgementData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketAcknowledgementData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketAcknowledgementData;
                })();

                v1.PacketReceiptAbsenceData = (function() {

                    /**
                     * Properties of a PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface IPacketReceiptAbsenceData
                     * @property {Uint8Array|null} [path] PacketReceiptAbsenceData path
                     */

                    /**
                     * Constructs a new PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a PacketReceiptAbsenceData.
                     * @implements IPacketReceiptAbsenceData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData=} [properties] Properties to set
                     */
                    function PacketReceiptAbsenceData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketReceiptAbsenceData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @instance
                     */
                    PacketReceiptAbsenceData.prototype.path = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketReceiptAbsenceData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketReceiptAbsenceData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketReceiptAbsenceData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     */
                    PacketReceiptAbsenceData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketReceiptAbsenceData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData} message PacketReceiptAbsenceData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketReceiptAbsenceData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        return object;
                    };

                    /**
                     * Converts this PacketReceiptAbsenceData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.PacketReceiptAbsenceData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketReceiptAbsenceData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketReceiptAbsenceData;
                })();

                v1.NextSequenceRecvData = (function() {

                    /**
                     * Properties of a NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @interface INextSequenceRecvData
                     * @property {Uint8Array|null} [path] NextSequenceRecvData path
                     * @property {Long|null} [next_seq_recv] NextSequenceRecvData next_seq_recv
                     */

                    /**
                     * Constructs a new NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v1
                     * @classdesc Represents a NextSequenceRecvData.
                     * @implements INextSequenceRecvData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData=} [properties] Properties to set
                     */
                    function NextSequenceRecvData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NextSequenceRecvData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.path = $util.newBuffer([]);

                    /**
                     * NextSequenceRecvData next_seq_recv.
                     * @member {Long} next_seq_recv
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.next_seq_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified NextSequenceRecvData message. Does not implicitly {@link ibc.lightclients.solomachine.v1.NextSequenceRecvData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.next_seq_recv != null && Object.hasOwnProperty.call(message, "next_seq_recv"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.next_seq_recv);
                        return writer;
                    };

                    /**
                     * Encodes the specified NextSequenceRecvData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v1.NextSequenceRecvData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v1.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v1.NextSequenceRecvData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.next_seq_recv = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v1.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NextSequenceRecvData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NextSequenceRecvData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (!$util.isInteger(message.next_seq_recv) && !(message.next_seq_recv && $util.isInteger(message.next_seq_recv.low) && $util.isInteger(message.next_seq_recv.high)))
                                return "next_seq_recv: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a NextSequenceRecvData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v1.NextSequenceRecvData} NextSequenceRecvData
                     */
                    NextSequenceRecvData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v1.NextSequenceRecvData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v1.NextSequenceRecvData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.next_seq_recv != null)
                            if ($util.Long)
                                (message.next_seq_recv = $util.Long.fromValue(object.next_seq_recv)).unsigned = true;
                            else if (typeof object.next_seq_recv === "string")
                                message.next_seq_recv = parseInt(object.next_seq_recv, 10);
                            else if (typeof object.next_seq_recv === "number")
                                message.next_seq_recv = object.next_seq_recv;
                            else if (typeof object.next_seq_recv === "object")
                                message.next_seq_recv = new $util.LongBits(object.next_seq_recv.low >>> 0, object.next_seq_recv.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NextSequenceRecvData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v1.NextSequenceRecvData} message NextSequenceRecvData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NextSequenceRecvData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_seq_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_seq_recv = options.longs === String ? "0" : 0;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (typeof message.next_seq_recv === "number")
                                object.next_seq_recv = options.longs === String ? String(message.next_seq_recv) : message.next_seq_recv;
                            else
                                object.next_seq_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_seq_recv) : options.longs === Number ? new $util.LongBits(message.next_seq_recv.low >>> 0, message.next_seq_recv.high >>> 0).toNumber(true) : message.next_seq_recv;
                        return object;
                    };

                    /**
                     * Converts this NextSequenceRecvData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v1.NextSequenceRecvData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NextSequenceRecvData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NextSequenceRecvData;
                })();

                return v1;
            })();

            solomachine.v2 = (function() {

                /**
                 * Namespace v2.
                 * @memberof ibc.lightclients.solomachine
                 * @namespace
                 */
                const v2 = {};

                v2.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IClientState
                     * @property {Long|null} [sequence] ClientState sequence
                     * @property {boolean|null} [is_frozen] ClientState is_frozen
                     * @property {ibc.lightclients.solomachine.v2.IConsensusState|null} [consensus_state] ClientState consensus_state
                     * @property {boolean|null} [allow_update_after_proposal] ClientState allow_update_after_proposal
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * ClientState is_frozen.
                     * @member {boolean} is_frozen
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.is_frozen = false;

                    /**
                     * ClientState consensus_state.
                     * @member {ibc.lightclients.solomachine.v2.IConsensusState|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.consensus_state = null;

                    /**
                     * ClientState allow_update_after_proposal.
                     * @member {boolean} allow_update_after_proposal
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_proposal = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.is_frozen != null && Object.hasOwnProperty.call(message, "is_frozen"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_frozen);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.ibc.lightclients.solomachine.v2.ConsensusState.encode(message.consensus_state, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.allow_update_after_proposal != null && Object.hasOwnProperty.call(message, "allow_update_after_proposal"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.allow_update_after_proposal);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.is_frozen = reader.bool();
                                break;
                            case 3:
                                message.consensus_state = $root.ibc.lightclients.solomachine.v2.ConsensusState.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.allow_update_after_proposal = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.is_frozen != null && message.hasOwnProperty("is_frozen"))
                            if (typeof message.is_frozen !== "boolean")
                                return "is_frozen: boolean expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.ibc.lightclients.solomachine.v2.ConsensusState.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            if (typeof message.allow_update_after_proposal !== "boolean")
                                return "allow_update_after_proposal: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ClientState();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.is_frozen != null)
                            message.is_frozen = Boolean(object.is_frozen);
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ClientState.consensus_state: object expected");
                            message.consensus_state = $root.ibc.lightclients.solomachine.v2.ConsensusState.fromObject(object.consensus_state);
                        }
                        if (object.allow_update_after_proposal != null)
                            message.allow_update_after_proposal = Boolean(object.allow_update_after_proposal);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.is_frozen = false;
                            object.consensus_state = null;
                            object.allow_update_after_proposal = false;
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.is_frozen != null && message.hasOwnProperty("is_frozen"))
                            object.is_frozen = message.is_frozen;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.ibc.lightclients.solomachine.v2.ConsensusState.toObject(message.consensus_state, options);
                        if (message.allow_update_after_proposal != null && message.hasOwnProperty("allow_update_after_proposal"))
                            object.allow_update_after_proposal = message.allow_update_after_proposal;
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                v2.ConsensusState = (function() {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IConsensusState
                     * @property {google.protobuf.IAny|null} [public_key] ConsensusState public_key
                     * @property {string|null} [diversifier] ConsensusState diversifier
                     * @property {Long|null} [timestamp] ConsensusState timestamp
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IConsensusState=} [properties] Properties to set
                     */
                    function ConsensusState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusState public_key.
                     * @member {google.protobuf.IAny|null|undefined} public_key
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.public_key = null;

                    /**
                     * ConsensusState diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.diversifier = "";

                    /**
                     * ConsensusState timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.public_key != null && Object.hasOwnProperty.call(message, "public_key"))
                            $root.google.protobuf.Any.encode(message.public_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.diversifier);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusState message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ConsensusState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.diversifier = reader.string();
                                break;
                            case 3:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusState message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.public_key != null && message.hasOwnProperty("public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.public_key);
                            if (error)
                                return "public_key." + error;
                        }
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a ConsensusState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusState} ConsensusState
                     */
                    ConsensusState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ConsensusState)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ConsensusState();
                        if (object.public_key != null) {
                            if (typeof object.public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ConsensusState.public_key: object expected");
                            message.public_key = $root.google.protobuf.Any.fromObject(object.public_key);
                        }
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ConsensusState} message ConsensusState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.public_key = null;
                            object.diversifier = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.public_key != null && message.hasOwnProperty("public_key"))
                            object.public_key = $root.google.protobuf.Any.toObject(message.public_key, options);
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this ConsensusState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusState;
                })();

                v2.Header = (function() {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IHeader
                     * @property {Long|null} [sequence] Header sequence
                     * @property {Long|null} [timestamp] Header timestamp
                     * @property {Uint8Array|null} [signature] Header signature
                     * @property {google.protobuf.IAny|null} [new_public_key] Header new_public_key
                     * @property {string|null} [new_diversifier] Header new_diversifier
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IHeader=} [properties] Properties to set
                     */
                    function Header(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Header sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Header signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.signature = $util.newBuffer([]);

                    /**
                     * Header new_public_key.
                     * @member {google.protobuf.IAny|null|undefined} new_public_key
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.new_public_key = null;

                    /**
                     * Header new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     */
                    Header.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.solomachine.v2.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.signature);
                        if (message.new_public_key != null && Object.hasOwnProperty.call(message, "new_public_key"))
                            $root.google.protobuf.Any.encode(message.new_public_key, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified Header message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.Header.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.Header();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.signature = reader.bytes();
                                break;
                            case 4:
                                message.new_public_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Header message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Header.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_public_key);
                            if (error)
                                return "new_public_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a Header message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.Header} Header
                     */
                    Header.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.Header)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.Header();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        if (object.new_public_key != null) {
                            if (typeof object.new_public_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.Header.new_public_key: object expected");
                            message.new_public_key = $root.google.protobuf.Any.fromObject(object.new_public_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Header message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.Header} message Header
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Header.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.new_public_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.new_public_key != null && message.hasOwnProperty("new_public_key"))
                            object.new_public_key = $root.google.protobuf.Any.toObject(message.new_public_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this Header to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.Header
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Header.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Header;
                })();

                v2.Misbehaviour = (function() {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {Long|null} [sequence] Misbehaviour sequence
                     * @property {ibc.lightclients.solomachine.v2.ISignatureAndData|null} [signature_one] Misbehaviour signature_one
                     * @property {ibc.lightclients.solomachine.v2.ISignatureAndData|null} [signature_two] Misbehaviour signature_two
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IMisbehaviour=} [properties] Properties to set
                     */
                    function Misbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Misbehaviour signature_one.
                     * @member {ibc.lightclients.solomachine.v2.ISignatureAndData|null|undefined} signature_one
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_one = null;

                    /**
                     * Misbehaviour signature_two.
                     * @member {ibc.lightclients.solomachine.v2.ISignatureAndData|null|undefined} signature_two
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.signature_two = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.solomachine.v2.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.sequence);
                        if (message.signature_one != null && Object.hasOwnProperty.call(message, "signature_one"))
                            $root.ibc.lightclients.solomachine.v2.SignatureAndData.encode(message.signature_one, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.signature_two != null && Object.hasOwnProperty.call(message, "signature_two"))
                            $root.ibc.lightclients.solomachine.v2.SignatureAndData.encode(message.signature_two, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Misbehaviour message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.Misbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.Misbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.sequence = reader.uint64();
                                break;
                            case 3:
                                message.signature_one = $root.ibc.lightclients.solomachine.v2.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.signature_two = $root.ibc.lightclients.solomachine.v2.SignatureAndData.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Misbehaviour message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Misbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.signature_one != null && message.hasOwnProperty("signature_one")) {
                            let error = $root.ibc.lightclients.solomachine.v2.SignatureAndData.verify(message.signature_one);
                            if (error)
                                return "signature_one." + error;
                        }
                        if (message.signature_two != null && message.hasOwnProperty("signature_two")) {
                            let error = $root.ibc.lightclients.solomachine.v2.SignatureAndData.verify(message.signature_two);
                            if (error)
                                return "signature_two." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Misbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.Misbehaviour} Misbehaviour
                     */
                    Misbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.Misbehaviour)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.Misbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.signature_one != null) {
                            if (typeof object.signature_one !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.Misbehaviour.signature_one: object expected");
                            message.signature_one = $root.ibc.lightclients.solomachine.v2.SignatureAndData.fromObject(object.signature_one);
                        }
                        if (object.signature_two != null) {
                            if (typeof object.signature_two !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.Misbehaviour.signature_two: object expected");
                            message.signature_two = $root.ibc.lightclients.solomachine.v2.SignatureAndData.fromObject(object.signature_two);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Misbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.Misbehaviour} message Misbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Misbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            object.signature_one = null;
                            object.signature_two = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.signature_one != null && message.hasOwnProperty("signature_one"))
                            object.signature_one = $root.ibc.lightclients.solomachine.v2.SignatureAndData.toObject(message.signature_one, options);
                        if (message.signature_two != null && message.hasOwnProperty("signature_two"))
                            object.signature_two = $root.ibc.lightclients.solomachine.v2.SignatureAndData.toObject(message.signature_two, options);
                        return object;
                    };

                    /**
                     * Converts this Misbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.Misbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Misbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Misbehaviour;
                })();

                v2.SignatureAndData = (function() {

                    /**
                     * Properties of a SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface ISignatureAndData
                     * @property {Uint8Array|null} [signature] SignatureAndData signature
                     * @property {ibc.lightclients.solomachine.v2.DataType|null} [data_type] SignatureAndData data_type
                     * @property {Uint8Array|null} [data] SignatureAndData data
                     * @property {Long|null} [timestamp] SignatureAndData timestamp
                     */

                    /**
                     * Constructs a new SignatureAndData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a SignatureAndData.
                     * @implements ISignatureAndData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.ISignatureAndData=} [properties] Properties to set
                     */
                    function SignatureAndData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignatureAndData signature.
                     * @member {Uint8Array} signature
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.signature = $util.newBuffer([]);

                    /**
                     * SignatureAndData data_type.
                     * @member {ibc.lightclients.solomachine.v2.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data_type = 0;

                    /**
                     * SignatureAndData data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.data = $util.newBuffer([]);

                    /**
                     * SignatureAndData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     */
                    SignatureAndData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified SignatureAndData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignatureAndData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignatureAndData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignatureAndData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignatureAndData} message SignatureAndData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignatureAndData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.SignatureAndData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature = reader.bytes();
                                break;
                            case 2:
                                message.data_type = reader.int32();
                                break;
                            case 3:
                                message.data = reader.bytes();
                                break;
                            case 4:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignatureAndData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.SignatureAndData} SignatureAndData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignatureAndData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignatureAndData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignatureAndData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                                return "signature: buffer expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a SignatureAndData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.SignatureAndData} SignatureAndData
                     */
                    SignatureAndData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.SignatureAndData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.SignatureAndData();
                        if (object.signature != null)
                            if (typeof object.signature === "string")
                                $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                            else if (object.signature.length)
                                message.signature = object.signature;
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignatureAndData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.SignatureAndData} message SignatureAndData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignatureAndData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature = "";
                            else {
                                object.signature = [];
                                if (options.bytes !== Array)
                                    object.signature = $util.newBuffer(object.signature);
                            }
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature != null && message.hasOwnProperty("signature"))
                            object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v2.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this SignatureAndData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.SignatureAndData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignatureAndData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignatureAndData;
                })();

                v2.TimestampedSignatureData = (function() {

                    /**
                     * Properties of a TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface ITimestampedSignatureData
                     * @property {Uint8Array|null} [signature_data] TimestampedSignatureData signature_data
                     * @property {Long|null} [timestamp] TimestampedSignatureData timestamp
                     */

                    /**
                     * Constructs a new TimestampedSignatureData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a TimestampedSignatureData.
                     * @implements ITimestampedSignatureData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.ITimestampedSignatureData=} [properties] Properties to set
                     */
                    function TimestampedSignatureData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * TimestampedSignatureData signature_data.
                     * @member {Uint8Array} signature_data
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.signature_data = $util.newBuffer([]);

                    /**
                     * TimestampedSignatureData timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @instance
                     */
                    TimestampedSignatureData.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified TimestampedSignatureData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.TimestampedSignatureData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signature_data != null && Object.hasOwnProperty.call(message, "signature_data"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.signature_data);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        return writer;
                    };

                    /**
                     * Encodes the specified TimestampedSignatureData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.TimestampedSignatureData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ITimestampedSignatureData} message TimestampedSignatureData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimestampedSignatureData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.TimestampedSignatureData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signature_data = reader.bytes();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a TimestampedSignatureData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.TimestampedSignatureData} TimestampedSignatureData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimestampedSignatureData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a TimestampedSignatureData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TimestampedSignatureData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            if (!(message.signature_data && typeof message.signature_data.length === "number" || $util.isString(message.signature_data)))
                                return "signature_data: buffer expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a TimestampedSignatureData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.TimestampedSignatureData} TimestampedSignatureData
                     */
                    TimestampedSignatureData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.TimestampedSignatureData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.TimestampedSignatureData();
                        if (object.signature_data != null)
                            if (typeof object.signature_data === "string")
                                $util.base64.decode(object.signature_data, message.signature_data = $util.newBuffer($util.base64.length(object.signature_data)), 0);
                            else if (object.signature_data.length)
                                message.signature_data = object.signature_data;
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a TimestampedSignatureData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.TimestampedSignatureData} message TimestampedSignatureData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TimestampedSignatureData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.signature_data = "";
                            else {
                                object.signature_data = [];
                                if (options.bytes !== Array)
                                    object.signature_data = $util.newBuffer(object.signature_data);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                        }
                        if (message.signature_data != null && message.hasOwnProperty("signature_data"))
                            object.signature_data = options.bytes === String ? $util.base64.encode(message.signature_data, 0, message.signature_data.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature_data) : message.signature_data;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        return object;
                    };

                    /**
                     * Converts this TimestampedSignatureData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.TimestampedSignatureData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TimestampedSignatureData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return TimestampedSignatureData;
                })();

                v2.SignBytes = (function() {

                    /**
                     * Properties of a SignBytes.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface ISignBytes
                     * @property {Long|null} [sequence] SignBytes sequence
                     * @property {Long|null} [timestamp] SignBytes timestamp
                     * @property {string|null} [diversifier] SignBytes diversifier
                     * @property {ibc.lightclients.solomachine.v2.DataType|null} [data_type] SignBytes data_type
                     * @property {Uint8Array|null} [data] SignBytes data
                     */

                    /**
                     * Constructs a new SignBytes.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a SignBytes.
                     * @implements ISignBytes
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.ISignBytes=} [properties] Properties to set
                     */
                    function SignBytes(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * SignBytes sequence.
                     * @member {Long} sequence
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes timestamp.
                     * @member {Long} timestamp
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * SignBytes diversifier.
                     * @member {string} diversifier
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.diversifier = "";

                    /**
                     * SignBytes data_type.
                     * @member {ibc.lightclients.solomachine.v2.DataType} data_type
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data_type = 0;

                    /**
                     * SignBytes data.
                     * @member {Uint8Array} data
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     */
                    SignBytes.prototype.data = $util.newBuffer([]);

                    /**
                     * Encodes the specified SignBytes message. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignBytes.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.timestamp);
                        if (message.diversifier != null && Object.hasOwnProperty.call(message, "diversifier"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.diversifier);
                        if (message.data_type != null && Object.hasOwnProperty.call(message, "data_type"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.data_type);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.data);
                        return writer;
                    };

                    /**
                     * Encodes the specified SignBytes message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.SignBytes.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ISignBytes} message SignBytes message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SignBytes.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.SignBytes();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence = reader.uint64();
                                break;
                            case 2:
                                message.timestamp = reader.uint64();
                                break;
                            case 3:
                                message.diversifier = reader.string();
                                break;
                            case 4:
                                message.data_type = reader.int32();
                                break;
                            case 5:
                                message.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a SignBytes message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.SignBytes} SignBytes
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SignBytes.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a SignBytes message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SignBytes.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                return "sequence: integer|Long expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (!$util.isInteger(message.timestamp) && !(message.timestamp && $util.isInteger(message.timestamp.low) && $util.isInteger(message.timestamp.high)))
                                return "timestamp: integer|Long expected";
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            if (!$util.isString(message.diversifier))
                                return "diversifier: string expected";
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            switch (message.data_type) {
                            default:
                                return "data_type: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a SignBytes message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.SignBytes} SignBytes
                     */
                    SignBytes.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.SignBytes)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.SignBytes();
                        if (object.sequence != null)
                            if ($util.Long)
                                (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                            else if (typeof object.sequence === "string")
                                message.sequence = parseInt(object.sequence, 10);
                            else if (typeof object.sequence === "number")
                                message.sequence = object.sequence;
                            else if (typeof object.sequence === "object")
                                message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                        if (object.timestamp != null)
                            if ($util.Long)
                                (message.timestamp = $util.Long.fromValue(object.timestamp)).unsigned = true;
                            else if (typeof object.timestamp === "string")
                                message.timestamp = parseInt(object.timestamp, 10);
                            else if (typeof object.timestamp === "number")
                                message.timestamp = object.timestamp;
                            else if (typeof object.timestamp === "object")
                                message.timestamp = new $util.LongBits(object.timestamp.low >>> 0, object.timestamp.high >>> 0).toNumber(true);
                        if (object.diversifier != null)
                            message.diversifier = String(object.diversifier);
                        switch (object.data_type) {
                        case "DATA_TYPE_UNINITIALIZED_UNSPECIFIED":
                        case 0:
                            message.data_type = 0;
                            break;
                        case "DATA_TYPE_CLIENT_STATE":
                        case 1:
                            message.data_type = 1;
                            break;
                        case "DATA_TYPE_CONSENSUS_STATE":
                        case 2:
                            message.data_type = 2;
                            break;
                        case "DATA_TYPE_CONNECTION_STATE":
                        case 3:
                            message.data_type = 3;
                            break;
                        case "DATA_TYPE_CHANNEL_STATE":
                        case 4:
                            message.data_type = 4;
                            break;
                        case "DATA_TYPE_PACKET_COMMITMENT":
                        case 5:
                            message.data_type = 5;
                            break;
                        case "DATA_TYPE_PACKET_ACKNOWLEDGEMENT":
                        case 6:
                            message.data_type = 6;
                            break;
                        case "DATA_TYPE_PACKET_RECEIPT_ABSENCE":
                        case 7:
                            message.data_type = 7;
                            break;
                        case "DATA_TYPE_NEXT_SEQUENCE_RECV":
                        case 8:
                            message.data_type = 8;
                            break;
                        case "DATA_TYPE_HEADER":
                        case 9:
                            message.data_type = 9;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length)
                                message.data = object.data;
                        return message;
                    };

                    /**
                     * Creates a plain object from a SignBytes message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.SignBytes} message SignBytes
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SignBytes.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestamp = options.longs === String ? "0" : 0;
                            object.diversifier = "";
                            object.data_type = options.enums === String ? "DATA_TYPE_UNINITIALIZED_UNSPECIFIED" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.sequence != null && message.hasOwnProperty("sequence"))
                            if (typeof message.sequence === "number")
                                object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                            else
                                object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            if (typeof message.timestamp === "number")
                                object.timestamp = options.longs === String ? String(message.timestamp) : message.timestamp;
                            else
                                object.timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timestamp) : options.longs === Number ? new $util.LongBits(message.timestamp.low >>> 0, message.timestamp.high >>> 0).toNumber(true) : message.timestamp;
                        if (message.diversifier != null && message.hasOwnProperty("diversifier"))
                            object.diversifier = message.diversifier;
                        if (message.data_type != null && message.hasOwnProperty("data_type"))
                            object.data_type = options.enums === String ? $root.ibc.lightclients.solomachine.v2.DataType[message.data_type] : message.data_type;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };

                    /**
                     * Converts this SignBytes to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.SignBytes
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SignBytes.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return SignBytes;
                })();

                /**
                 * DataType enum.
                 * @name ibc.lightclients.solomachine.v2.DataType
                 * @enum {number}
                 * @property {number} DATA_TYPE_UNINITIALIZED_UNSPECIFIED=0 DATA_TYPE_UNINITIALIZED_UNSPECIFIED value
                 * @property {number} DATA_TYPE_CLIENT_STATE=1 DATA_TYPE_CLIENT_STATE value
                 * @property {number} DATA_TYPE_CONSENSUS_STATE=2 DATA_TYPE_CONSENSUS_STATE value
                 * @property {number} DATA_TYPE_CONNECTION_STATE=3 DATA_TYPE_CONNECTION_STATE value
                 * @property {number} DATA_TYPE_CHANNEL_STATE=4 DATA_TYPE_CHANNEL_STATE value
                 * @property {number} DATA_TYPE_PACKET_COMMITMENT=5 DATA_TYPE_PACKET_COMMITMENT value
                 * @property {number} DATA_TYPE_PACKET_ACKNOWLEDGEMENT=6 DATA_TYPE_PACKET_ACKNOWLEDGEMENT value
                 * @property {number} DATA_TYPE_PACKET_RECEIPT_ABSENCE=7 DATA_TYPE_PACKET_RECEIPT_ABSENCE value
                 * @property {number} DATA_TYPE_NEXT_SEQUENCE_RECV=8 DATA_TYPE_NEXT_SEQUENCE_RECV value
                 * @property {number} DATA_TYPE_HEADER=9 DATA_TYPE_HEADER value
                 */
                v2.DataType = (function() {
                    const valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "DATA_TYPE_UNINITIALIZED_UNSPECIFIED"] = 0;
                    values[valuesById[1] = "DATA_TYPE_CLIENT_STATE"] = 1;
                    values[valuesById[2] = "DATA_TYPE_CONSENSUS_STATE"] = 2;
                    values[valuesById[3] = "DATA_TYPE_CONNECTION_STATE"] = 3;
                    values[valuesById[4] = "DATA_TYPE_CHANNEL_STATE"] = 4;
                    values[valuesById[5] = "DATA_TYPE_PACKET_COMMITMENT"] = 5;
                    values[valuesById[6] = "DATA_TYPE_PACKET_ACKNOWLEDGEMENT"] = 6;
                    values[valuesById[7] = "DATA_TYPE_PACKET_RECEIPT_ABSENCE"] = 7;
                    values[valuesById[8] = "DATA_TYPE_NEXT_SEQUENCE_RECV"] = 8;
                    values[valuesById[9] = "DATA_TYPE_HEADER"] = 9;
                    return values;
                })();

                v2.HeaderData = (function() {

                    /**
                     * Properties of a HeaderData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IHeaderData
                     * @property {google.protobuf.IAny|null} [new_pub_key] HeaderData new_pub_key
                     * @property {string|null} [new_diversifier] HeaderData new_diversifier
                     */

                    /**
                     * Constructs a new HeaderData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a HeaderData.
                     * @implements IHeaderData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IHeaderData=} [properties] Properties to set
                     */
                    function HeaderData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * HeaderData new_pub_key.
                     * @member {google.protobuf.IAny|null|undefined} new_pub_key
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_pub_key = null;

                    /**
                     * HeaderData new_diversifier.
                     * @member {string} new_diversifier
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @instance
                     */
                    HeaderData.prototype.new_diversifier = "";

                    /**
                     * Encodes the specified HeaderData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.HeaderData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.new_pub_key != null && Object.hasOwnProperty.call(message, "new_pub_key"))
                            $root.google.protobuf.Any.encode(message.new_pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.new_diversifier != null && Object.hasOwnProperty.call(message, "new_diversifier"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.new_diversifier);
                        return writer;
                    };

                    /**
                     * Encodes the specified HeaderData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.HeaderData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IHeaderData} message HeaderData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    HeaderData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.HeaderData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.new_pub_key = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.new_diversifier = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a HeaderData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.HeaderData} HeaderData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    HeaderData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a HeaderData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    HeaderData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key")) {
                            let error = $root.google.protobuf.Any.verify(message.new_pub_key);
                            if (error)
                                return "new_pub_key." + error;
                        }
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            if (!$util.isString(message.new_diversifier))
                                return "new_diversifier: string expected";
                        return null;
                    };

                    /**
                     * Creates a HeaderData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.HeaderData} HeaderData
                     */
                    HeaderData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.HeaderData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.HeaderData();
                        if (object.new_pub_key != null) {
                            if (typeof object.new_pub_key !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.HeaderData.new_pub_key: object expected");
                            message.new_pub_key = $root.google.protobuf.Any.fromObject(object.new_pub_key);
                        }
                        if (object.new_diversifier != null)
                            message.new_diversifier = String(object.new_diversifier);
                        return message;
                    };

                    /**
                     * Creates a plain object from a HeaderData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.HeaderData} message HeaderData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    HeaderData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.new_pub_key = null;
                            object.new_diversifier = "";
                        }
                        if (message.new_pub_key != null && message.hasOwnProperty("new_pub_key"))
                            object.new_pub_key = $root.google.protobuf.Any.toObject(message.new_pub_key, options);
                        if (message.new_diversifier != null && message.hasOwnProperty("new_diversifier"))
                            object.new_diversifier = message.new_diversifier;
                        return object;
                    };

                    /**
                     * Converts this HeaderData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.HeaderData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    HeaderData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return HeaderData;
                })();

                v2.ClientStateData = (function() {

                    /**
                     * Properties of a ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IClientStateData
                     * @property {Uint8Array|null} [path] ClientStateData path
                     * @property {google.protobuf.IAny|null} [client_state] ClientStateData client_state
                     */

                    /**
                     * Constructs a new ClientStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ClientStateData.
                     * @implements IClientStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IClientStateData=} [properties] Properties to set
                     */
                    function ClientStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ClientStateData client_state.
                     * @member {google.protobuf.IAny|null|undefined} client_state
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @instance
                     */
                    ClientStateData.prototype.client_state = null;

                    /**
                     * Encodes the specified ClientStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                            $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ClientStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IClientStateData} message ClientStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ClientStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ClientStateData} ClientStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.client_state != null && message.hasOwnProperty("client_state")) {
                            let error = $root.google.protobuf.Any.verify(message.client_state);
                            if (error)
                                return "client_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ClientStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ClientStateData} ClientStateData
                     */
                    ClientStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ClientStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ClientStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.client_state != null) {
                            if (typeof object.client_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ClientStateData.client_state: object expected");
                            message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ClientStateData} message ClientStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.client_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.client_state != null && message.hasOwnProperty("client_state"))
                            object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                        return object;
                    };

                    /**
                     * Converts this ClientStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ClientStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientStateData;
                })();

                v2.ConsensusStateData = (function() {

                    /**
                     * Properties of a ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IConsensusStateData
                     * @property {Uint8Array|null} [path] ConsensusStateData path
                     * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateData consensus_state
                     */

                    /**
                     * Constructs a new ConsensusStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ConsensusStateData.
                     * @implements IConsensusStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IConsensusStateData=} [properties] Properties to set
                     */
                    function ConsensusStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConsensusStateData consensus_state.
                     * @member {google.protobuf.IAny|null|undefined} consensus_state
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @instance
                     */
                    ConsensusStateData.prototype.consensus_state = null;

                    /**
                     * Encodes the specified ConsensusStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                            $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConsensusStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConsensusStateData} message ConsensusStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ConsensusStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusStateData} ConsensusStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                            let error = $root.google.protobuf.Any.verify(message.consensus_state);
                            if (error)
                                return "consensus_state." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConsensusStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ConsensusStateData} ConsensusStateData
                     */
                    ConsensusStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ConsensusStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ConsensusStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.consensus_state != null) {
                            if (typeof object.consensus_state !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ConsensusStateData.consensus_state: object expected");
                            message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ConsensusStateData} message ConsensusStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.consensus_state = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                            object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                        return object;
                    };

                    /**
                     * Converts this ConsensusStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ConsensusStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusStateData;
                })();

                v2.ConnectionStateData = (function() {

                    /**
                     * Properties of a ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IConnectionStateData
                     * @property {Uint8Array|null} [path] ConnectionStateData path
                     * @property {ibc.core.connection.v1.IConnectionEnd|null} [connection] ConnectionStateData connection
                     */

                    /**
                     * Constructs a new ConnectionStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ConnectionStateData.
                     * @implements IConnectionStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IConnectionStateData=} [properties] Properties to set
                     */
                    function ConnectionStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConnectionStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ConnectionStateData connection.
                     * @member {ibc.core.connection.v1.IConnectionEnd|null|undefined} connection
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @instance
                     */
                    ConnectionStateData.prototype.connection = null;

                    /**
                     * Encodes the specified ConnectionStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConnectionStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.connection != null && Object.hasOwnProperty.call(message, "connection"))
                            $root.ibc.core.connection.v1.ConnectionEnd.encode(message.connection, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ConnectionStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ConnectionStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IConnectionStateData} message ConnectionStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConnectionStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ConnectionStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.connection = $root.ibc.core.connection.v1.ConnectionEnd.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConnectionStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ConnectionStateData} ConnectionStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConnectionStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConnectionStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConnectionStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.connection != null && message.hasOwnProperty("connection")) {
                            let error = $root.ibc.core.connection.v1.ConnectionEnd.verify(message.connection);
                            if (error)
                                return "connection." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ConnectionStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ConnectionStateData} ConnectionStateData
                     */
                    ConnectionStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ConnectionStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ConnectionStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.connection != null) {
                            if (typeof object.connection !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ConnectionStateData.connection: object expected");
                            message.connection = $root.ibc.core.connection.v1.ConnectionEnd.fromObject(object.connection);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConnectionStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ConnectionStateData} message ConnectionStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConnectionStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.connection = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.connection != null && message.hasOwnProperty("connection"))
                            object.connection = $root.ibc.core.connection.v1.ConnectionEnd.toObject(message.connection, options);
                        return object;
                    };

                    /**
                     * Converts this ConnectionStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ConnectionStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConnectionStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConnectionStateData;
                })();

                v2.ChannelStateData = (function() {

                    /**
                     * Properties of a ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IChannelStateData
                     * @property {Uint8Array|null} [path] ChannelStateData path
                     * @property {ibc.core.channel.v1.IChannel|null} [channel] ChannelStateData channel
                     */

                    /**
                     * Constructs a new ChannelStateData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a ChannelStateData.
                     * @implements IChannelStateData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IChannelStateData=} [properties] Properties to set
                     */
                    function ChannelStateData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ChannelStateData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.path = $util.newBuffer([]);

                    /**
                     * ChannelStateData channel.
                     * @member {ibc.core.channel.v1.IChannel|null|undefined} channel
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @instance
                     */
                    ChannelStateData.prototype.channel = null;

                    /**
                     * Encodes the specified ChannelStateData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.ChannelStateData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            $root.ibc.core.channel.v1.Channel.encode(message.channel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified ChannelStateData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.ChannelStateData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IChannelStateData} message ChannelStateData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ChannelStateData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.ChannelStateData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.channel = $root.ibc.core.channel.v1.Channel.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ChannelStateData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.ChannelStateData} ChannelStateData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ChannelStateData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ChannelStateData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ChannelStateData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.channel != null && message.hasOwnProperty("channel")) {
                            let error = $root.ibc.core.channel.v1.Channel.verify(message.channel);
                            if (error)
                                return "channel." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a ChannelStateData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.ChannelStateData} ChannelStateData
                     */
                    ChannelStateData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.ChannelStateData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.ChannelStateData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.channel != null) {
                            if (typeof object.channel !== "object")
                                throw TypeError(".ibc.lightclients.solomachine.v2.ChannelStateData.channel: object expected");
                            message.channel = $root.ibc.core.channel.v1.Channel.fromObject(object.channel);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a ChannelStateData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.ChannelStateData} message ChannelStateData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ChannelStateData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            object.channel = null;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = $root.ibc.core.channel.v1.Channel.toObject(message.channel, options);
                        return object;
                    };

                    /**
                     * Converts this ChannelStateData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.ChannelStateData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ChannelStateData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ChannelStateData;
                })();

                v2.PacketCommitmentData = (function() {

                    /**
                     * Properties of a PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IPacketCommitmentData
                     * @property {Uint8Array|null} [path] PacketCommitmentData path
                     * @property {Uint8Array|null} [commitment] PacketCommitmentData commitment
                     */

                    /**
                     * Constructs a new PacketCommitmentData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a PacketCommitmentData.
                     * @implements IPacketCommitmentData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IPacketCommitmentData=} [properties] Properties to set
                     */
                    function PacketCommitmentData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketCommitmentData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketCommitmentData commitment.
                     * @member {Uint8Array} commitment
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @instance
                     */
                    PacketCommitmentData.prototype.commitment = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketCommitmentData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketCommitmentData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.commitment != null && Object.hasOwnProperty.call(message, "commitment"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.commitment);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketCommitmentData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketCommitmentData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketCommitmentData} message PacketCommitmentData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketCommitmentData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.PacketCommitmentData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.commitment = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketCommitmentData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.PacketCommitmentData} PacketCommitmentData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketCommitmentData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketCommitmentData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketCommitmentData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            if (!(message.commitment && typeof message.commitment.length === "number" || $util.isString(message.commitment)))
                                return "commitment: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketCommitmentData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.PacketCommitmentData} PacketCommitmentData
                     */
                    PacketCommitmentData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.PacketCommitmentData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.PacketCommitmentData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.commitment != null)
                            if (typeof object.commitment === "string")
                                $util.base64.decode(object.commitment, message.commitment = $util.newBuffer($util.base64.length(object.commitment)), 0);
                            else if (object.commitment.length)
                                message.commitment = object.commitment;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketCommitmentData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.PacketCommitmentData} message PacketCommitmentData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketCommitmentData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.commitment = "";
                            else {
                                object.commitment = [];
                                if (options.bytes !== Array)
                                    object.commitment = $util.newBuffer(object.commitment);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.commitment != null && message.hasOwnProperty("commitment"))
                            object.commitment = options.bytes === String ? $util.base64.encode(message.commitment, 0, message.commitment.length) : options.bytes === Array ? Array.prototype.slice.call(message.commitment) : message.commitment;
                        return object;
                    };

                    /**
                     * Converts this PacketCommitmentData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.PacketCommitmentData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketCommitmentData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketCommitmentData;
                })();

                v2.PacketAcknowledgementData = (function() {

                    /**
                     * Properties of a PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IPacketAcknowledgementData
                     * @property {Uint8Array|null} [path] PacketAcknowledgementData path
                     * @property {Uint8Array|null} [acknowledgement] PacketAcknowledgementData acknowledgement
                     */

                    /**
                     * Constructs a new PacketAcknowledgementData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a PacketAcknowledgementData.
                     * @implements IPacketAcknowledgementData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IPacketAcknowledgementData=} [properties] Properties to set
                     */
                    function PacketAcknowledgementData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketAcknowledgementData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.path = $util.newBuffer([]);

                    /**
                     * PacketAcknowledgementData acknowledgement.
                     * @member {Uint8Array} acknowledgement
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @instance
                     */
                    PacketAcknowledgementData.prototype.acknowledgement = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketAcknowledgementData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketAcknowledgementData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.acknowledgement != null && Object.hasOwnProperty.call(message, "acknowledgement"))
                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.acknowledgement);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketAcknowledgementData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketAcknowledgementData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketAcknowledgementData} message PacketAcknowledgementData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketAcknowledgementData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.PacketAcknowledgementData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.acknowledgement = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketAcknowledgementData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} PacketAcknowledgementData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketAcknowledgementData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketAcknowledgementData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketAcknowledgementData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            if (!(message.acknowledgement && typeof message.acknowledgement.length === "number" || $util.isString(message.acknowledgement)))
                                return "acknowledgement: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketAcknowledgementData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} PacketAcknowledgementData
                     */
                    PacketAcknowledgementData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.PacketAcknowledgementData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.acknowledgement != null)
                            if (typeof object.acknowledgement === "string")
                                $util.base64.decode(object.acknowledgement, message.acknowledgement = $util.newBuffer($util.base64.length(object.acknowledgement)), 0);
                            else if (object.acknowledgement.length)
                                message.acknowledgement = object.acknowledgement;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketAcknowledgementData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.PacketAcknowledgementData} message PacketAcknowledgementData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketAcknowledgementData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if (options.bytes === String)
                                object.acknowledgement = "";
                            else {
                                object.acknowledgement = [];
                                if (options.bytes !== Array)
                                    object.acknowledgement = $util.newBuffer(object.acknowledgement);
                            }
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.acknowledgement != null && message.hasOwnProperty("acknowledgement"))
                            object.acknowledgement = options.bytes === String ? $util.base64.encode(message.acknowledgement, 0, message.acknowledgement.length) : options.bytes === Array ? Array.prototype.slice.call(message.acknowledgement) : message.acknowledgement;
                        return object;
                    };

                    /**
                     * Converts this PacketAcknowledgementData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.PacketAcknowledgementData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketAcknowledgementData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketAcknowledgementData;
                })();

                v2.PacketReceiptAbsenceData = (function() {

                    /**
                     * Properties of a PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface IPacketReceiptAbsenceData
                     * @property {Uint8Array|null} [path] PacketReceiptAbsenceData path
                     */

                    /**
                     * Constructs a new PacketReceiptAbsenceData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a PacketReceiptAbsenceData.
                     * @implements IPacketReceiptAbsenceData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.IPacketReceiptAbsenceData=} [properties] Properties to set
                     */
                    function PacketReceiptAbsenceData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PacketReceiptAbsenceData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @instance
                     */
                    PacketReceiptAbsenceData.prototype.path = $util.newBuffer([]);

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        return writer;
                    };

                    /**
                     * Encodes the specified PacketReceiptAbsenceData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.IPacketReceiptAbsenceData} message PacketReceiptAbsenceData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PacketReceiptAbsenceData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PacketReceiptAbsenceData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PacketReceiptAbsenceData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PacketReceiptAbsenceData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PacketReceiptAbsenceData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a PacketReceiptAbsenceData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} PacketReceiptAbsenceData
                     */
                    PacketReceiptAbsenceData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        return message;
                    };

                    /**
                     * Creates a plain object from a PacketReceiptAbsenceData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData} message PacketReceiptAbsenceData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PacketReceiptAbsenceData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        return object;
                    };

                    /**
                     * Converts this PacketReceiptAbsenceData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PacketReceiptAbsenceData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PacketReceiptAbsenceData;
                })();

                v2.NextSequenceRecvData = (function() {

                    /**
                     * Properties of a NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @interface INextSequenceRecvData
                     * @property {Uint8Array|null} [path] NextSequenceRecvData path
                     * @property {Long|null} [next_seq_recv] NextSequenceRecvData next_seq_recv
                     */

                    /**
                     * Constructs a new NextSequenceRecvData.
                     * @memberof ibc.lightclients.solomachine.v2
                     * @classdesc Represents a NextSequenceRecvData.
                     * @implements INextSequenceRecvData
                     * @constructor
                     * @param {ibc.lightclients.solomachine.v2.INextSequenceRecvData=} [properties] Properties to set
                     */
                    function NextSequenceRecvData(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * NextSequenceRecvData path.
                     * @member {Uint8Array} path
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.path = $util.newBuffer([]);

                    /**
                     * NextSequenceRecvData next_seq_recv.
                     * @member {Long} next_seq_recv
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @instance
                     */
                    NextSequenceRecvData.prototype.next_seq_recv = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified NextSequenceRecvData message. Does not implicitly {@link ibc.lightclients.solomachine.v2.NextSequenceRecvData.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.path);
                        if (message.next_seq_recv != null && Object.hasOwnProperty.call(message, "next_seq_recv"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.next_seq_recv);
                        return writer;
                    };

                    /**
                     * Encodes the specified NextSequenceRecvData message, length delimited. Does not implicitly {@link ibc.lightclients.solomachine.v2.NextSequenceRecvData.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.INextSequenceRecvData} message NextSequenceRecvData message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NextSequenceRecvData.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.solomachine.v2.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.solomachine.v2.NextSequenceRecvData();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.path = reader.bytes();
                                break;
                            case 2:
                                message.next_seq_recv = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a NextSequenceRecvData message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.solomachine.v2.NextSequenceRecvData} NextSequenceRecvData
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NextSequenceRecvData.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a NextSequenceRecvData message.
                     * @function verify
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NextSequenceRecvData.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path"))
                            if (!(message.path && typeof message.path.length === "number" || $util.isString(message.path)))
                                return "path: buffer expected";
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (!$util.isInteger(message.next_seq_recv) && !(message.next_seq_recv && $util.isInteger(message.next_seq_recv.low) && $util.isInteger(message.next_seq_recv.high)))
                                return "next_seq_recv: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a NextSequenceRecvData message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.solomachine.v2.NextSequenceRecvData} NextSequenceRecvData
                     */
                    NextSequenceRecvData.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.solomachine.v2.NextSequenceRecvData)
                            return object;
                        let message = new $root.ibc.lightclients.solomachine.v2.NextSequenceRecvData();
                        if (object.path != null)
                            if (typeof object.path === "string")
                                $util.base64.decode(object.path, message.path = $util.newBuffer($util.base64.length(object.path)), 0);
                            else if (object.path.length)
                                message.path = object.path;
                        if (object.next_seq_recv != null)
                            if ($util.Long)
                                (message.next_seq_recv = $util.Long.fromValue(object.next_seq_recv)).unsigned = true;
                            else if (typeof object.next_seq_recv === "string")
                                message.next_seq_recv = parseInt(object.next_seq_recv, 10);
                            else if (typeof object.next_seq_recv === "number")
                                message.next_seq_recv = object.next_seq_recv;
                            else if (typeof object.next_seq_recv === "object")
                                message.next_seq_recv = new $util.LongBits(object.next_seq_recv.low >>> 0, object.next_seq_recv.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a NextSequenceRecvData message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @static
                     * @param {ibc.lightclients.solomachine.v2.NextSequenceRecvData} message NextSequenceRecvData
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NextSequenceRecvData.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.path = "";
                            else {
                                object.path = [];
                                if (options.bytes !== Array)
                                    object.path = $util.newBuffer(object.path);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.next_seq_recv = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.next_seq_recv = options.longs === String ? "0" : 0;
                        }
                        if (message.path != null && message.hasOwnProperty("path"))
                            object.path = options.bytes === String ? $util.base64.encode(message.path, 0, message.path.length) : options.bytes === Array ? Array.prototype.slice.call(message.path) : message.path;
                        if (message.next_seq_recv != null && message.hasOwnProperty("next_seq_recv"))
                            if (typeof message.next_seq_recv === "number")
                                object.next_seq_recv = options.longs === String ? String(message.next_seq_recv) : message.next_seq_recv;
                            else
                                object.next_seq_recv = options.longs === String ? $util.Long.prototype.toString.call(message.next_seq_recv) : options.longs === Number ? new $util.LongBits(message.next_seq_recv.low >>> 0, message.next_seq_recv.high >>> 0).toNumber(true) : message.next_seq_recv;
                        return object;
                    };

                    /**
                     * Converts this NextSequenceRecvData to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.solomachine.v2.NextSequenceRecvData
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NextSequenceRecvData.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return NextSequenceRecvData;
                })();

                return v2;
            })();

            return solomachine;
        })();

        lightclients.tendermint = (function() {

            /**
             * Namespace tendermint.
             * @memberof ibc.lightclients
             * @namespace
             */
            const tendermint = {};

            tendermint.v1 = (function() {

                /**
                 * Namespace v1.
                 * @memberof ibc.lightclients.tendermint
                 * @namespace
                 */
                const v1 = {};

                v1.ClientState = (function() {

                    /**
                     * Properties of a ClientState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IClientState
                     * @property {string|null} [chain_id] ClientState chain_id
                     * @property {ibc.lightclients.tendermint.v1.IFraction|null} [trust_level] ClientState trust_level
                     * @property {google.protobuf.IDuration|null} [trusting_period] ClientState trusting_period
                     * @property {google.protobuf.IDuration|null} [unbonding_period] ClientState unbonding_period
                     * @property {google.protobuf.IDuration|null} [max_clock_drift] ClientState max_clock_drift
                     * @property {ibc.core.client.v1.IHeight|null} [frozen_height] ClientState frozen_height
                     * @property {ibc.core.client.v1.IHeight|null} [latest_height] ClientState latest_height
                     * @property {Array.<ics23.IProofSpec>|null} [proof_specs] ClientState proof_specs
                     * @property {Array.<string>|null} [upgrade_path] ClientState upgrade_path
                     * @property {boolean|null} [allow_update_after_expiry] ClientState allow_update_after_expiry
                     * @property {boolean|null} [allow_update_after_misbehaviour] ClientState allow_update_after_misbehaviour
                     */

                    /**
                     * Constructs a new ClientState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a ClientState.
                     * @implements IClientState
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IClientState=} [properties] Properties to set
                     */
                    function ClientState(properties) {
                        this.proof_specs = [];
                        this.upgrade_path = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ClientState chain_id.
                     * @member {string} chain_id
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.chain_id = "";

                    /**
                     * ClientState trust_level.
                     * @member {ibc.lightclients.tendermint.v1.IFraction|null|undefined} trust_level
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.trust_level = null;

                    /**
                     * ClientState trusting_period.
                     * @member {google.protobuf.IDuration|null|undefined} trusting_period
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.trusting_period = null;

                    /**
                     * ClientState unbonding_period.
                     * @member {google.protobuf.IDuration|null|undefined} unbonding_period
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.unbonding_period = null;

                    /**
                     * ClientState max_clock_drift.
                     * @member {google.protobuf.IDuration|null|undefined} max_clock_drift
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.max_clock_drift = null;

                    /**
                     * ClientState frozen_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} frozen_height
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.frozen_height = null;

                    /**
                     * ClientState latest_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} latest_height
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.latest_height = null;

                    /**
                     * ClientState proof_specs.
                     * @member {Array.<ics23.IProofSpec>} proof_specs
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.proof_specs = $util.emptyArray;

                    /**
                     * ClientState upgrade_path.
                     * @member {Array.<string>} upgrade_path
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.upgrade_path = $util.emptyArray;

                    /**
                     * ClientState allow_update_after_expiry.
                     * @member {boolean} allow_update_after_expiry
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_expiry = false;

                    /**
                     * ClientState allow_update_after_misbehaviour.
                     * @member {boolean} allow_update_after_misbehaviour
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     */
                    ClientState.prototype.allow_update_after_misbehaviour = false;

                    /**
                     * Encodes the specified ClientState message. Does not implicitly {@link ibc.lightclients.tendermint.v1.ClientState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.chain_id);
                        if (message.trust_level != null && Object.hasOwnProperty.call(message, "trust_level"))
                            $root.ibc.lightclients.tendermint.v1.Fraction.encode(message.trust_level, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.trusting_period != null && Object.hasOwnProperty.call(message, "trusting_period"))
                            $root.google.protobuf.Duration.encode(message.trusting_period, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.unbonding_period != null && Object.hasOwnProperty.call(message, "unbonding_period"))
                            $root.google.protobuf.Duration.encode(message.unbonding_period, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.max_clock_drift != null && Object.hasOwnProperty.call(message, "max_clock_drift"))
                            $root.google.protobuf.Duration.encode(message.max_clock_drift, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.frozen_height != null && Object.hasOwnProperty.call(message, "frozen_height"))
                            $root.ibc.core.client.v1.Height.encode(message.frozen_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.latest_height != null && Object.hasOwnProperty.call(message, "latest_height"))
                            $root.ibc.core.client.v1.Height.encode(message.latest_height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        if (message.proof_specs != null && message.proof_specs.length)
                            for (let i = 0; i < message.proof_specs.length; ++i)
                                $root.ics23.ProofSpec.encode(message.proof_specs[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                        if (message.upgrade_path != null && message.upgrade_path.length)
                            for (let i = 0; i < message.upgrade_path.length; ++i)
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.upgrade_path[i]);
                        if (message.allow_update_after_expiry != null && Object.hasOwnProperty.call(message, "allow_update_after_expiry"))
                            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.allow_update_after_expiry);
                        if (message.allow_update_after_misbehaviour != null && Object.hasOwnProperty.call(message, "allow_update_after_misbehaviour"))
                            writer.uint32(/* id 11, wireType 0 =*/88).bool(message.allow_update_after_misbehaviour);
                        return writer;
                    };

                    /**
                     * Encodes the specified ClientState message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.ClientState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IClientState} message ClientState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ClientState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.ClientState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.chain_id = reader.string();
                                break;
                            case 2:
                                message.trust_level = $root.ibc.lightclients.tendermint.v1.Fraction.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.trusting_period = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.unbonding_period = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 5:
                                message.max_clock_drift = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                                break;
                            case 6:
                                message.frozen_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 7:
                                message.latest_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 8:
                                if (!(message.proof_specs && message.proof_specs.length))
                                    message.proof_specs = [];
                                message.proof_specs.push($root.ics23.ProofSpec.decode(reader, reader.uint32()));
                                break;
                            case 9:
                                if (!(message.upgrade_path && message.upgrade_path.length))
                                    message.upgrade_path = [];
                                message.upgrade_path.push(reader.string());
                                break;
                            case 10:
                                message.allow_update_after_expiry = reader.bool();
                                break;
                            case 11:
                                message.allow_update_after_misbehaviour = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ClientState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.ClientState} ClientState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ClientState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ClientState message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ClientState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            if (!$util.isString(message.chain_id))
                                return "chain_id: string expected";
                        if (message.trust_level != null && message.hasOwnProperty("trust_level")) {
                            let error = $root.ibc.lightclients.tendermint.v1.Fraction.verify(message.trust_level);
                            if (error)
                                return "trust_level." + error;
                        }
                        if (message.trusting_period != null && message.hasOwnProperty("trusting_period")) {
                            let error = $root.google.protobuf.Duration.verify(message.trusting_period);
                            if (error)
                                return "trusting_period." + error;
                        }
                        if (message.unbonding_period != null && message.hasOwnProperty("unbonding_period")) {
                            let error = $root.google.protobuf.Duration.verify(message.unbonding_period);
                            if (error)
                                return "unbonding_period." + error;
                        }
                        if (message.max_clock_drift != null && message.hasOwnProperty("max_clock_drift")) {
                            let error = $root.google.protobuf.Duration.verify(message.max_clock_drift);
                            if (error)
                                return "max_clock_drift." + error;
                        }
                        if (message.frozen_height != null && message.hasOwnProperty("frozen_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.frozen_height);
                            if (error)
                                return "frozen_height." + error;
                        }
                        if (message.latest_height != null && message.hasOwnProperty("latest_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.latest_height);
                            if (error)
                                return "latest_height." + error;
                        }
                        if (message.proof_specs != null && message.hasOwnProperty("proof_specs")) {
                            if (!Array.isArray(message.proof_specs))
                                return "proof_specs: array expected";
                            for (let i = 0; i < message.proof_specs.length; ++i) {
                                let error = $root.ics23.ProofSpec.verify(message.proof_specs[i]);
                                if (error)
                                    return "proof_specs." + error;
                            }
                        }
                        if (message.upgrade_path != null && message.hasOwnProperty("upgrade_path")) {
                            if (!Array.isArray(message.upgrade_path))
                                return "upgrade_path: array expected";
                            for (let i = 0; i < message.upgrade_path.length; ++i)
                                if (!$util.isString(message.upgrade_path[i]))
                                    return "upgrade_path: string[] expected";
                        }
                        if (message.allow_update_after_expiry != null && message.hasOwnProperty("allow_update_after_expiry"))
                            if (typeof message.allow_update_after_expiry !== "boolean")
                                return "allow_update_after_expiry: boolean expected";
                        if (message.allow_update_after_misbehaviour != null && message.hasOwnProperty("allow_update_after_misbehaviour"))
                            if (typeof message.allow_update_after_misbehaviour !== "boolean")
                                return "allow_update_after_misbehaviour: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a ClientState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.ClientState} ClientState
                     */
                    ClientState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.ClientState)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.ClientState();
                        if (object.chain_id != null)
                            message.chain_id = String(object.chain_id);
                        if (object.trust_level != null) {
                            if (typeof object.trust_level !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.trust_level: object expected");
                            message.trust_level = $root.ibc.lightclients.tendermint.v1.Fraction.fromObject(object.trust_level);
                        }
                        if (object.trusting_period != null) {
                            if (typeof object.trusting_period !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.trusting_period: object expected");
                            message.trusting_period = $root.google.protobuf.Duration.fromObject(object.trusting_period);
                        }
                        if (object.unbonding_period != null) {
                            if (typeof object.unbonding_period !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.unbonding_period: object expected");
                            message.unbonding_period = $root.google.protobuf.Duration.fromObject(object.unbonding_period);
                        }
                        if (object.max_clock_drift != null) {
                            if (typeof object.max_clock_drift !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.max_clock_drift: object expected");
                            message.max_clock_drift = $root.google.protobuf.Duration.fromObject(object.max_clock_drift);
                        }
                        if (object.frozen_height != null) {
                            if (typeof object.frozen_height !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.frozen_height: object expected");
                            message.frozen_height = $root.ibc.core.client.v1.Height.fromObject(object.frozen_height);
                        }
                        if (object.latest_height != null) {
                            if (typeof object.latest_height !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.latest_height: object expected");
                            message.latest_height = $root.ibc.core.client.v1.Height.fromObject(object.latest_height);
                        }
                        if (object.proof_specs) {
                            if (!Array.isArray(object.proof_specs))
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.proof_specs: array expected");
                            message.proof_specs = [];
                            for (let i = 0; i < object.proof_specs.length; ++i) {
                                if (typeof object.proof_specs[i] !== "object")
                                    throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.proof_specs: object expected");
                                message.proof_specs[i] = $root.ics23.ProofSpec.fromObject(object.proof_specs[i]);
                            }
                        }
                        if (object.upgrade_path) {
                            if (!Array.isArray(object.upgrade_path))
                                throw TypeError(".ibc.lightclients.tendermint.v1.ClientState.upgrade_path: array expected");
                            message.upgrade_path = [];
                            for (let i = 0; i < object.upgrade_path.length; ++i)
                                message.upgrade_path[i] = String(object.upgrade_path[i]);
                        }
                        if (object.allow_update_after_expiry != null)
                            message.allow_update_after_expiry = Boolean(object.allow_update_after_expiry);
                        if (object.allow_update_after_misbehaviour != null)
                            message.allow_update_after_misbehaviour = Boolean(object.allow_update_after_misbehaviour);
                        return message;
                    };

                    /**
                     * Creates a plain object from a ClientState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.ClientState} message ClientState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ClientState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults) {
                            object.proof_specs = [];
                            object.upgrade_path = [];
                        }
                        if (options.defaults) {
                            object.chain_id = "";
                            object.trust_level = null;
                            object.trusting_period = null;
                            object.unbonding_period = null;
                            object.max_clock_drift = null;
                            object.frozen_height = null;
                            object.latest_height = null;
                            object.allow_update_after_expiry = false;
                            object.allow_update_after_misbehaviour = false;
                        }
                        if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                            object.chain_id = message.chain_id;
                        if (message.trust_level != null && message.hasOwnProperty("trust_level"))
                            object.trust_level = $root.ibc.lightclients.tendermint.v1.Fraction.toObject(message.trust_level, options);
                        if (message.trusting_period != null && message.hasOwnProperty("trusting_period"))
                            object.trusting_period = $root.google.protobuf.Duration.toObject(message.trusting_period, options);
                        if (message.unbonding_period != null && message.hasOwnProperty("unbonding_period"))
                            object.unbonding_period = $root.google.protobuf.Duration.toObject(message.unbonding_period, options);
                        if (message.max_clock_drift != null && message.hasOwnProperty("max_clock_drift"))
                            object.max_clock_drift = $root.google.protobuf.Duration.toObject(message.max_clock_drift, options);
                        if (message.frozen_height != null && message.hasOwnProperty("frozen_height"))
                            object.frozen_height = $root.ibc.core.client.v1.Height.toObject(message.frozen_height, options);
                        if (message.latest_height != null && message.hasOwnProperty("latest_height"))
                            object.latest_height = $root.ibc.core.client.v1.Height.toObject(message.latest_height, options);
                        if (message.proof_specs && message.proof_specs.length) {
                            object.proof_specs = [];
                            for (let j = 0; j < message.proof_specs.length; ++j)
                                object.proof_specs[j] = $root.ics23.ProofSpec.toObject(message.proof_specs[j], options);
                        }
                        if (message.upgrade_path && message.upgrade_path.length) {
                            object.upgrade_path = [];
                            for (let j = 0; j < message.upgrade_path.length; ++j)
                                object.upgrade_path[j] = message.upgrade_path[j];
                        }
                        if (message.allow_update_after_expiry != null && message.hasOwnProperty("allow_update_after_expiry"))
                            object.allow_update_after_expiry = message.allow_update_after_expiry;
                        if (message.allow_update_after_misbehaviour != null && message.hasOwnProperty("allow_update_after_misbehaviour"))
                            object.allow_update_after_misbehaviour = message.allow_update_after_misbehaviour;
                        return object;
                    };

                    /**
                     * Converts this ClientState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.ClientState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ClientState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ClientState;
                })();

                v1.ConsensusState = (function() {

                    /**
                     * Properties of a ConsensusState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IConsensusState
                     * @property {google.protobuf.ITimestamp|null} [timestamp] ConsensusState timestamp
                     * @property {ibc.core.commitment.v1.IMerkleRoot|null} [root] ConsensusState root
                     * @property {Uint8Array|null} [next_validators_hash] ConsensusState next_validators_hash
                     */

                    /**
                     * Constructs a new ConsensusState.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a ConsensusState.
                     * @implements IConsensusState
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState=} [properties] Properties to set
                     */
                    function ConsensusState(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * ConsensusState timestamp.
                     * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.timestamp = null;

                    /**
                     * ConsensusState root.
                     * @member {ibc.core.commitment.v1.IMerkleRoot|null|undefined} root
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.root = null;

                    /**
                     * ConsensusState next_validators_hash.
                     * @member {Uint8Array} next_validators_hash
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     */
                    ConsensusState.prototype.next_validators_hash = $util.newBuffer([]);

                    /**
                     * Encodes the specified ConsensusState message. Does not implicitly {@link ibc.lightclients.tendermint.v1.ConsensusState.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.root != null && Object.hasOwnProperty.call(message, "root"))
                            $root.ibc.core.commitment.v1.MerkleRoot.encode(message.root, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.next_validators_hash != null && Object.hasOwnProperty.call(message, "next_validators_hash"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.next_validators_hash);
                        return writer;
                    };

                    /**
                     * Encodes the specified ConsensusState message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.ConsensusState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IConsensusState} message ConsensusState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ConsensusState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.ConsensusState();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.root = $root.ibc.core.commitment.v1.MerkleRoot.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.next_validators_hash = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a ConsensusState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.ConsensusState} ConsensusState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ConsensusState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a ConsensusState message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ConsensusState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                            let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                            if (error)
                                return "timestamp." + error;
                        }
                        if (message.root != null && message.hasOwnProperty("root")) {
                            let error = $root.ibc.core.commitment.v1.MerkleRoot.verify(message.root);
                            if (error)
                                return "root." + error;
                        }
                        if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                            if (!(message.next_validators_hash && typeof message.next_validators_hash.length === "number" || $util.isString(message.next_validators_hash)))
                                return "next_validators_hash: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a ConsensusState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.ConsensusState} ConsensusState
                     */
                    ConsensusState.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.ConsensusState)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.ConsensusState();
                        if (object.timestamp != null) {
                            if (typeof object.timestamp !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ConsensusState.timestamp: object expected");
                            message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                        }
                        if (object.root != null) {
                            if (typeof object.root !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.ConsensusState.root: object expected");
                            message.root = $root.ibc.core.commitment.v1.MerkleRoot.fromObject(object.root);
                        }
                        if (object.next_validators_hash != null)
                            if (typeof object.next_validators_hash === "string")
                                $util.base64.decode(object.next_validators_hash, message.next_validators_hash = $util.newBuffer($util.base64.length(object.next_validators_hash)), 0);
                            else if (object.next_validators_hash.length)
                                message.next_validators_hash = object.next_validators_hash;
                        return message;
                    };

                    /**
                     * Creates a plain object from a ConsensusState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.ConsensusState} message ConsensusState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ConsensusState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.timestamp = null;
                            object.root = null;
                            if (options.bytes === String)
                                object.next_validators_hash = "";
                            else {
                                object.next_validators_hash = [];
                                if (options.bytes !== Array)
                                    object.next_validators_hash = $util.newBuffer(object.next_validators_hash);
                            }
                        }
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                        if (message.root != null && message.hasOwnProperty("root"))
                            object.root = $root.ibc.core.commitment.v1.MerkleRoot.toObject(message.root, options);
                        if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                            object.next_validators_hash = options.bytes === String ? $util.base64.encode(message.next_validators_hash, 0, message.next_validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_validators_hash) : message.next_validators_hash;
                        return object;
                    };

                    /**
                     * Converts this ConsensusState to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.ConsensusState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ConsensusState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return ConsensusState;
                })();

                v1.Misbehaviour = (function() {

                    /**
                     * Properties of a Misbehaviour.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IMisbehaviour
                     * @property {string|null} [client_id] Misbehaviour client_id
                     * @property {ibc.lightclients.tendermint.v1.IHeader|null} [header_1] Misbehaviour header_1
                     * @property {ibc.lightclients.tendermint.v1.IHeader|null} [header_2] Misbehaviour header_2
                     */

                    /**
                     * Constructs a new Misbehaviour.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Misbehaviour.
                     * @implements IMisbehaviour
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour=} [properties] Properties to set
                     */
                    function Misbehaviour(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Misbehaviour client_id.
                     * @member {string} client_id
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.client_id = "";

                    /**
                     * Misbehaviour header_1.
                     * @member {ibc.lightclients.tendermint.v1.IHeader|null|undefined} header_1
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.header_1 = null;

                    /**
                     * Misbehaviour header_2.
                     * @member {ibc.lightclients.tendermint.v1.IHeader|null|undefined} header_2
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     */
                    Misbehaviour.prototype.header_2 = null;

                    /**
                     * Encodes the specified Misbehaviour message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Misbehaviour.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                        if (message.header_1 != null && Object.hasOwnProperty.call(message, "header_1"))
                            $root.ibc.lightclients.tendermint.v1.Header.encode(message.header_1, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.header_2 != null && Object.hasOwnProperty.call(message, "header_2"))
                            $root.ibc.lightclients.tendermint.v1.Header.encode(message.header_2, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Misbehaviour message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.Misbehaviour.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IMisbehaviour} message Misbehaviour message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Misbehaviour.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.Misbehaviour();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.client_id = reader.string();
                                break;
                            case 2:
                                message.header_1 = $root.ibc.lightclients.tendermint.v1.Header.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.header_2 = $root.ibc.lightclients.tendermint.v1.Header.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Misbehaviour message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.Misbehaviour} Misbehaviour
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Misbehaviour.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Misbehaviour message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Misbehaviour.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            if (!$util.isString(message.client_id))
                                return "client_id: string expected";
                        if (message.header_1 != null && message.hasOwnProperty("header_1")) {
                            let error = $root.ibc.lightclients.tendermint.v1.Header.verify(message.header_1);
                            if (error)
                                return "header_1." + error;
                        }
                        if (message.header_2 != null && message.hasOwnProperty("header_2")) {
                            let error = $root.ibc.lightclients.tendermint.v1.Header.verify(message.header_2);
                            if (error)
                                return "header_2." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Misbehaviour message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.Misbehaviour} Misbehaviour
                     */
                    Misbehaviour.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.Misbehaviour)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.Misbehaviour();
                        if (object.client_id != null)
                            message.client_id = String(object.client_id);
                        if (object.header_1 != null) {
                            if (typeof object.header_1 !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Misbehaviour.header_1: object expected");
                            message.header_1 = $root.ibc.lightclients.tendermint.v1.Header.fromObject(object.header_1);
                        }
                        if (object.header_2 != null) {
                            if (typeof object.header_2 !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Misbehaviour.header_2: object expected");
                            message.header_2 = $root.ibc.lightclients.tendermint.v1.Header.fromObject(object.header_2);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Misbehaviour message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.Misbehaviour} message Misbehaviour
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Misbehaviour.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.client_id = "";
                            object.header_1 = null;
                            object.header_2 = null;
                        }
                        if (message.client_id != null && message.hasOwnProperty("client_id"))
                            object.client_id = message.client_id;
                        if (message.header_1 != null && message.hasOwnProperty("header_1"))
                            object.header_1 = $root.ibc.lightclients.tendermint.v1.Header.toObject(message.header_1, options);
                        if (message.header_2 != null && message.hasOwnProperty("header_2"))
                            object.header_2 = $root.ibc.lightclients.tendermint.v1.Header.toObject(message.header_2, options);
                        return object;
                    };

                    /**
                     * Converts this Misbehaviour to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.Misbehaviour
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Misbehaviour.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Misbehaviour;
                })();

                v1.Header = (function() {

                    /**
                     * Properties of a Header.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IHeader
                     * @property {tendermint.types.ISignedHeader|null} [signed_header] Header signed_header
                     * @property {tendermint.types.IValidatorSet|null} [validator_set] Header validator_set
                     * @property {ibc.core.client.v1.IHeight|null} [trusted_height] Header trusted_height
                     * @property {tendermint.types.IValidatorSet|null} [trusted_validators] Header trusted_validators
                     */

                    /**
                     * Constructs a new Header.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Header.
                     * @implements IHeader
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IHeader=} [properties] Properties to set
                     */
                    function Header(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Header signed_header.
                     * @member {tendermint.types.ISignedHeader|null|undefined} signed_header
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.signed_header = null;

                    /**
                     * Header validator_set.
                     * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.validator_set = null;

                    /**
                     * Header trusted_height.
                     * @member {ibc.core.client.v1.IHeight|null|undefined} trusted_height
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.trusted_height = null;

                    /**
                     * Header trusted_validators.
                     * @member {tendermint.types.IValidatorSet|null|undefined} trusted_validators
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     */
                    Header.prototype.trusted_validators = null;

                    /**
                     * Encodes the specified Header message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Header.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.signed_header != null && Object.hasOwnProperty.call(message, "signed_header"))
                            $root.tendermint.types.SignedHeader.encode(message.signed_header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.validator_set != null && Object.hasOwnProperty.call(message, "validator_set"))
                            $root.tendermint.types.ValidatorSet.encode(message.validator_set, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.trusted_height != null && Object.hasOwnProperty.call(message, "trusted_height"))
                            $root.ibc.core.client.v1.Height.encode(message.trusted_height, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.trusted_validators != null && Object.hasOwnProperty.call(message, "trusted_validators"))
                            $root.tendermint.types.ValidatorSet.encode(message.trusted_validators, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Header message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.Header.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IHeader} message Header message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Header.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.Header();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.signed_header = $root.tendermint.types.SignedHeader.decode(reader, reader.uint32());
                                break;
                            case 2:
                                message.validator_set = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.trusted_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                break;
                            case 4:
                                message.trusted_validators = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Header message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.Header} Header
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Header.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Header message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Header.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.signed_header != null && message.hasOwnProperty("signed_header")) {
                            let error = $root.tendermint.types.SignedHeader.verify(message.signed_header);
                            if (error)
                                return "signed_header." + error;
                        }
                        if (message.validator_set != null && message.hasOwnProperty("validator_set")) {
                            let error = $root.tendermint.types.ValidatorSet.verify(message.validator_set);
                            if (error)
                                return "validator_set." + error;
                        }
                        if (message.trusted_height != null && message.hasOwnProperty("trusted_height")) {
                            let error = $root.ibc.core.client.v1.Height.verify(message.trusted_height);
                            if (error)
                                return "trusted_height." + error;
                        }
                        if (message.trusted_validators != null && message.hasOwnProperty("trusted_validators")) {
                            let error = $root.tendermint.types.ValidatorSet.verify(message.trusted_validators);
                            if (error)
                                return "trusted_validators." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Header message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.Header} Header
                     */
                    Header.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.Header)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.Header();
                        if (object.signed_header != null) {
                            if (typeof object.signed_header !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.signed_header: object expected");
                            message.signed_header = $root.tendermint.types.SignedHeader.fromObject(object.signed_header);
                        }
                        if (object.validator_set != null) {
                            if (typeof object.validator_set !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.validator_set: object expected");
                            message.validator_set = $root.tendermint.types.ValidatorSet.fromObject(object.validator_set);
                        }
                        if (object.trusted_height != null) {
                            if (typeof object.trusted_height !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.trusted_height: object expected");
                            message.trusted_height = $root.ibc.core.client.v1.Height.fromObject(object.trusted_height);
                        }
                        if (object.trusted_validators != null) {
                            if (typeof object.trusted_validators !== "object")
                                throw TypeError(".ibc.lightclients.tendermint.v1.Header.trusted_validators: object expected");
                            message.trusted_validators = $root.tendermint.types.ValidatorSet.fromObject(object.trusted_validators);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Header message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.Header} message Header
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Header.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.signed_header = null;
                            object.validator_set = null;
                            object.trusted_height = null;
                            object.trusted_validators = null;
                        }
                        if (message.signed_header != null && message.hasOwnProperty("signed_header"))
                            object.signed_header = $root.tendermint.types.SignedHeader.toObject(message.signed_header, options);
                        if (message.validator_set != null && message.hasOwnProperty("validator_set"))
                            object.validator_set = $root.tendermint.types.ValidatorSet.toObject(message.validator_set, options);
                        if (message.trusted_height != null && message.hasOwnProperty("trusted_height"))
                            object.trusted_height = $root.ibc.core.client.v1.Height.toObject(message.trusted_height, options);
                        if (message.trusted_validators != null && message.hasOwnProperty("trusted_validators"))
                            object.trusted_validators = $root.tendermint.types.ValidatorSet.toObject(message.trusted_validators, options);
                        return object;
                    };

                    /**
                     * Converts this Header to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.Header
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Header.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Header;
                })();

                v1.Fraction = (function() {

                    /**
                     * Properties of a Fraction.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @interface IFraction
                     * @property {Long|null} [numerator] Fraction numerator
                     * @property {Long|null} [denominator] Fraction denominator
                     */

                    /**
                     * Constructs a new Fraction.
                     * @memberof ibc.lightclients.tendermint.v1
                     * @classdesc Represents a Fraction.
                     * @implements IFraction
                     * @constructor
                     * @param {ibc.lightclients.tendermint.v1.IFraction=} [properties] Properties to set
                     */
                    function Fraction(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Fraction numerator.
                     * @member {Long} numerator
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     */
                    Fraction.prototype.numerator = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Fraction denominator.
                     * @member {Long} denominator
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     */
                    Fraction.prototype.denominator = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified Fraction message. Does not implicitly {@link ibc.lightclients.tendermint.v1.Fraction.verify|verify} messages.
                     * @function encode
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IFraction} message Fraction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Fraction.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.numerator != null && Object.hasOwnProperty.call(message, "numerator"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.numerator);
                        if (message.denominator != null && Object.hasOwnProperty.call(message, "denominator"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.denominator);
                        return writer;
                    };

                    /**
                     * Encodes the specified Fraction message, length delimited. Does not implicitly {@link ibc.lightclients.tendermint.v1.Fraction.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.IFraction} message Fraction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Fraction.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Fraction message from the specified reader or buffer.
                     * @function decode
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ibc.lightclients.tendermint.v1.Fraction} Fraction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Fraction.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.lightclients.tendermint.v1.Fraction();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.numerator = reader.uint64();
                                break;
                            case 2:
                                message.denominator = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Fraction message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ibc.lightclients.tendermint.v1.Fraction} Fraction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Fraction.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Fraction message.
                     * @function verify
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Fraction.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.numerator != null && message.hasOwnProperty("numerator"))
                            if (!$util.isInteger(message.numerator) && !(message.numerator && $util.isInteger(message.numerator.low) && $util.isInteger(message.numerator.high)))
                                return "numerator: integer|Long expected";
                        if (message.denominator != null && message.hasOwnProperty("denominator"))
                            if (!$util.isInteger(message.denominator) && !(message.denominator && $util.isInteger(message.denominator.low) && $util.isInteger(message.denominator.high)))
                                return "denominator: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a Fraction message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ibc.lightclients.tendermint.v1.Fraction} Fraction
                     */
                    Fraction.fromObject = function fromObject(object) {
                        if (object instanceof $root.ibc.lightclients.tendermint.v1.Fraction)
                            return object;
                        let message = new $root.ibc.lightclients.tendermint.v1.Fraction();
                        if (object.numerator != null)
                            if ($util.Long)
                                (message.numerator = $util.Long.fromValue(object.numerator)).unsigned = true;
                            else if (typeof object.numerator === "string")
                                message.numerator = parseInt(object.numerator, 10);
                            else if (typeof object.numerator === "number")
                                message.numerator = object.numerator;
                            else if (typeof object.numerator === "object")
                                message.numerator = new $util.LongBits(object.numerator.low >>> 0, object.numerator.high >>> 0).toNumber(true);
                        if (object.denominator != null)
                            if ($util.Long)
                                (message.denominator = $util.Long.fromValue(object.denominator)).unsigned = true;
                            else if (typeof object.denominator === "string")
                                message.denominator = parseInt(object.denominator, 10);
                            else if (typeof object.denominator === "number")
                                message.denominator = object.denominator;
                            else if (typeof object.denominator === "object")
                                message.denominator = new $util.LongBits(object.denominator.low >>> 0, object.denominator.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a Fraction message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @static
                     * @param {ibc.lightclients.tendermint.v1.Fraction} message Fraction
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Fraction.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.numerator = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.numerator = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.denominator = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.denominator = options.longs === String ? "0" : 0;
                        }
                        if (message.numerator != null && message.hasOwnProperty("numerator"))
                            if (typeof message.numerator === "number")
                                object.numerator = options.longs === String ? String(message.numerator) : message.numerator;
                            else
                                object.numerator = options.longs === String ? $util.Long.prototype.toString.call(message.numerator) : options.longs === Number ? new $util.LongBits(message.numerator.low >>> 0, message.numerator.high >>> 0).toNumber(true) : message.numerator;
                        if (message.denominator != null && message.hasOwnProperty("denominator"))
                            if (typeof message.denominator === "number")
                                object.denominator = options.longs === String ? String(message.denominator) : message.denominator;
                            else
                                object.denominator = options.longs === String ? $util.Long.prototype.toString.call(message.denominator) : options.longs === Number ? new $util.LongBits(message.denominator.low >>> 0, message.denominator.high >>> 0).toNumber(true) : message.denominator;
                        return object;
                    };

                    /**
                     * Converts this Fraction to JSON.
                     * @function toJSON
                     * @memberof ibc.lightclients.tendermint.v1.Fraction
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Fraction.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return Fraction;
                })();

                return v1;
            })();

            return tendermint;
        })();

        return lightclients;
    })();

    return ibc;
})();

export const gogoproto = $root.gogoproto = (() => {

    /**
     * Namespace gogoproto.
     * @exports gogoproto
     * @namespace
     */
    const gogoproto = {};

    return gogoproto;
})();

export const cosmos = $root.cosmos = (() => {

    /**
     * Namespace cosmos.
     * @exports cosmos
     * @namespace
     */
    const cosmos = {};

    cosmos.base = (function() {

        /**
         * Namespace base.
         * @memberof cosmos
         * @namespace
         */
        const base = {};

        base.query = (function() {

            /**
             * Namespace query.
             * @memberof cosmos.base
             * @namespace
             */
            const query = {};

            query.v1beta1 = (function() {

                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base.query
                 * @namespace
                 */
                const v1beta1 = {};

                v1beta1.PageRequest = (function() {

                    /**
                     * Properties of a PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageRequest
                     * @property {Uint8Array|null} [key] PageRequest key
                     * @property {Long|null} [offset] PageRequest offset
                     * @property {Long|null} [limit] PageRequest limit
                     * @property {boolean|null} [count_total] PageRequest count_total
                     */

                    /**
                     * Constructs a new PageRequest.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageRequest.
                     * @implements IPageRequest
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageRequest=} [properties] Properties to set
                     */
                    function PageRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageRequest key.
                     * @member {Uint8Array} key
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.key = $util.newBuffer([]);

                    /**
                     * PageRequest offset.
                     * @member {Long} offset
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest limit.
                     * @member {Long} limit
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * PageRequest count_total.
                     * @member {boolean} count_total
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     */
                    PageRequest.prototype.count_total = false;

                    /**
                     * Encodes the specified PageRequest message. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                        if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.offset);
                        if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.limit);
                        if (message.count_total != null && Object.hasOwnProperty.call(message, "count_total"))
                            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.count_total);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageRequest message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.key = reader.bytes();
                                break;
                            case 2:
                                message.offset = reader.uint64();
                                break;
                            case 3:
                                message.limit = reader.uint64();
                                break;
                            case 4:
                                message.count_total = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageRequest message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.key != null && message.hasOwnProperty("key"))
                            if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                return "key: buffer expected";
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (!$util.isInteger(message.offset) && !(message.offset && $util.isInteger(message.offset.low) && $util.isInteger(message.offset.high)))
                                return "offset: integer|Long expected";
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                                return "limit: integer|Long expected";
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            if (typeof message.count_total !== "boolean")
                                return "count_total: boolean expected";
                        return null;
                    };

                    /**
                     * Creates a PageRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                     */
                    PageRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageRequest)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageRequest();
                        if (object.key != null)
                            if (typeof object.key === "string")
                                $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                            else if (object.key.length)
                                message.key = object.key;
                        if (object.offset != null)
                            if ($util.Long)
                                (message.offset = $util.Long.fromValue(object.offset)).unsigned = true;
                            else if (typeof object.offset === "string")
                                message.offset = parseInt(object.offset, 10);
                            else if (typeof object.offset === "number")
                                message.offset = object.offset;
                            else if (typeof object.offset === "object")
                                message.offset = new $util.LongBits(object.offset.low >>> 0, object.offset.high >>> 0).toNumber(true);
                        if (object.limit != null)
                            if ($util.Long)
                                (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                            else if (typeof object.limit === "string")
                                message.limit = parseInt(object.limit, 10);
                            else if (typeof object.limit === "number")
                                message.limit = object.limit;
                            else if (typeof object.limit === "object")
                                message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                        if (object.count_total != null)
                            message.count_total = Boolean(object.count_total);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageRequest} message PageRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.key = "";
                            else {
                                object.key = [];
                                if (options.bytes !== Array)
                                    object.key = $util.newBuffer(object.key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.offset = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.limit = options.longs === String ? "0" : 0;
                            object.count_total = false;
                        }
                        if (message.key != null && message.hasOwnProperty("key"))
                            object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                        if (message.offset != null && message.hasOwnProperty("offset"))
                            if (typeof message.offset === "number")
                                object.offset = options.longs === String ? String(message.offset) : message.offset;
                            else
                                object.offset = options.longs === String ? $util.Long.prototype.toString.call(message.offset) : options.longs === Number ? new $util.LongBits(message.offset.low >>> 0, message.offset.high >>> 0).toNumber(true) : message.offset;
                        if (message.limit != null && message.hasOwnProperty("limit"))
                            if (typeof message.limit === "number")
                                object.limit = options.longs === String ? String(message.limit) : message.limit;
                            else
                                object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                        if (message.count_total != null && message.hasOwnProperty("count_total"))
                            object.count_total = message.count_total;
                        return object;
                    };

                    /**
                     * Converts this PageRequest to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageRequest;
                })();

                v1beta1.PageResponse = (function() {

                    /**
                     * Properties of a PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @interface IPageResponse
                     * @property {Uint8Array|null} [next_key] PageResponse next_key
                     * @property {Long|null} [total] PageResponse total
                     */

                    /**
                     * Constructs a new PageResponse.
                     * @memberof cosmos.base.query.v1beta1
                     * @classdesc Represents a PageResponse.
                     * @implements IPageResponse
                     * @constructor
                     * @param {cosmos.base.query.v1beta1.IPageResponse=} [properties] Properties to set
                     */
                    function PageResponse(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * PageResponse next_key.
                     * @member {Uint8Array} next_key
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.next_key = $util.newBuffer([]);

                    /**
                     * PageResponse total.
                     * @member {Long} total
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     */
                    PageResponse.prototype.total = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

                    /**
                     * Encodes the specified PageResponse message. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.next_key != null && Object.hasOwnProperty.call(message, "next_key"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.next_key);
                        if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.total);
                        return writer;
                    };

                    /**
                     * Encodes the specified PageResponse message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.next_key = reader.bytes();
                                break;
                            case 2:
                                message.total = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a PageResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PageResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a PageResponse message.
                     * @function verify
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PageResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            if (!(message.next_key && typeof message.next_key.length === "number" || $util.isString(message.next_key)))
                                return "next_key: buffer expected";
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                                return "total: integer|Long expected";
                        return null;
                    };

                    /**
                     * Creates a PageResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                     */
                    PageResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.query.v1beta1.PageResponse)
                            return object;
                        let message = new $root.cosmos.base.query.v1beta1.PageResponse();
                        if (object.next_key != null)
                            if (typeof object.next_key === "string")
                                $util.base64.decode(object.next_key, message.next_key = $util.newBuffer($util.base64.length(object.next_key)), 0);
                            else if (object.next_key.length)
                                message.next_key = object.next_key;
                        if (object.total != null)
                            if ($util.Long)
                                (message.total = $util.Long.fromValue(object.total)).unsigned = true;
                            else if (typeof object.total === "string")
                                message.total = parseInt(object.total, 10);
                            else if (typeof object.total === "number")
                                message.total = object.total;
                            else if (typeof object.total === "object")
                                message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber(true);
                        return message;
                    };

                    /**
                     * Creates a plain object from a PageResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @static
                     * @param {cosmos.base.query.v1beta1.PageResponse} message PageResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PageResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            if (options.bytes === String)
                                object.next_key = "";
                            else {
                                object.next_key = [];
                                if (options.bytes !== Array)
                                    object.next_key = $util.newBuffer(object.next_key);
                            }
                            if ($util.Long) {
                                let long = new $util.Long(0, 0, true);
                                object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.total = options.longs === String ? "0" : 0;
                        }
                        if (message.next_key != null && message.hasOwnProperty("next_key"))
                            object.next_key = options.bytes === String ? $util.base64.encode(message.next_key, 0, message.next_key.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_key) : message.next_key;
                        if (message.total != null && message.hasOwnProperty("total"))
                            if (typeof message.total === "number")
                                object.total = options.longs === String ? String(message.total) : message.total;
                            else
                                object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber(true) : message.total;
                        return object;
                    };

                    /**
                     * Converts this PageResponse to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.query.v1beta1.PageResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PageResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    return PageResponse;
                })();

                return v1beta1;
            })();

            return query;
        })();

        base.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.base
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Coin = (function() {

                /**
                 * Properties of a Coin.
                 * @memberof cosmos.base.v1beta1
                 * @interface ICoin
                 * @property {string|null} [denom] Coin denom
                 * @property {string|null} [amount] Coin amount
                 */

                /**
                 * Constructs a new Coin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a Coin.
                 * @implements ICoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                 */
                function Coin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Coin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.denom = "";

                /**
                 * Coin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 */
                Coin.prototype.amount = "";

                /**
                 * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Coin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.Coin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Coin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Coin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Coin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Coin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a Coin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.Coin} Coin
                 */
                Coin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.Coin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.Coin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a Coin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.Coin
                 * @static
                 * @param {cosmos.base.v1beta1.Coin} message Coin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Coin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this Coin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.Coin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Coin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Coin;
            })();

            v1beta1.DecCoin = (function() {

                /**
                 * Properties of a DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecCoin
                 * @property {string|null} [denom] DecCoin denom
                 * @property {string|null} [amount] DecCoin amount
                 */

                /**
                 * Constructs a new DecCoin.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecCoin.
                 * @implements IDecCoin
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                 */
                function DecCoin(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecCoin denom.
                 * @member {string} denom
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.denom = "";

                /**
                 * DecCoin amount.
                 * @member {string} amount
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 */
                DecCoin.prototype.amount = "";

                /**
                 * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                    if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                    return writer;
                };

                /**
                 * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecCoin.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecCoin();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.denom = reader.string();
                            break;
                        case 2:
                            message.amount = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecCoin message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecCoin.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecCoin message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecCoin.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        if (!$util.isString(message.denom))
                            return "denom: string expected";
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        if (!$util.isString(message.amount))
                            return "amount: string expected";
                    return null;
                };

                /**
                 * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                 */
                DecCoin.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecCoin)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecCoin();
                    if (object.denom != null)
                        message.denom = String(object.denom);
                    if (object.amount != null)
                        message.amount = String(object.amount);
                    return message;
                };

                /**
                 * Creates a plain object from a DecCoin message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @static
                 * @param {cosmos.base.v1beta1.DecCoin} message DecCoin
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecCoin.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.denom = "";
                        object.amount = "";
                    }
                    if (message.denom != null && message.hasOwnProperty("denom"))
                        object.denom = message.denom;
                    if (message.amount != null && message.hasOwnProperty("amount"))
                        object.amount = message.amount;
                    return object;
                };

                /**
                 * Converts this DecCoin to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecCoin
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecCoin.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecCoin;
            })();

            v1beta1.IntProto = (function() {

                /**
                 * Properties of an IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IIntProto
                 * @property {string|null} [int] IntProto int
                 */

                /**
                 * Constructs a new IntProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents an IntProto.
                 * @implements IIntProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                 */
                function IntProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * IntProto int.
                 * @member {string} int
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 */
                IntProto.prototype.int = "";

                /**
                 * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.int != null && Object.hasOwnProperty.call(message, "int"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.int);
                    return writer;
                };

                /**
                 * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                IntProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.IntProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.int = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an IntProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                IntProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an IntProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                IntProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.int != null && message.hasOwnProperty("int"))
                        if (!$util.isString(message.int))
                            return "int: string expected";
                    return null;
                };

                /**
                 * Creates an IntProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.IntProto} IntProto
                 */
                IntProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.IntProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.IntProto();
                    if (object.int != null)
                        message.int = String(object.int);
                    return message;
                };

                /**
                 * Creates a plain object from an IntProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @static
                 * @param {cosmos.base.v1beta1.IntProto} message IntProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                IntProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.int = "";
                    if (message.int != null && message.hasOwnProperty("int"))
                        object.int = message.int;
                    return object;
                };

                /**
                 * Converts this IntProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.IntProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                IntProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return IntProto;
            })();

            v1beta1.DecProto = (function() {

                /**
                 * Properties of a DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @interface IDecProto
                 * @property {string|null} [dec] DecProto dec
                 */

                /**
                 * Constructs a new DecProto.
                 * @memberof cosmos.base.v1beta1
                 * @classdesc Represents a DecProto.
                 * @implements IDecProto
                 * @constructor
                 * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                 */
                function DecProto(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * DecProto dec.
                 * @member {string} dec
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 */
                DecProto.prototype.dec = "";

                /**
                 * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.dec != null && Object.hasOwnProperty.call(message, "dec"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.dec);
                    return writer;
                };

                /**
                 * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DecProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecProto();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.dec = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a DecProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DecProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a DecProto message.
                 * @function verify
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DecProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        if (!$util.isString(message.dec))
                            return "dec: string expected";
                    return null;
                };

                /**
                 * Creates a DecProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.base.v1beta1.DecProto} DecProto
                 */
                DecProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.base.v1beta1.DecProto)
                        return object;
                    let message = new $root.cosmos.base.v1beta1.DecProto();
                    if (object.dec != null)
                        message.dec = String(object.dec);
                    return message;
                };

                /**
                 * Creates a plain object from a DecProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @static
                 * @param {cosmos.base.v1beta1.DecProto} message DecProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DecProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults)
                        object.dec = "";
                    if (message.dec != null && message.hasOwnProperty("dec"))
                        object.dec = message.dec;
                    return object;
                };

                /**
                 * Converts this DecProto to JSON.
                 * @function toJSON
                 * @memberof cosmos.base.v1beta1.DecProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DecProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return DecProto;
            })();

            return v1beta1;
        })();

        return base;
    })();

    cosmos.upgrade = (function() {

        /**
         * Namespace upgrade.
         * @memberof cosmos
         * @namespace
         */
        const upgrade = {};

        upgrade.v1beta1 = (function() {

            /**
             * Namespace v1beta1.
             * @memberof cosmos.upgrade
             * @namespace
             */
            const v1beta1 = {};

            v1beta1.Plan = (function() {

                /**
                 * Properties of a Plan.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface IPlan
                 * @property {string|null} [name] Plan name
                 * @property {google.protobuf.ITimestamp|null} [time] Plan time
                 * @property {Long|null} [height] Plan height
                 * @property {string|null} [info] Plan info
                 */

                /**
                 * Constructs a new Plan.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a Plan.
                 * @implements IPlan
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.IPlan=} [properties] Properties to set
                 */
                function Plan(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Plan name.
                 * @member {string} name
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.name = "";

                /**
                 * Plan time.
                 * @member {google.protobuf.ITimestamp|null|undefined} time
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.time = null;

                /**
                 * Plan height.
                 * @member {Long} height
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * Plan info.
                 * @member {string} info
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 */
                Plan.prototype.info = "";

                /**
                 * Encodes the specified Plan message. Does not implicitly {@link cosmos.upgrade.v1beta1.Plan.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IPlan} message Plan message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Plan.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                        $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                    if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                    return writer;
                };

                /**
                 * Encodes the specified Plan message, length delimited. Does not implicitly {@link cosmos.upgrade.v1beta1.Plan.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {cosmos.upgrade.v1beta1.IPlan} message Plan message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Plan.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Plan message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.Plan} Plan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Plan.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.upgrade.v1beta1.Plan();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.height = reader.int64();
                            break;
                        case 4:
                            message.info = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Plan message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.upgrade.v1beta1.Plan} Plan
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Plan.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Plan message.
                 * @function verify
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Plan.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.time != null && message.hasOwnProperty("time")) {
                        let error = $root.google.protobuf.Timestamp.verify(message.time);
                        if (error)
                            return "time." + error;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.info != null && message.hasOwnProperty("info"))
                        if (!$util.isString(message.info))
                            return "info: string expected";
                    return null;
                };

                /**
                 * Creates a Plan message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.upgrade.v1beta1.Plan} Plan
                 */
                Plan.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.upgrade.v1beta1.Plan)
                        return object;
                    let message = new $root.cosmos.upgrade.v1beta1.Plan();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.time != null) {
                        if (typeof object.time !== "object")
                            throw TypeError(".cosmos.upgrade.v1beta1.Plan.time: object expected");
                        message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                    }
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.info != null)
                        message.info = String(object.info);
                    return message;
                };

                /**
                 * Creates a plain object from a Plan message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @static
                 * @param {cosmos.upgrade.v1beta1.Plan} message Plan
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Plan.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.time = null;
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.info = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.info != null && message.hasOwnProperty("info"))
                        object.info = message.info;
                    return object;
                };

                /**
                 * Converts this Plan to JSON.
                 * @function toJSON
                 * @memberof cosmos.upgrade.v1beta1.Plan
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Plan.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Plan;
            })();

            v1beta1.SoftwareUpgradeProposal = (function() {

                /**
                 * Properties of a SoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface ISoftwareUpgradeProposal
                 * @property {string|null} [title] SoftwareUpgradeProposal title
                 * @property {string|null} [description] SoftwareUpgradeProposal description
                 * @property {cosmos.upgrade.v1beta1.IPlan|null} [plan] SoftwareUpgradeProposal plan
                 */

                /**
                 * Constructs a new SoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a SoftwareUpgradeProposal.
                 * @implements ISoftwareUpgradeProposal
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal=} [properties] Properties to set
                 */
                function SoftwareUpgradeProposal(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * SoftwareUpgradeProposal title.
                 * @member {string} title
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @instance
                 */
                SoftwareUpgradeProposal.prototype.title = "";

                /**
                 * SoftwareUpgradeProposal description.
                 * @member {string} description
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @instance
                 */
                SoftwareUpgradeProposal.prototype.description = "";

                /**
                 * SoftwareUpgradeProposal plan.
                 * @member {cosmos.upgrade.v1beta1.IPlan|null|undefined} plan
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @instance
                 */
                SoftwareUpgradeProposal.prototype.plan = null;

                /**
                 * Encodes the specified SoftwareUpgradeProposal message. Does not implicitly {@link cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal} message SoftwareUpgradeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SoftwareUpgradeProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    if (message.plan != null && Object.hasOwnProperty.call(message, "plan"))
                        $root.cosmos.upgrade.v1beta1.Plan.encode(message.plan, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified SoftwareUpgradeProposal message, length delimited. Does not implicitly {@link cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal} message SoftwareUpgradeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SoftwareUpgradeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a SoftwareUpgradeProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} SoftwareUpgradeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SoftwareUpgradeProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.upgrade.v1beta1.SoftwareUpgradeProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        case 3:
                            message.plan = $root.cosmos.upgrade.v1beta1.Plan.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a SoftwareUpgradeProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} SoftwareUpgradeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SoftwareUpgradeProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a SoftwareUpgradeProposal message.
                 * @function verify
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SoftwareUpgradeProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    if (message.plan != null && message.hasOwnProperty("plan")) {
                        let error = $root.cosmos.upgrade.v1beta1.Plan.verify(message.plan);
                        if (error)
                            return "plan." + error;
                    }
                    return null;
                };

                /**
                 * Creates a SoftwareUpgradeProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} SoftwareUpgradeProposal
                 */
                SoftwareUpgradeProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
                        return object;
                    let message = new $root.cosmos.upgrade.v1beta1.SoftwareUpgradeProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    if (object.plan != null) {
                        if (typeof object.plan !== "object")
                            throw TypeError(".cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.plan: object expected");
                        message.plan = $root.cosmos.upgrade.v1beta1.Plan.fromObject(object.plan);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a SoftwareUpgradeProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} message SoftwareUpgradeProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SoftwareUpgradeProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                        object.plan = null;
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    if (message.plan != null && message.hasOwnProperty("plan"))
                        object.plan = $root.cosmos.upgrade.v1beta1.Plan.toObject(message.plan, options);
                    return object;
                };

                /**
                 * Converts this SoftwareUpgradeProposal to JSON.
                 * @function toJSON
                 * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SoftwareUpgradeProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return SoftwareUpgradeProposal;
            })();

            v1beta1.CancelSoftwareUpgradeProposal = (function() {

                /**
                 * Properties of a CancelSoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @interface ICancelSoftwareUpgradeProposal
                 * @property {string|null} [title] CancelSoftwareUpgradeProposal title
                 * @property {string|null} [description] CancelSoftwareUpgradeProposal description
                 */

                /**
                 * Constructs a new CancelSoftwareUpgradeProposal.
                 * @memberof cosmos.upgrade.v1beta1
                 * @classdesc Represents a CancelSoftwareUpgradeProposal.
                 * @implements ICancelSoftwareUpgradeProposal
                 * @constructor
                 * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal=} [properties] Properties to set
                 */
                function CancelSoftwareUpgradeProposal(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * CancelSoftwareUpgradeProposal title.
                 * @member {string} title
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @instance
                 */
                CancelSoftwareUpgradeProposal.prototype.title = "";

                /**
                 * CancelSoftwareUpgradeProposal description.
                 * @member {string} description
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @instance
                 */
                CancelSoftwareUpgradeProposal.prototype.description = "";

                /**
                 * Encodes the specified CancelSoftwareUpgradeProposal message. Does not implicitly {@link cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.verify|verify} messages.
                 * @function encode
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal} message CancelSoftwareUpgradeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelSoftwareUpgradeProposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                    if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                    return writer;
                };

                /**
                 * Encodes the specified CancelSoftwareUpgradeProposal message, length delimited. Does not implicitly {@link cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal} message CancelSoftwareUpgradeProposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CancelSoftwareUpgradeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a CancelSoftwareUpgradeProposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} CancelSoftwareUpgradeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelSoftwareUpgradeProposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.title = reader.string();
                            break;
                        case 2:
                            message.description = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a CancelSoftwareUpgradeProposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} CancelSoftwareUpgradeProposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CancelSoftwareUpgradeProposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a CancelSoftwareUpgradeProposal message.
                 * @function verify
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CancelSoftwareUpgradeProposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.title != null && message.hasOwnProperty("title"))
                        if (!$util.isString(message.title))
                            return "title: string expected";
                    if (message.description != null && message.hasOwnProperty("description"))
                        if (!$util.isString(message.description))
                            return "description: string expected";
                    return null;
                };

                /**
                 * Creates a CancelSoftwareUpgradeProposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} CancelSoftwareUpgradeProposal
                 */
                CancelSoftwareUpgradeProposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
                        return object;
                    let message = new $root.cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal();
                    if (object.title != null)
                        message.title = String(object.title);
                    if (object.description != null)
                        message.description = String(object.description);
                    return message;
                };

                /**
                 * Creates a plain object from a CancelSoftwareUpgradeProposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @static
                 * @param {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} message CancelSoftwareUpgradeProposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CancelSoftwareUpgradeProposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.title = "";
                        object.description = "";
                    }
                    if (message.title != null && message.hasOwnProperty("title"))
                        object.title = message.title;
                    if (message.description != null && message.hasOwnProperty("description"))
                        object.description = message.description;
                    return object;
                };

                /**
                 * Converts this CancelSoftwareUpgradeProposal to JSON.
                 * @function toJSON
                 * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CancelSoftwareUpgradeProposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return CancelSoftwareUpgradeProposal;
            })();

            return v1beta1;
        })();

        return upgrade;
    })();

    return cosmos;
})();

export const ics23 = $root.ics23 = (() => {

    /**
     * Namespace ics23.
     * @exports ics23
     * @namespace
     */
    const ics23 = {};

    /**
     * HashOp enum.
     * @name ics23.HashOp
     * @enum {number}
     * @property {number} NO_HASH=0 NO_HASH value
     * @property {number} SHA256=1 SHA256 value
     * @property {number} SHA512=2 SHA512 value
     * @property {number} KECCAK=3 KECCAK value
     * @property {number} RIPEMD160=4 RIPEMD160 value
     * @property {number} BITCOIN=5 BITCOIN value
     */
    ics23.HashOp = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NO_HASH"] = 0;
        values[valuesById[1] = "SHA256"] = 1;
        values[valuesById[2] = "SHA512"] = 2;
        values[valuesById[3] = "KECCAK"] = 3;
        values[valuesById[4] = "RIPEMD160"] = 4;
        values[valuesById[5] = "BITCOIN"] = 5;
        return values;
    })();

    /**
     * LengthOp defines how to process the key and value of the LeafOp
     * to include length information. After encoding the length with the given
     * algorithm, the length will be prepended to the key and value bytes.
     * (Each one with it's own encoded length)
     * @name ics23.LengthOp
     * @enum {number}
     * @property {number} NO_PREFIX=0 NO_PREFIX value
     * @property {number} VAR_PROTO=1 VAR_PROTO value
     * @property {number} VAR_RLP=2 VAR_RLP value
     * @property {number} FIXED32_BIG=3 FIXED32_BIG value
     * @property {number} FIXED32_LITTLE=4 FIXED32_LITTLE value
     * @property {number} FIXED64_BIG=5 FIXED64_BIG value
     * @property {number} FIXED64_LITTLE=6 FIXED64_LITTLE value
     * @property {number} REQUIRE_32_BYTES=7 REQUIRE_32_BYTES value
     * @property {number} REQUIRE_64_BYTES=8 REQUIRE_64_BYTES value
     */
    ics23.LengthOp = (function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "NO_PREFIX"] = 0;
        values[valuesById[1] = "VAR_PROTO"] = 1;
        values[valuesById[2] = "VAR_RLP"] = 2;
        values[valuesById[3] = "FIXED32_BIG"] = 3;
        values[valuesById[4] = "FIXED32_LITTLE"] = 4;
        values[valuesById[5] = "FIXED64_BIG"] = 5;
        values[valuesById[6] = "FIXED64_LITTLE"] = 6;
        values[valuesById[7] = "REQUIRE_32_BYTES"] = 7;
        values[valuesById[8] = "REQUIRE_64_BYTES"] = 8;
        return values;
    })();

    ics23.ExistenceProof = (function() {

        /**
         * Properties of an ExistenceProof.
         * @memberof ics23
         * @interface IExistenceProof
         * @property {Uint8Array|null} [key] ExistenceProof key
         * @property {Uint8Array|null} [value] ExistenceProof value
         * @property {ics23.ILeafOp|null} [leaf] ExistenceProof leaf
         * @property {Array.<ics23.IInnerOp>|null} [path] ExistenceProof path
         */

        /**
         * Constructs a new ExistenceProof.
         * @memberof ics23
         * @classdesc ExistenceProof takes a key and a value and a set of steps to perform on it.
         * The result of peforming all these steps will provide a "root hash", which can
         * be compared to the value in a header.
         * 
         * Since it is computationally infeasible to produce a hash collission for any of the used
         * cryptographic hash functions, if someone can provide a series of operations to transform
         * a given key and value into a root hash that matches some trusted root, these key and values
         * must be in the referenced merkle tree.
         * 
         * The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
         * which should be controlled by a spec. Eg. with lengthOp as NONE,
         * prefix = FOO, key = BAR, value = CHOICE
         * and
         * prefix = F, key = OOBAR, value = CHOICE
         * would produce the same value.
         * 
         * With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
         * in the ProofSpec is valuable to prevent this mutability. And why all trees should
         * length-prefix the data before hashing it.
         * @implements IExistenceProof
         * @constructor
         * @param {ics23.IExistenceProof=} [properties] Properties to set
         */
        function ExistenceProof(properties) {
            this.path = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * ExistenceProof value.
         * @member {Uint8Array} value
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.value = $util.newBuffer([]);

        /**
         * ExistenceProof leaf.
         * @member {ics23.ILeafOp|null|undefined} leaf
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.leaf = null;

        /**
         * ExistenceProof path.
         * @member {Array.<ics23.IInnerOp>} path
         * @memberof ics23.ExistenceProof
         * @instance
         */
        ExistenceProof.prototype.path = $util.emptyArray;

        /**
         * Encodes the specified ExistenceProof message. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
            if (message.leaf != null && Object.hasOwnProperty.call(message, "leaf"))
                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.path != null && message.path.length)
                for (let i = 0; i < message.path.length; ++i)
                    $root.ics23.InnerOp.encode(message.path[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ExistenceProof message, length delimited. Does not implicitly {@link ics23.ExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.IExistenceProof} message ExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.ExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.ExistenceProof} ExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ExistenceProof();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                case 3:
                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.path && message.path.length))
                        message.path = [];
                    message.path.push($root.ics23.InnerOp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.ExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.ExistenceProof} ExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ExistenceProof message.
         * @function verify
         * @memberof ics23.ExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                    return "value: buffer expected";
            if (message.leaf != null && message.hasOwnProperty("leaf")) {
                let error = $root.ics23.LeafOp.verify(message.leaf);
                if (error)
                    return "leaf." + error;
            }
            if (message.path != null && message.hasOwnProperty("path")) {
                if (!Array.isArray(message.path))
                    return "path: array expected";
                for (let i = 0; i < message.path.length; ++i) {
                    let error = $root.ics23.InnerOp.verify(message.path[i]);
                    if (error)
                        return "path." + error;
                }
            }
            return null;
        };

        /**
         * Creates an ExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.ExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.ExistenceProof} ExistenceProof
         */
        ExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.ExistenceProof)
                return object;
            let message = new $root.ics23.ExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.value != null)
                if (typeof object.value === "string")
                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length)
                    message.value = object.value;
            if (object.leaf != null) {
                if (typeof object.leaf !== "object")
                    throw TypeError(".ics23.ExistenceProof.leaf: object expected");
                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);
            }
            if (object.path) {
                if (!Array.isArray(object.path))
                    throw TypeError(".ics23.ExistenceProof.path: array expected");
                message.path = [];
                for (let i = 0; i < object.path.length; ++i) {
                    if (typeof object.path[i] !== "object")
                        throw TypeError(".ics23.ExistenceProof.path: object expected");
                    message.path[i] = $root.ics23.InnerOp.fromObject(object.path[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an ExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.ExistenceProof
         * @static
         * @param {ics23.ExistenceProof} message ExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.path = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                if (options.bytes === String)
                    object.value = "";
                else {
                    object.value = [];
                    if (options.bytes !== Array)
                        object.value = $util.newBuffer(object.value);
                }
                object.leaf = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
            if (message.leaf != null && message.hasOwnProperty("leaf"))
                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);
            if (message.path && message.path.length) {
                object.path = [];
                for (let j = 0; j < message.path.length; ++j)
                    object.path[j] = $root.ics23.InnerOp.toObject(message.path[j], options);
            }
            return object;
        };

        /**
         * Converts this ExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.ExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ExistenceProof;
    })();

    ics23.NonExistenceProof = (function() {

        /**
         * Properties of a NonExistenceProof.
         * @memberof ics23
         * @interface INonExistenceProof
         * @property {Uint8Array|null} [key] NonExistenceProof key
         * @property {ics23.IExistenceProof|null} [left] NonExistenceProof left
         * @property {ics23.IExistenceProof|null} [right] NonExistenceProof right
         */

        /**
         * Constructs a new NonExistenceProof.
         * @memberof ics23
         * @classdesc Represents a NonExistenceProof.
         * @implements INonExistenceProof
         * @constructor
         * @param {ics23.INonExistenceProof=} [properties] Properties to set
         */
        function NonExistenceProof(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NonExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * NonExistenceProof left.
         * @member {ics23.IExistenceProof|null|undefined} left
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.left = null;

        /**
         * NonExistenceProof right.
         * @member {ics23.IExistenceProof|null|undefined} right
         * @memberof ics23.NonExistenceProof
         * @instance
         */
        NonExistenceProof.prototype.right = null;

        /**
         * Encodes the specified NonExistenceProof message. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NonExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.left != null && Object.hasOwnProperty.call(message, "left"))
                $root.ics23.ExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.right != null && Object.hasOwnProperty.call(message, "right"))
                $root.ics23.ExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NonExistenceProof message, length delimited. Does not implicitly {@link ics23.NonExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.INonExistenceProof} message NonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NonExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.NonExistenceProof} NonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NonExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.NonExistenceProof();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.left = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.right = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NonExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.NonExistenceProof} NonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NonExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NonExistenceProof message.
         * @function verify
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NonExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.left != null && message.hasOwnProperty("left")) {
                let error = $root.ics23.ExistenceProof.verify(message.left);
                if (error)
                    return "left." + error;
            }
            if (message.right != null && message.hasOwnProperty("right")) {
                let error = $root.ics23.ExistenceProof.verify(message.right);
                if (error)
                    return "right." + error;
            }
            return null;
        };

        /**
         * Creates a NonExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.NonExistenceProof} NonExistenceProof
         */
        NonExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.NonExistenceProof)
                return object;
            let message = new $root.ics23.NonExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.left != null) {
                if (typeof object.left !== "object")
                    throw TypeError(".ics23.NonExistenceProof.left: object expected");
                message.left = $root.ics23.ExistenceProof.fromObject(object.left);
            }
            if (object.right != null) {
                if (typeof object.right !== "object")
                    throw TypeError(".ics23.NonExistenceProof.right: object expected");
                message.right = $root.ics23.ExistenceProof.fromObject(object.right);
            }
            return message;
        };

        /**
         * Creates a plain object from a NonExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.NonExistenceProof
         * @static
         * @param {ics23.NonExistenceProof} message NonExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NonExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                object.left = null;
                object.right = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.left != null && message.hasOwnProperty("left"))
                object.left = $root.ics23.ExistenceProof.toObject(message.left, options);
            if (message.right != null && message.hasOwnProperty("right"))
                object.right = $root.ics23.ExistenceProof.toObject(message.right, options);
            return object;
        };

        /**
         * Converts this NonExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.NonExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NonExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NonExistenceProof;
    })();

    ics23.CommitmentProof = (function() {

        /**
         * Properties of a CommitmentProof.
         * @memberof ics23
         * @interface ICommitmentProof
         * @property {ics23.IExistenceProof|null} [exist] CommitmentProof exist
         * @property {ics23.INonExistenceProof|null} [nonexist] CommitmentProof nonexist
         * @property {ics23.IBatchProof|null} [batch] CommitmentProof batch
         * @property {ics23.ICompressedBatchProof|null} [compressed] CommitmentProof compressed
         */

        /**
         * Constructs a new CommitmentProof.
         * @memberof ics23
         * @classdesc Represents a CommitmentProof.
         * @implements ICommitmentProof
         * @constructor
         * @param {ics23.ICommitmentProof=} [properties] Properties to set
         */
        function CommitmentProof(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CommitmentProof exist.
         * @member {ics23.IExistenceProof|null|undefined} exist
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.exist = null;

        /**
         * CommitmentProof nonexist.
         * @member {ics23.INonExistenceProof|null|undefined} nonexist
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.nonexist = null;

        /**
         * CommitmentProof batch.
         * @member {ics23.IBatchProof|null|undefined} batch
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.batch = null;

        /**
         * CommitmentProof compressed.
         * @member {ics23.ICompressedBatchProof|null|undefined} compressed
         * @memberof ics23.CommitmentProof
         * @instance
         */
        CommitmentProof.prototype.compressed = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * CommitmentProof proof.
         * @member {"exist"|"nonexist"|"batch"|"compressed"|undefined} proof
         * @memberof ics23.CommitmentProof
         * @instance
         */
        Object.defineProperty(CommitmentProof.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist", "batch", "compressed"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified CommitmentProof message. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommitmentProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.exist != null && Object.hasOwnProperty.call(message, "exist"))
                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.nonexist != null && Object.hasOwnProperty.call(message, "nonexist"))
                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.batch != null && Object.hasOwnProperty.call(message, "batch"))
                $root.ics23.BatchProof.encode(message.batch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.compressed != null && Object.hasOwnProperty.call(message, "compressed"))
                $root.ics23.CompressedBatchProof.encode(message.compressed, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CommitmentProof message, length delimited. Does not implicitly {@link ics23.CommitmentProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.ICommitmentProof} message CommitmentProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommitmentProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CommitmentProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CommitmentProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CommitmentProof} CommitmentProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommitmentProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CommitmentProof();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.batch = $root.ics23.BatchProof.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.compressed = $root.ics23.CompressedBatchProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CommitmentProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CommitmentProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CommitmentProof} CommitmentProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommitmentProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CommitmentProof message.
         * @function verify
         * @memberof ics23.CommitmentProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CommitmentProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                properties.proof = 1;
                {
                    let error = $root.ics23.ExistenceProof.verify(message.exist);
                    if (error)
                        return "exist." + error;
                }
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    let error = $root.ics23.NonExistenceProof.verify(message.nonexist);
                    if (error)
                        return "nonexist." + error;
                }
            }
            if (message.batch != null && message.hasOwnProperty("batch")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    let error = $root.ics23.BatchProof.verify(message.batch);
                    if (error)
                        return "batch." + error;
                }
            }
            if (message.compressed != null && message.hasOwnProperty("compressed")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    let error = $root.ics23.CompressedBatchProof.verify(message.compressed);
                    if (error)
                        return "compressed." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CommitmentProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CommitmentProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CommitmentProof} CommitmentProof
         */
        CommitmentProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CommitmentProof)
                return object;
            let message = new $root.ics23.CommitmentProof();
            if (object.exist != null) {
                if (typeof object.exist !== "object")
                    throw TypeError(".ics23.CommitmentProof.exist: object expected");
                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);
            }
            if (object.nonexist != null) {
                if (typeof object.nonexist !== "object")
                    throw TypeError(".ics23.CommitmentProof.nonexist: object expected");
                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);
            }
            if (object.batch != null) {
                if (typeof object.batch !== "object")
                    throw TypeError(".ics23.CommitmentProof.batch: object expected");
                message.batch = $root.ics23.BatchProof.fromObject(object.batch);
            }
            if (object.compressed != null) {
                if (typeof object.compressed !== "object")
                    throw TypeError(".ics23.CommitmentProof.compressed: object expected");
                message.compressed = $root.ics23.CompressedBatchProof.fromObject(object.compressed);
            }
            return message;
        };

        /**
         * Creates a plain object from a CommitmentProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CommitmentProof
         * @static
         * @param {ics23.CommitmentProof} message CommitmentProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CommitmentProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);
                if (options.oneofs)
                    object.proof = "exist";
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);
                if (options.oneofs)
                    object.proof = "nonexist";
            }
            if (message.batch != null && message.hasOwnProperty("batch")) {
                object.batch = $root.ics23.BatchProof.toObject(message.batch, options);
                if (options.oneofs)
                    object.proof = "batch";
            }
            if (message.compressed != null && message.hasOwnProperty("compressed")) {
                object.compressed = $root.ics23.CompressedBatchProof.toObject(message.compressed, options);
                if (options.oneofs)
                    object.proof = "compressed";
            }
            return object;
        };

        /**
         * Converts this CommitmentProof to JSON.
         * @function toJSON
         * @memberof ics23.CommitmentProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CommitmentProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CommitmentProof;
    })();

    ics23.LeafOp = (function() {

        /**
         * Properties of a LeafOp.
         * @memberof ics23
         * @interface ILeafOp
         * @property {ics23.HashOp|null} [hash] LeafOp hash
         * @property {ics23.HashOp|null} [prehash_key] LeafOp prehash_key
         * @property {ics23.HashOp|null} [prehash_value] LeafOp prehash_value
         * @property {ics23.LengthOp|null} [length] LeafOp length
         * @property {Uint8Array|null} [prefix] LeafOp prefix
         */

        /**
         * Constructs a new LeafOp.
         * @memberof ics23
         * @classdesc LeafOp represents the raw key-value data we wish to prove, and
         * must be flexible to represent the internal transformation from
         * the original key-value pairs into the basis hash, for many existing
         * merkle trees.
         * 
         * key and value are passed in. So that the signature of this operation is:
         * leafOp(key, value) -> output
         * 
         * To process this, first prehash the keys and values if needed (ANY means no hash in this case):
         * hkey = prehashKey(key)
         * hvalue = prehashValue(value)
         * 
         * Then combine the bytes, and hash it
         * output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
         * @implements ILeafOp
         * @constructor
         * @param {ics23.ILeafOp=} [properties] Properties to set
         */
        function LeafOp(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LeafOp hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.hash = 0;

        /**
         * LeafOp prehash_key.
         * @member {ics23.HashOp} prehash_key
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prehash_key = 0;

        /**
         * LeafOp prehash_value.
         * @member {ics23.HashOp} prehash_value
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prehash_value = 0;

        /**
         * LeafOp length.
         * @member {ics23.LengthOp} length
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.length = 0;

        /**
         * LeafOp prefix.
         * @member {Uint8Array} prefix
         * @memberof ics23.LeafOp
         * @instance
         */
        LeafOp.prototype.prefix = $util.newBuffer([]);

        /**
         * Encodes the specified LeafOp message. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.
         * @function encode
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LeafOp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);
            if (message.prehash_key != null && Object.hasOwnProperty.call(message, "prehash_key"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.prehash_key);
            if (message.prehash_value != null && Object.hasOwnProperty.call(message, "prehash_value"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.prehash_value);
            if (message.length != null && Object.hasOwnProperty.call(message, "length"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.length);
            if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.prefix);
            return writer;
        };

        /**
         * Encodes the specified LeafOp message, length delimited. Does not implicitly {@link ics23.LeafOp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.ILeafOp} message LeafOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LeafOp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LeafOp message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.LeafOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.LeafOp} LeafOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LeafOp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.LeafOp();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.hash = reader.int32();
                    break;
                case 2:
                    message.prehash_key = reader.int32();
                    break;
                case 3:
                    message.prehash_value = reader.int32();
                    break;
                case 4:
                    message.length = reader.int32();
                    break;
                case 5:
                    message.prefix = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LeafOp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.LeafOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.LeafOp} LeafOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LeafOp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LeafOp message.
         * @function verify
         * @memberof ics23.LeafOp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LeafOp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.hash != null && message.hasOwnProperty("hash"))
                switch (message.hash) {
                default:
                    return "hash: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.prehash_key != null && message.hasOwnProperty("prehash_key"))
                switch (message.prehash_key) {
                default:
                    return "prehash_key: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.prehash_value != null && message.hasOwnProperty("prehash_value"))
                switch (message.prehash_value) {
                default:
                    return "prehash_value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.length != null && message.hasOwnProperty("length"))
                switch (message.length) {
                default:
                    return "length: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                    break;
                }
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!(message.prefix && typeof message.prefix.length === "number" || $util.isString(message.prefix)))
                    return "prefix: buffer expected";
            return null;
        };

        /**
         * Creates a LeafOp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.LeafOp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.LeafOp} LeafOp
         */
        LeafOp.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.LeafOp)
                return object;
            let message = new $root.ics23.LeafOp();
            switch (object.hash) {
            case "NO_HASH":
            case 0:
                message.hash = 0;
                break;
            case "SHA256":
            case 1:
                message.hash = 1;
                break;
            case "SHA512":
            case 2:
                message.hash = 2;
                break;
            case "KECCAK":
            case 3:
                message.hash = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.hash = 4;
                break;
            case "BITCOIN":
            case 5:
                message.hash = 5;
                break;
            }
            switch (object.prehash_key) {
            case "NO_HASH":
            case 0:
                message.prehash_key = 0;
                break;
            case "SHA256":
            case 1:
                message.prehash_key = 1;
                break;
            case "SHA512":
            case 2:
                message.prehash_key = 2;
                break;
            case "KECCAK":
            case 3:
                message.prehash_key = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.prehash_key = 4;
                break;
            case "BITCOIN":
            case 5:
                message.prehash_key = 5;
                break;
            }
            switch (object.prehash_value) {
            case "NO_HASH":
            case 0:
                message.prehash_value = 0;
                break;
            case "SHA256":
            case 1:
                message.prehash_value = 1;
                break;
            case "SHA512":
            case 2:
                message.prehash_value = 2;
                break;
            case "KECCAK":
            case 3:
                message.prehash_value = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.prehash_value = 4;
                break;
            case "BITCOIN":
            case 5:
                message.prehash_value = 5;
                break;
            }
            switch (object.length) {
            case "NO_PREFIX":
            case 0:
                message.length = 0;
                break;
            case "VAR_PROTO":
            case 1:
                message.length = 1;
                break;
            case "VAR_RLP":
            case 2:
                message.length = 2;
                break;
            case "FIXED32_BIG":
            case 3:
                message.length = 3;
                break;
            case "FIXED32_LITTLE":
            case 4:
                message.length = 4;
                break;
            case "FIXED64_BIG":
            case 5:
                message.length = 5;
                break;
            case "FIXED64_LITTLE":
            case 6:
                message.length = 6;
                break;
            case "REQUIRE_32_BYTES":
            case 7:
                message.length = 7;
                break;
            case "REQUIRE_64_BYTES":
            case 8:
                message.length = 8;
                break;
            }
            if (object.prefix != null)
                if (typeof object.prefix === "string")
                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);
                else if (object.prefix.length)
                    message.prefix = object.prefix;
            return message;
        };

        /**
         * Creates a plain object from a LeafOp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.LeafOp
         * @static
         * @param {ics23.LeafOp} message LeafOp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LeafOp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.hash = options.enums === String ? "NO_HASH" : 0;
                object.prehash_key = options.enums === String ? "NO_HASH" : 0;
                object.prehash_value = options.enums === String ? "NO_HASH" : 0;
                object.length = options.enums === String ? "NO_PREFIX" : 0;
                if (options.bytes === String)
                    object.prefix = "";
                else {
                    object.prefix = [];
                    if (options.bytes !== Array)
                        object.prefix = $util.newBuffer(object.prefix);
                }
            }
            if (message.hash != null && message.hasOwnProperty("hash"))
                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;
            if (message.prehash_key != null && message.hasOwnProperty("prehash_key"))
                object.prehash_key = options.enums === String ? $root.ics23.HashOp[message.prehash_key] : message.prehash_key;
            if (message.prehash_value != null && message.hasOwnProperty("prehash_value"))
                object.prehash_value = options.enums === String ? $root.ics23.HashOp[message.prehash_value] : message.prehash_value;
            if (message.length != null && message.hasOwnProperty("length"))
                object.length = options.enums === String ? $root.ics23.LengthOp[message.length] : message.length;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;
            return object;
        };

        /**
         * Converts this LeafOp to JSON.
         * @function toJSON
         * @memberof ics23.LeafOp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LeafOp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LeafOp;
    })();

    ics23.InnerOp = (function() {

        /**
         * Properties of an InnerOp.
         * @memberof ics23
         * @interface IInnerOp
         * @property {ics23.HashOp|null} [hash] InnerOp hash
         * @property {Uint8Array|null} [prefix] InnerOp prefix
         * @property {Uint8Array|null} [suffix] InnerOp suffix
         */

        /**
         * Constructs a new InnerOp.
         * @memberof ics23
         * @classdesc InnerOp represents a merkle-proof step that is not a leaf.
         * It represents concatenating two children and hashing them to provide the next result.
         * 
         * The result of the previous step is passed in, so the signature of this op is:
         * innerOp(child) -> output
         * 
         * The result of applying InnerOp should be:
         * output = op.hash(op.prefix || child || op.suffix)
         * 
         * where the || operator is concatenation of binary data,
         * and child is the result of hashing all the tree below this step.
         * 
         * Any special data, like prepending child with the length, or prepending the entire operation with
         * some value to differentiate from leaf nodes, should be included in prefix and suffix.
         * If either of prefix or suffix is empty, we just treat it as an empty string
         * @implements IInnerOp
         * @constructor
         * @param {ics23.IInnerOp=} [properties] Properties to set
         */
        function InnerOp(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InnerOp hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.hash = 0;

        /**
         * InnerOp prefix.
         * @member {Uint8Array} prefix
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.prefix = $util.newBuffer([]);

        /**
         * InnerOp suffix.
         * @member {Uint8Array} suffix
         * @memberof ics23.InnerOp
         * @instance
         */
        InnerOp.prototype.suffix = $util.newBuffer([]);

        /**
         * Encodes the specified InnerOp message. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.
         * @function encode
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerOp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hash);
            if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.prefix);
            if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.suffix);
            return writer;
        };

        /**
         * Encodes the specified InnerOp message, length delimited. Does not implicitly {@link ics23.InnerOp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.IInnerOp} message InnerOp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerOp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InnerOp message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.InnerOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.InnerOp} InnerOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerOp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerOp();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.hash = reader.int32();
                    break;
                case 2:
                    message.prefix = reader.bytes();
                    break;
                case 3:
                    message.suffix = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InnerOp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.InnerOp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.InnerOp} InnerOp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerOp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InnerOp message.
         * @function verify
         * @memberof ics23.InnerOp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InnerOp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.hash != null && message.hasOwnProperty("hash"))
                switch (message.hash) {
                default:
                    return "hash: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                if (!(message.prefix && typeof message.prefix.length === "number" || $util.isString(message.prefix)))
                    return "prefix: buffer expected";
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                if (!(message.suffix && typeof message.suffix.length === "number" || $util.isString(message.suffix)))
                    return "suffix: buffer expected";
            return null;
        };

        /**
         * Creates an InnerOp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.InnerOp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.InnerOp} InnerOp
         */
        InnerOp.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.InnerOp)
                return object;
            let message = new $root.ics23.InnerOp();
            switch (object.hash) {
            case "NO_HASH":
            case 0:
                message.hash = 0;
                break;
            case "SHA256":
            case 1:
                message.hash = 1;
                break;
            case "SHA512":
            case 2:
                message.hash = 2;
                break;
            case "KECCAK":
            case 3:
                message.hash = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.hash = 4;
                break;
            case "BITCOIN":
            case 5:
                message.hash = 5;
                break;
            }
            if (object.prefix != null)
                if (typeof object.prefix === "string")
                    $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);
                else if (object.prefix.length)
                    message.prefix = object.prefix;
            if (object.suffix != null)
                if (typeof object.suffix === "string")
                    $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);
                else if (object.suffix.length)
                    message.suffix = object.suffix;
            return message;
        };

        /**
         * Creates a plain object from an InnerOp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.InnerOp
         * @static
         * @param {ics23.InnerOp} message InnerOp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InnerOp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.hash = options.enums === String ? "NO_HASH" : 0;
                if (options.bytes === String)
                    object.prefix = "";
                else {
                    object.prefix = [];
                    if (options.bytes !== Array)
                        object.prefix = $util.newBuffer(object.prefix);
                }
                if (options.bytes === String)
                    object.suffix = "";
                else {
                    object.suffix = [];
                    if (options.bytes !== Array)
                        object.suffix = $util.newBuffer(object.suffix);
                }
            }
            if (message.hash != null && message.hasOwnProperty("hash"))
                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;
            if (message.prefix != null && message.hasOwnProperty("prefix"))
                object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;
            if (message.suffix != null && message.hasOwnProperty("suffix"))
                object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;
            return object;
        };

        /**
         * Converts this InnerOp to JSON.
         * @function toJSON
         * @memberof ics23.InnerOp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InnerOp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InnerOp;
    })();

    ics23.ProofSpec = (function() {

        /**
         * Properties of a ProofSpec.
         * @memberof ics23
         * @interface IProofSpec
         * @property {ics23.ILeafOp|null} [leaf_spec] ProofSpec leaf_spec
         * @property {ics23.IInnerSpec|null} [inner_spec] ProofSpec inner_spec
         * @property {number|null} [max_depth] ProofSpec max_depth
         * @property {number|null} [min_depth] ProofSpec min_depth
         */

        /**
         * Constructs a new ProofSpec.
         * @memberof ics23
         * @classdesc ProofSpec defines what the expected parameters are for a given proof type.
         * This can be stored in the client and used to validate any incoming proofs.
         * 
         * verify(ProofSpec, Proof) -> Proof | Error
         * 
         * As demonstrated in tests, if we don't fix the algorithm used to calculate the
         * LeafHash for a given tree, there are many possible key-value pairs that can
         * generate a given hash (by interpretting the preimage differently).
         * We need this for proper security, requires client knows a priori what
         * tree format server uses. But not in code, rather a configuration object.
         * @implements IProofSpec
         * @constructor
         * @param {ics23.IProofSpec=} [properties] Properties to set
         */
        function ProofSpec(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProofSpec leaf_spec.
         * @member {ics23.ILeafOp|null|undefined} leaf_spec
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.leaf_spec = null;

        /**
         * ProofSpec inner_spec.
         * @member {ics23.IInnerSpec|null|undefined} inner_spec
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.inner_spec = null;

        /**
         * ProofSpec max_depth.
         * @member {number} max_depth
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.max_depth = 0;

        /**
         * ProofSpec min_depth.
         * @member {number} min_depth
         * @memberof ics23.ProofSpec
         * @instance
         */
        ProofSpec.prototype.min_depth = 0;

        /**
         * Encodes the specified ProofSpec message. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.
         * @function encode
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProofSpec.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.leaf_spec != null && Object.hasOwnProperty.call(message, "leaf_spec"))
                $root.ics23.LeafOp.encode(message.leaf_spec, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.inner_spec != null && Object.hasOwnProperty.call(message, "inner_spec"))
                $root.ics23.InnerSpec.encode(message.inner_spec, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.max_depth != null && Object.hasOwnProperty.call(message, "max_depth"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.max_depth);
            if (message.min_depth != null && Object.hasOwnProperty.call(message, "min_depth"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.min_depth);
            return writer;
        };

        /**
         * Encodes the specified ProofSpec message, length delimited. Does not implicitly {@link ics23.ProofSpec.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.IProofSpec} message ProofSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProofSpec.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProofSpec message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.ProofSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.ProofSpec} ProofSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProofSpec.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.ProofSpec();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.leaf_spec = $root.ics23.LeafOp.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.inner_spec = $root.ics23.InnerSpec.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.max_depth = reader.int32();
                    break;
                case 4:
                    message.min_depth = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProofSpec message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.ProofSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.ProofSpec} ProofSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProofSpec.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProofSpec message.
         * @function verify
         * @memberof ics23.ProofSpec
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProofSpec.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.leaf_spec != null && message.hasOwnProperty("leaf_spec")) {
                let error = $root.ics23.LeafOp.verify(message.leaf_spec);
                if (error)
                    return "leaf_spec." + error;
            }
            if (message.inner_spec != null && message.hasOwnProperty("inner_spec")) {
                let error = $root.ics23.InnerSpec.verify(message.inner_spec);
                if (error)
                    return "inner_spec." + error;
            }
            if (message.max_depth != null && message.hasOwnProperty("max_depth"))
                if (!$util.isInteger(message.max_depth))
                    return "max_depth: integer expected";
            if (message.min_depth != null && message.hasOwnProperty("min_depth"))
                if (!$util.isInteger(message.min_depth))
                    return "min_depth: integer expected";
            return null;
        };

        /**
         * Creates a ProofSpec message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.ProofSpec
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.ProofSpec} ProofSpec
         */
        ProofSpec.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.ProofSpec)
                return object;
            let message = new $root.ics23.ProofSpec();
            if (object.leaf_spec != null) {
                if (typeof object.leaf_spec !== "object")
                    throw TypeError(".ics23.ProofSpec.leaf_spec: object expected");
                message.leaf_spec = $root.ics23.LeafOp.fromObject(object.leaf_spec);
            }
            if (object.inner_spec != null) {
                if (typeof object.inner_spec !== "object")
                    throw TypeError(".ics23.ProofSpec.inner_spec: object expected");
                message.inner_spec = $root.ics23.InnerSpec.fromObject(object.inner_spec);
            }
            if (object.max_depth != null)
                message.max_depth = object.max_depth | 0;
            if (object.min_depth != null)
                message.min_depth = object.min_depth | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProofSpec message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.ProofSpec
         * @static
         * @param {ics23.ProofSpec} message ProofSpec
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProofSpec.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                object.leaf_spec = null;
                object.inner_spec = null;
                object.max_depth = 0;
                object.min_depth = 0;
            }
            if (message.leaf_spec != null && message.hasOwnProperty("leaf_spec"))
                object.leaf_spec = $root.ics23.LeafOp.toObject(message.leaf_spec, options);
            if (message.inner_spec != null && message.hasOwnProperty("inner_spec"))
                object.inner_spec = $root.ics23.InnerSpec.toObject(message.inner_spec, options);
            if (message.max_depth != null && message.hasOwnProperty("max_depth"))
                object.max_depth = message.max_depth;
            if (message.min_depth != null && message.hasOwnProperty("min_depth"))
                object.min_depth = message.min_depth;
            return object;
        };

        /**
         * Converts this ProofSpec to JSON.
         * @function toJSON
         * @memberof ics23.ProofSpec
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProofSpec.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProofSpec;
    })();

    ics23.InnerSpec = (function() {

        /**
         * Properties of an InnerSpec.
         * @memberof ics23
         * @interface IInnerSpec
         * @property {Array.<number>|null} [child_order] InnerSpec child_order
         * @property {number|null} [child_size] InnerSpec child_size
         * @property {number|null} [min_prefix_length] InnerSpec min_prefix_length
         * @property {number|null} [max_prefix_length] InnerSpec max_prefix_length
         * @property {Uint8Array|null} [empty_child] InnerSpec empty_child
         * @property {ics23.HashOp|null} [hash] InnerSpec hash
         */

        /**
         * Constructs a new InnerSpec.
         * @memberof ics23
         * @classdesc Represents an InnerSpec.
         * @implements IInnerSpec
         * @constructor
         * @param {ics23.IInnerSpec=} [properties] Properties to set
         */
        function InnerSpec(properties) {
            this.child_order = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InnerSpec child_order.
         * @member {Array.<number>} child_order
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.child_order = $util.emptyArray;

        /**
         * InnerSpec child_size.
         * @member {number} child_size
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.child_size = 0;

        /**
         * InnerSpec min_prefix_length.
         * @member {number} min_prefix_length
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.min_prefix_length = 0;

        /**
         * InnerSpec max_prefix_length.
         * @member {number} max_prefix_length
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.max_prefix_length = 0;

        /**
         * InnerSpec empty_child.
         * @member {Uint8Array} empty_child
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.empty_child = $util.newBuffer([]);

        /**
         * InnerSpec hash.
         * @member {ics23.HashOp} hash
         * @memberof ics23.InnerSpec
         * @instance
         */
        InnerSpec.prototype.hash = 0;

        /**
         * Encodes the specified InnerSpec message. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.
         * @function encode
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerSpec.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.child_order != null && message.child_order.length) {
                writer.uint32(/* id 1, wireType 2 =*/10).fork();
                for (let i = 0; i < message.child_order.length; ++i)
                    writer.int32(message.child_order[i]);
                writer.ldelim();
            }
            if (message.child_size != null && Object.hasOwnProperty.call(message, "child_size"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.child_size);
            if (message.min_prefix_length != null && Object.hasOwnProperty.call(message, "min_prefix_length"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.min_prefix_length);
            if (message.max_prefix_length != null && Object.hasOwnProperty.call(message, "max_prefix_length"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.max_prefix_length);
            if (message.empty_child != null && Object.hasOwnProperty.call(message, "empty_child"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.empty_child);
            if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.hash);
            return writer;
        };

        /**
         * Encodes the specified InnerSpec message, length delimited. Does not implicitly {@link ics23.InnerSpec.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.IInnerSpec} message InnerSpec message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InnerSpec.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InnerSpec message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.InnerSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.InnerSpec} InnerSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerSpec.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.InnerSpec();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.child_order && message.child_order.length))
                        message.child_order = [];
                    if ((tag & 7) === 2) {
                        let end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.child_order.push(reader.int32());
                    } else
                        message.child_order.push(reader.int32());
                    break;
                case 2:
                    message.child_size = reader.int32();
                    break;
                case 3:
                    message.min_prefix_length = reader.int32();
                    break;
                case 4:
                    message.max_prefix_length = reader.int32();
                    break;
                case 5:
                    message.empty_child = reader.bytes();
                    break;
                case 6:
                    message.hash = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InnerSpec message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.InnerSpec
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.InnerSpec} InnerSpec
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InnerSpec.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InnerSpec message.
         * @function verify
         * @memberof ics23.InnerSpec
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InnerSpec.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.child_order != null && message.hasOwnProperty("child_order")) {
                if (!Array.isArray(message.child_order))
                    return "child_order: array expected";
                for (let i = 0; i < message.child_order.length; ++i)
                    if (!$util.isInteger(message.child_order[i]))
                        return "child_order: integer[] expected";
            }
            if (message.child_size != null && message.hasOwnProperty("child_size"))
                if (!$util.isInteger(message.child_size))
                    return "child_size: integer expected";
            if (message.min_prefix_length != null && message.hasOwnProperty("min_prefix_length"))
                if (!$util.isInteger(message.min_prefix_length))
                    return "min_prefix_length: integer expected";
            if (message.max_prefix_length != null && message.hasOwnProperty("max_prefix_length"))
                if (!$util.isInteger(message.max_prefix_length))
                    return "max_prefix_length: integer expected";
            if (message.empty_child != null && message.hasOwnProperty("empty_child"))
                if (!(message.empty_child && typeof message.empty_child.length === "number" || $util.isString(message.empty_child)))
                    return "empty_child: buffer expected";
            if (message.hash != null && message.hasOwnProperty("hash"))
                switch (message.hash) {
                default:
                    return "hash: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            return null;
        };

        /**
         * Creates an InnerSpec message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.InnerSpec
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.InnerSpec} InnerSpec
         */
        InnerSpec.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.InnerSpec)
                return object;
            let message = new $root.ics23.InnerSpec();
            if (object.child_order) {
                if (!Array.isArray(object.child_order))
                    throw TypeError(".ics23.InnerSpec.child_order: array expected");
                message.child_order = [];
                for (let i = 0; i < object.child_order.length; ++i)
                    message.child_order[i] = object.child_order[i] | 0;
            }
            if (object.child_size != null)
                message.child_size = object.child_size | 0;
            if (object.min_prefix_length != null)
                message.min_prefix_length = object.min_prefix_length | 0;
            if (object.max_prefix_length != null)
                message.max_prefix_length = object.max_prefix_length | 0;
            if (object.empty_child != null)
                if (typeof object.empty_child === "string")
                    $util.base64.decode(object.empty_child, message.empty_child = $util.newBuffer($util.base64.length(object.empty_child)), 0);
                else if (object.empty_child.length)
                    message.empty_child = object.empty_child;
            switch (object.hash) {
            case "NO_HASH":
            case 0:
                message.hash = 0;
                break;
            case "SHA256":
            case 1:
                message.hash = 1;
                break;
            case "SHA512":
            case 2:
                message.hash = 2;
                break;
            case "KECCAK":
            case 3:
                message.hash = 3;
                break;
            case "RIPEMD160":
            case 4:
                message.hash = 4;
                break;
            case "BITCOIN":
            case 5:
                message.hash = 5;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an InnerSpec message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.InnerSpec
         * @static
         * @param {ics23.InnerSpec} message InnerSpec
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InnerSpec.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.child_order = [];
            if (options.defaults) {
                object.child_size = 0;
                object.min_prefix_length = 0;
                object.max_prefix_length = 0;
                if (options.bytes === String)
                    object.empty_child = "";
                else {
                    object.empty_child = [];
                    if (options.bytes !== Array)
                        object.empty_child = $util.newBuffer(object.empty_child);
                }
                object.hash = options.enums === String ? "NO_HASH" : 0;
            }
            if (message.child_order && message.child_order.length) {
                object.child_order = [];
                for (let j = 0; j < message.child_order.length; ++j)
                    object.child_order[j] = message.child_order[j];
            }
            if (message.child_size != null && message.hasOwnProperty("child_size"))
                object.child_size = message.child_size;
            if (message.min_prefix_length != null && message.hasOwnProperty("min_prefix_length"))
                object.min_prefix_length = message.min_prefix_length;
            if (message.max_prefix_length != null && message.hasOwnProperty("max_prefix_length"))
                object.max_prefix_length = message.max_prefix_length;
            if (message.empty_child != null && message.hasOwnProperty("empty_child"))
                object.empty_child = options.bytes === String ? $util.base64.encode(message.empty_child, 0, message.empty_child.length) : options.bytes === Array ? Array.prototype.slice.call(message.empty_child) : message.empty_child;
            if (message.hash != null && message.hasOwnProperty("hash"))
                object.hash = options.enums === String ? $root.ics23.HashOp[message.hash] : message.hash;
            return object;
        };

        /**
         * Converts this InnerSpec to JSON.
         * @function toJSON
         * @memberof ics23.InnerSpec
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InnerSpec.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InnerSpec;
    })();

    ics23.BatchProof = (function() {

        /**
         * Properties of a BatchProof.
         * @memberof ics23
         * @interface IBatchProof
         * @property {Array.<ics23.IBatchEntry>|null} [entries] BatchProof entries
         */

        /**
         * Constructs a new BatchProof.
         * @memberof ics23
         * @classdesc Represents a BatchProof.
         * @implements IBatchProof
         * @constructor
         * @param {ics23.IBatchProof=} [properties] Properties to set
         */
        function BatchProof(properties) {
            this.entries = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BatchProof entries.
         * @member {Array.<ics23.IBatchEntry>} entries
         * @memberof ics23.BatchProof
         * @instance
         */
        BatchProof.prototype.entries = $util.emptyArray;

        /**
         * Encodes the specified BatchProof message. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (let i = 0; i < message.entries.length; ++i)
                    $root.ics23.BatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BatchProof message, length delimited. Does not implicitly {@link ics23.BatchProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.IBatchProof} message BatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BatchProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.BatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.BatchProof} BatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchProof();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.ics23.BatchEntry.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BatchProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.BatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.BatchProof} BatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BatchProof message.
         * @function verify
         * @memberof ics23.BatchProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BatchProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (let i = 0; i < message.entries.length; ++i) {
                    let error = $root.ics23.BatchEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BatchProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.BatchProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.BatchProof} BatchProof
         */
        BatchProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.BatchProof)
                return object;
            let message = new $root.ics23.BatchProof();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".ics23.BatchProof.entries: array expected");
                message.entries = [];
                for (let i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".ics23.BatchProof.entries: object expected");
                    message.entries[i] = $root.ics23.BatchEntry.fromObject(object.entries[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a BatchProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.BatchProof
         * @static
         * @param {ics23.BatchProof} message BatchProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BatchProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.entries = [];
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (let j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.ics23.BatchEntry.toObject(message.entries[j], options);
            }
            return object;
        };

        /**
         * Converts this BatchProof to JSON.
         * @function toJSON
         * @memberof ics23.BatchProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BatchProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BatchProof;
    })();

    ics23.BatchEntry = (function() {

        /**
         * Properties of a BatchEntry.
         * @memberof ics23
         * @interface IBatchEntry
         * @property {ics23.IExistenceProof|null} [exist] BatchEntry exist
         * @property {ics23.INonExistenceProof|null} [nonexist] BatchEntry nonexist
         */

        /**
         * Constructs a new BatchEntry.
         * @memberof ics23
         * @classdesc Represents a BatchEntry.
         * @implements IBatchEntry
         * @constructor
         * @param {ics23.IBatchEntry=} [properties] Properties to set
         */
        function BatchEntry(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BatchEntry exist.
         * @member {ics23.IExistenceProof|null|undefined} exist
         * @memberof ics23.BatchEntry
         * @instance
         */
        BatchEntry.prototype.exist = null;

        /**
         * BatchEntry nonexist.
         * @member {ics23.INonExistenceProof|null|undefined} nonexist
         * @memberof ics23.BatchEntry
         * @instance
         */
        BatchEntry.prototype.nonexist = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * BatchEntry proof.
         * @member {"exist"|"nonexist"|undefined} proof
         * @memberof ics23.BatchEntry
         * @instance
         */
        Object.defineProperty(BatchEntry.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified BatchEntry message. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.
         * @function encode
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.exist != null && Object.hasOwnProperty.call(message, "exist"))
                $root.ics23.ExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.nonexist != null && Object.hasOwnProperty.call(message, "nonexist"))
                $root.ics23.NonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BatchEntry message, length delimited. Does not implicitly {@link ics23.BatchEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.IBatchEntry} message BatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BatchEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BatchEntry message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.BatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.BatchEntry} BatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.BatchEntry();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.exist = $root.ics23.ExistenceProof.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.nonexist = $root.ics23.NonExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BatchEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.BatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.BatchEntry} BatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BatchEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BatchEntry message.
         * @function verify
         * @memberof ics23.BatchEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BatchEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                properties.proof = 1;
                {
                    let error = $root.ics23.ExistenceProof.verify(message.exist);
                    if (error)
                        return "exist." + error;
                }
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    let error = $root.ics23.NonExistenceProof.verify(message.nonexist);
                    if (error)
                        return "nonexist." + error;
                }
            }
            return null;
        };

        /**
         * Creates a BatchEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.BatchEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.BatchEntry} BatchEntry
         */
        BatchEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.BatchEntry)
                return object;
            let message = new $root.ics23.BatchEntry();
            if (object.exist != null) {
                if (typeof object.exist !== "object")
                    throw TypeError(".ics23.BatchEntry.exist: object expected");
                message.exist = $root.ics23.ExistenceProof.fromObject(object.exist);
            }
            if (object.nonexist != null) {
                if (typeof object.nonexist !== "object")
                    throw TypeError(".ics23.BatchEntry.nonexist: object expected");
                message.nonexist = $root.ics23.NonExistenceProof.fromObject(object.nonexist);
            }
            return message;
        };

        /**
         * Creates a plain object from a BatchEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.BatchEntry
         * @static
         * @param {ics23.BatchEntry} message BatchEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BatchEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                object.exist = $root.ics23.ExistenceProof.toObject(message.exist, options);
                if (options.oneofs)
                    object.proof = "exist";
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                object.nonexist = $root.ics23.NonExistenceProof.toObject(message.nonexist, options);
                if (options.oneofs)
                    object.proof = "nonexist";
            }
            return object;
        };

        /**
         * Converts this BatchEntry to JSON.
         * @function toJSON
         * @memberof ics23.BatchEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BatchEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BatchEntry;
    })();

    ics23.CompressedBatchProof = (function() {

        /**
         * Properties of a CompressedBatchProof.
         * @memberof ics23
         * @interface ICompressedBatchProof
         * @property {Array.<ics23.ICompressedBatchEntry>|null} [entries] CompressedBatchProof entries
         * @property {Array.<ics23.IInnerOp>|null} [lookup_inners] CompressedBatchProof lookup_inners
         */

        /**
         * Constructs a new CompressedBatchProof.
         * @memberof ics23
         * @classdesc Represents a CompressedBatchProof.
         * @implements ICompressedBatchProof
         * @constructor
         * @param {ics23.ICompressedBatchProof=} [properties] Properties to set
         */
        function CompressedBatchProof(properties) {
            this.entries = [];
            this.lookup_inners = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedBatchProof entries.
         * @member {Array.<ics23.ICompressedBatchEntry>} entries
         * @memberof ics23.CompressedBatchProof
         * @instance
         */
        CompressedBatchProof.prototype.entries = $util.emptyArray;

        /**
         * CompressedBatchProof lookup_inners.
         * @member {Array.<ics23.IInnerOp>} lookup_inners
         * @memberof ics23.CompressedBatchProof
         * @instance
         */
        CompressedBatchProof.prototype.lookup_inners = $util.emptyArray;

        /**
         * Encodes the specified CompressedBatchProof message. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.entries != null && message.entries.length)
                for (let i = 0; i < message.entries.length; ++i)
                    $root.ics23.CompressedBatchEntry.encode(message.entries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.lookup_inners != null && message.lookup_inners.length)
                for (let i = 0; i < message.lookup_inners.length; ++i)
                    $root.ics23.InnerOp.encode(message.lookup_inners[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CompressedBatchProof message, length delimited. Does not implicitly {@link ics23.CompressedBatchProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.ICompressedBatchProof} message CompressedBatchProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedBatchProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchProof();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.entries && message.entries.length))
                        message.entries = [];
                    message.entries.push($root.ics23.CompressedBatchEntry.decode(reader, reader.uint32()));
                    break;
                case 2:
                    if (!(message.lookup_inners && message.lookup_inners.length))
                        message.lookup_inners = [];
                    message.lookup_inners.push($root.ics23.InnerOp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedBatchProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedBatchProof message.
         * @function verify
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedBatchProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.entries != null && message.hasOwnProperty("entries")) {
                if (!Array.isArray(message.entries))
                    return "entries: array expected";
                for (let i = 0; i < message.entries.length; ++i) {
                    let error = $root.ics23.CompressedBatchEntry.verify(message.entries[i]);
                    if (error)
                        return "entries." + error;
                }
            }
            if (message.lookup_inners != null && message.hasOwnProperty("lookup_inners")) {
                if (!Array.isArray(message.lookup_inners))
                    return "lookup_inners: array expected";
                for (let i = 0; i < message.lookup_inners.length; ++i) {
                    let error = $root.ics23.InnerOp.verify(message.lookup_inners[i]);
                    if (error)
                        return "lookup_inners." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CompressedBatchProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedBatchProof} CompressedBatchProof
         */
        CompressedBatchProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedBatchProof)
                return object;
            let message = new $root.ics23.CompressedBatchProof();
            if (object.entries) {
                if (!Array.isArray(object.entries))
                    throw TypeError(".ics23.CompressedBatchProof.entries: array expected");
                message.entries = [];
                for (let i = 0; i < object.entries.length; ++i) {
                    if (typeof object.entries[i] !== "object")
                        throw TypeError(".ics23.CompressedBatchProof.entries: object expected");
                    message.entries[i] = $root.ics23.CompressedBatchEntry.fromObject(object.entries[i]);
                }
            }
            if (object.lookup_inners) {
                if (!Array.isArray(object.lookup_inners))
                    throw TypeError(".ics23.CompressedBatchProof.lookup_inners: array expected");
                message.lookup_inners = [];
                for (let i = 0; i < object.lookup_inners.length; ++i) {
                    if (typeof object.lookup_inners[i] !== "object")
                        throw TypeError(".ics23.CompressedBatchProof.lookup_inners: object expected");
                    message.lookup_inners[i] = $root.ics23.InnerOp.fromObject(object.lookup_inners[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedBatchProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedBatchProof
         * @static
         * @param {ics23.CompressedBatchProof} message CompressedBatchProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedBatchProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults) {
                object.entries = [];
                object.lookup_inners = [];
            }
            if (message.entries && message.entries.length) {
                object.entries = [];
                for (let j = 0; j < message.entries.length; ++j)
                    object.entries[j] = $root.ics23.CompressedBatchEntry.toObject(message.entries[j], options);
            }
            if (message.lookup_inners && message.lookup_inners.length) {
                object.lookup_inners = [];
                for (let j = 0; j < message.lookup_inners.length; ++j)
                    object.lookup_inners[j] = $root.ics23.InnerOp.toObject(message.lookup_inners[j], options);
            }
            return object;
        };

        /**
         * Converts this CompressedBatchProof to JSON.
         * @function toJSON
         * @memberof ics23.CompressedBatchProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedBatchProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedBatchProof;
    })();

    ics23.CompressedBatchEntry = (function() {

        /**
         * Properties of a CompressedBatchEntry.
         * @memberof ics23
         * @interface ICompressedBatchEntry
         * @property {ics23.ICompressedExistenceProof|null} [exist] CompressedBatchEntry exist
         * @property {ics23.ICompressedNonExistenceProof|null} [nonexist] CompressedBatchEntry nonexist
         */

        /**
         * Constructs a new CompressedBatchEntry.
         * @memberof ics23
         * @classdesc Represents a CompressedBatchEntry.
         * @implements ICompressedBatchEntry
         * @constructor
         * @param {ics23.ICompressedBatchEntry=} [properties] Properties to set
         */
        function CompressedBatchEntry(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedBatchEntry exist.
         * @member {ics23.ICompressedExistenceProof|null|undefined} exist
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        CompressedBatchEntry.prototype.exist = null;

        /**
         * CompressedBatchEntry nonexist.
         * @member {ics23.ICompressedNonExistenceProof|null|undefined} nonexist
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        CompressedBatchEntry.prototype.nonexist = null;

        // OneOf field names bound to virtual getters and setters
        let $oneOfFields;

        /**
         * CompressedBatchEntry proof.
         * @member {"exist"|"nonexist"|undefined} proof
         * @memberof ics23.CompressedBatchEntry
         * @instance
         */
        Object.defineProperty(CompressedBatchEntry.prototype, "proof", {
            get: $util.oneOfGetter($oneOfFields = ["exist", "nonexist"]),
            set: $util.oneOfSetter($oneOfFields)
        });

        /**
         * Encodes the specified CompressedBatchEntry message. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchEntry.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.exist != null && Object.hasOwnProperty.call(message, "exist"))
                $root.ics23.CompressedExistenceProof.encode(message.exist, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.nonexist != null && Object.hasOwnProperty.call(message, "nonexist"))
                $root.ics23.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CompressedBatchEntry message, length delimited. Does not implicitly {@link ics23.CompressedBatchEntry.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.ICompressedBatchEntry} message CompressedBatchEntry message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedBatchEntry.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedBatchEntry message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchEntry.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedBatchEntry();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.exist = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.nonexist = $root.ics23.CompressedNonExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedBatchEntry message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedBatchEntry.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedBatchEntry message.
         * @function verify
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedBatchEntry.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            let properties = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                properties.proof = 1;
                {
                    let error = $root.ics23.CompressedExistenceProof.verify(message.exist);
                    if (error)
                        return "exist." + error;
                }
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                if (properties.proof === 1)
                    return "proof: multiple values";
                properties.proof = 1;
                {
                    let error = $root.ics23.CompressedNonExistenceProof.verify(message.nonexist);
                    if (error)
                        return "nonexist." + error;
                }
            }
            return null;
        };

        /**
         * Creates a CompressedBatchEntry message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedBatchEntry} CompressedBatchEntry
         */
        CompressedBatchEntry.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedBatchEntry)
                return object;
            let message = new $root.ics23.CompressedBatchEntry();
            if (object.exist != null) {
                if (typeof object.exist !== "object")
                    throw TypeError(".ics23.CompressedBatchEntry.exist: object expected");
                message.exist = $root.ics23.CompressedExistenceProof.fromObject(object.exist);
            }
            if (object.nonexist != null) {
                if (typeof object.nonexist !== "object")
                    throw TypeError(".ics23.CompressedBatchEntry.nonexist: object expected");
                message.nonexist = $root.ics23.CompressedNonExistenceProof.fromObject(object.nonexist);
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedBatchEntry message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedBatchEntry
         * @static
         * @param {ics23.CompressedBatchEntry} message CompressedBatchEntry
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedBatchEntry.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (message.exist != null && message.hasOwnProperty("exist")) {
                object.exist = $root.ics23.CompressedExistenceProof.toObject(message.exist, options);
                if (options.oneofs)
                    object.proof = "exist";
            }
            if (message.nonexist != null && message.hasOwnProperty("nonexist")) {
                object.nonexist = $root.ics23.CompressedNonExistenceProof.toObject(message.nonexist, options);
                if (options.oneofs)
                    object.proof = "nonexist";
            }
            return object;
        };

        /**
         * Converts this CompressedBatchEntry to JSON.
         * @function toJSON
         * @memberof ics23.CompressedBatchEntry
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedBatchEntry.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedBatchEntry;
    })();

    ics23.CompressedExistenceProof = (function() {

        /**
         * Properties of a CompressedExistenceProof.
         * @memberof ics23
         * @interface ICompressedExistenceProof
         * @property {Uint8Array|null} [key] CompressedExistenceProof key
         * @property {Uint8Array|null} [value] CompressedExistenceProof value
         * @property {ics23.ILeafOp|null} [leaf] CompressedExistenceProof leaf
         * @property {Array.<number>|null} [path] CompressedExistenceProof path
         */

        /**
         * Constructs a new CompressedExistenceProof.
         * @memberof ics23
         * @classdesc Represents a CompressedExistenceProof.
         * @implements ICompressedExistenceProof
         * @constructor
         * @param {ics23.ICompressedExistenceProof=} [properties] Properties to set
         */
        function CompressedExistenceProof(properties) {
            this.path = [];
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * CompressedExistenceProof value.
         * @member {Uint8Array} value
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.value = $util.newBuffer([]);

        /**
         * CompressedExistenceProof leaf.
         * @member {ics23.ILeafOp|null|undefined} leaf
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.leaf = null;

        /**
         * CompressedExistenceProof path.
         * @member {Array.<number>} path
         * @memberof ics23.CompressedExistenceProof
         * @instance
         */
        CompressedExistenceProof.prototype.path = $util.emptyArray;

        /**
         * Encodes the specified CompressedExistenceProof message. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
            if (message.leaf != null && Object.hasOwnProperty.call(message, "leaf"))
                $root.ics23.LeafOp.encode(message.leaf, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.path != null && message.path.length) {
                writer.uint32(/* id 4, wireType 2 =*/34).fork();
                for (let i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                writer.ldelim();
            }
            return writer;
        };

        /**
         * Encodes the specified CompressedExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.ICompressedExistenceProof} message CompressedExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedExistenceProof();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                case 3:
                    message.leaf = $root.ics23.LeafOp.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.path && message.path.length))
                        message.path = [];
                    if ((tag & 7) === 2) {
                        let end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.path.push(reader.int32());
                    } else
                        message.path.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedExistenceProof message.
         * @function verify
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.value != null && message.hasOwnProperty("value"))
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                    return "value: buffer expected";
            if (message.leaf != null && message.hasOwnProperty("leaf")) {
                let error = $root.ics23.LeafOp.verify(message.leaf);
                if (error)
                    return "leaf." + error;
            }
            if (message.path != null && message.hasOwnProperty("path")) {
                if (!Array.isArray(message.path))
                    return "path: array expected";
                for (let i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                        return "path: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a CompressedExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedExistenceProof} CompressedExistenceProof
         */
        CompressedExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedExistenceProof)
                return object;
            let message = new $root.ics23.CompressedExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.value != null)
                if (typeof object.value === "string")
                    $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length)
                    message.value = object.value;
            if (object.leaf != null) {
                if (typeof object.leaf !== "object")
                    throw TypeError(".ics23.CompressedExistenceProof.leaf: object expected");
                message.leaf = $root.ics23.LeafOp.fromObject(object.leaf);
            }
            if (object.path) {
                if (!Array.isArray(object.path))
                    throw TypeError(".ics23.CompressedExistenceProof.path: array expected");
                message.path = [];
                for (let i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedExistenceProof
         * @static
         * @param {ics23.CompressedExistenceProof} message CompressedExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.arrays || options.defaults)
                object.path = [];
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                if (options.bytes === String)
                    object.value = "";
                else {
                    object.value = [];
                    if (options.bytes !== Array)
                        object.value = $util.newBuffer(object.value);
                }
                object.leaf = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
            if (message.leaf != null && message.hasOwnProperty("leaf"))
                object.leaf = $root.ics23.LeafOp.toObject(message.leaf, options);
            if (message.path && message.path.length) {
                object.path = [];
                for (let j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
            }
            return object;
        };

        /**
         * Converts this CompressedExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.CompressedExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedExistenceProof;
    })();

    ics23.CompressedNonExistenceProof = (function() {

        /**
         * Properties of a CompressedNonExistenceProof.
         * @memberof ics23
         * @interface ICompressedNonExistenceProof
         * @property {Uint8Array|null} [key] CompressedNonExistenceProof key
         * @property {ics23.ICompressedExistenceProof|null} [left] CompressedNonExistenceProof left
         * @property {ics23.ICompressedExistenceProof|null} [right] CompressedNonExistenceProof right
         */

        /**
         * Constructs a new CompressedNonExistenceProof.
         * @memberof ics23
         * @classdesc Represents a CompressedNonExistenceProof.
         * @implements ICompressedNonExistenceProof
         * @constructor
         * @param {ics23.ICompressedNonExistenceProof=} [properties] Properties to set
         */
        function CompressedNonExistenceProof(properties) {
            if (properties)
                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CompressedNonExistenceProof key.
         * @member {Uint8Array} key
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.key = $util.newBuffer([]);

        /**
         * CompressedNonExistenceProof left.
         * @member {ics23.ICompressedExistenceProof|null|undefined} left
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.left = null;

        /**
         * CompressedNonExistenceProof right.
         * @member {ics23.ICompressedExistenceProof|null|undefined} right
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         */
        CompressedNonExistenceProof.prototype.right = null;

        /**
         * Encodes the specified CompressedNonExistenceProof message. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.
         * @function encode
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedNonExistenceProof.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
            if (message.left != null && Object.hasOwnProperty.call(message, "left"))
                $root.ics23.CompressedExistenceProof.encode(message.left, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.right != null && Object.hasOwnProperty.call(message, "right"))
                $root.ics23.CompressedExistenceProof.encode(message.right, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CompressedNonExistenceProof message, length delimited. Does not implicitly {@link ics23.CompressedNonExistenceProof.verify|verify} messages.
         * @function encodeDelimited
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.ICompressedNonExistenceProof} message CompressedNonExistenceProof message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CompressedNonExistenceProof.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer.
         * @function decode
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedNonExistenceProof.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ics23.CompressedNonExistenceProof();
            while (reader.pos < end) {
                let tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    message.left = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.right = $root.ics23.CompressedExistenceProof.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CompressedNonExistenceProof message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CompressedNonExistenceProof.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CompressedNonExistenceProof message.
         * @function verify
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CompressedNonExistenceProof.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.key != null && message.hasOwnProperty("key"))
                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                    return "key: buffer expected";
            if (message.left != null && message.hasOwnProperty("left")) {
                let error = $root.ics23.CompressedExistenceProof.verify(message.left);
                if (error)
                    return "left." + error;
            }
            if (message.right != null && message.hasOwnProperty("right")) {
                let error = $root.ics23.CompressedExistenceProof.verify(message.right);
                if (error)
                    return "right." + error;
            }
            return null;
        };

        /**
         * Creates a CompressedNonExistenceProof message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {ics23.CompressedNonExistenceProof} CompressedNonExistenceProof
         */
        CompressedNonExistenceProof.fromObject = function fromObject(object) {
            if (object instanceof $root.ics23.CompressedNonExistenceProof)
                return object;
            let message = new $root.ics23.CompressedNonExistenceProof();
            if (object.key != null)
                if (typeof object.key === "string")
                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                else if (object.key.length)
                    message.key = object.key;
            if (object.left != null) {
                if (typeof object.left !== "object")
                    throw TypeError(".ics23.CompressedNonExistenceProof.left: object expected");
                message.left = $root.ics23.CompressedExistenceProof.fromObject(object.left);
            }
            if (object.right != null) {
                if (typeof object.right !== "object")
                    throw TypeError(".ics23.CompressedNonExistenceProof.right: object expected");
                message.right = $root.ics23.CompressedExistenceProof.fromObject(object.right);
            }
            return message;
        };

        /**
         * Creates a plain object from a CompressedNonExistenceProof message. Also converts values to other types if specified.
         * @function toObject
         * @memberof ics23.CompressedNonExistenceProof
         * @static
         * @param {ics23.CompressedNonExistenceProof} message CompressedNonExistenceProof
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CompressedNonExistenceProof.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            let object = {};
            if (options.defaults) {
                if (options.bytes === String)
                    object.key = "";
                else {
                    object.key = [];
                    if (options.bytes !== Array)
                        object.key = $util.newBuffer(object.key);
                }
                object.left = null;
                object.right = null;
            }
            if (message.key != null && message.hasOwnProperty("key"))
                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
            if (message.left != null && message.hasOwnProperty("left"))
                object.left = $root.ics23.CompressedExistenceProof.toObject(message.left, options);
            if (message.right != null && message.hasOwnProperty("right"))
                object.right = $root.ics23.CompressedExistenceProof.toObject(message.right, options);
            return object;
        };

        /**
         * Converts this CompressedNonExistenceProof to JSON.
         * @function toJSON
         * @memberof ics23.CompressedNonExistenceProof
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CompressedNonExistenceProof.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CompressedNonExistenceProof;
    })();

    return ics23;
})();

export const tendermint = $root.tendermint = (() => {

    /**
     * Namespace tendermint.
     * @exports tendermint
     * @namespace
     */
    const tendermint = {};

    tendermint.types = (function() {

        /**
         * Namespace types.
         * @memberof tendermint
         * @namespace
         */
        const types = {};

        types.ValidatorSet = (function() {

            /**
             * Properties of a ValidatorSet.
             * @memberof tendermint.types
             * @interface IValidatorSet
             * @property {Array.<tendermint.types.IValidator>|null} [validators] ValidatorSet validators
             * @property {tendermint.types.IValidator|null} [proposer] ValidatorSet proposer
             * @property {Long|null} [total_voting_power] ValidatorSet total_voting_power
             */

            /**
             * Constructs a new ValidatorSet.
             * @memberof tendermint.types
             * @classdesc Represents a ValidatorSet.
             * @implements IValidatorSet
             * @constructor
             * @param {tendermint.types.IValidatorSet=} [properties] Properties to set
             */
            function ValidatorSet(properties) {
                this.validators = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValidatorSet validators.
             * @member {Array.<tendermint.types.IValidator>} validators
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.validators = $util.emptyArray;

            /**
             * ValidatorSet proposer.
             * @member {tendermint.types.IValidator|null|undefined} proposer
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.proposer = null;

            /**
             * ValidatorSet total_voting_power.
             * @member {Long} total_voting_power
             * @memberof tendermint.types.ValidatorSet
             * @instance
             */
            ValidatorSet.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified ValidatorSet message. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.validators != null && message.validators.length)
                    for (let i = 0; i < message.validators.length; ++i)
                        $root.tendermint.types.Validator.encode(message.validators[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.proposer != null && Object.hasOwnProperty.call(message, "proposer"))
                    $root.tendermint.types.Validator.encode(message.proposer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.total_voting_power);
                return writer;
            };

            /**
             * Encodes the specified ValidatorSet message, length delimited. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValidatorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValidatorSet message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ValidatorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.validators && message.validators.length))
                            message.validators = [];
                        message.validators.push($root.tendermint.types.Validator.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.proposer = $root.tendermint.types.Validator.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.total_voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValidatorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValidatorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValidatorSet message.
             * @function verify
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValidatorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.validators != null && message.hasOwnProperty("validators")) {
                    if (!Array.isArray(message.validators))
                        return "validators: array expected";
                    for (let i = 0; i < message.validators.length; ++i) {
                        let error = $root.tendermint.types.Validator.verify(message.validators[i]);
                        if (error)
                            return "validators." + error;
                    }
                }
                if (message.proposer != null && message.hasOwnProperty("proposer")) {
                    let error = $root.tendermint.types.Validator.verify(message.proposer);
                    if (error)
                        return "proposer." + error;
                }
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                        return "total_voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates a ValidatorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.ValidatorSet} ValidatorSet
             */
            ValidatorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.ValidatorSet)
                    return object;
                let message = new $root.tendermint.types.ValidatorSet();
                if (object.validators) {
                    if (!Array.isArray(object.validators))
                        throw TypeError(".tendermint.types.ValidatorSet.validators: array expected");
                    message.validators = [];
                    for (let i = 0; i < object.validators.length; ++i) {
                        if (typeof object.validators[i] !== "object")
                            throw TypeError(".tendermint.types.ValidatorSet.validators: object expected");
                        message.validators[i] = $root.tendermint.types.Validator.fromObject(object.validators[i]);
                    }
                }
                if (object.proposer != null) {
                    if (typeof object.proposer !== "object")
                        throw TypeError(".tendermint.types.ValidatorSet.proposer: object expected");
                    message.proposer = $root.tendermint.types.Validator.fromObject(object.proposer);
                }
                if (object.total_voting_power != null)
                    if ($util.Long)
                        (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                    else if (typeof object.total_voting_power === "string")
                        message.total_voting_power = parseInt(object.total_voting_power, 10);
                    else if (typeof object.total_voting_power === "number")
                        message.total_voting_power = object.total_voting_power;
                    else if (typeof object.total_voting_power === "object")
                        message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a ValidatorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.ValidatorSet
             * @static
             * @param {tendermint.types.ValidatorSet} message ValidatorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValidatorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.validators = [];
                if (options.defaults) {
                    object.proposer = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total_voting_power = options.longs === String ? "0" : 0;
                }
                if (message.validators && message.validators.length) {
                    object.validators = [];
                    for (let j = 0; j < message.validators.length; ++j)
                        object.validators[j] = $root.tendermint.types.Validator.toObject(message.validators[j], options);
                }
                if (message.proposer != null && message.hasOwnProperty("proposer"))
                    object.proposer = $root.tendermint.types.Validator.toObject(message.proposer, options);
                if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                    if (typeof message.total_voting_power === "number")
                        object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                    else
                        object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                return object;
            };

            /**
             * Converts this ValidatorSet to JSON.
             * @function toJSON
             * @memberof tendermint.types.ValidatorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValidatorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValidatorSet;
        })();

        types.Validator = (function() {

            /**
             * Properties of a Validator.
             * @memberof tendermint.types
             * @interface IValidator
             * @property {Uint8Array|null} [address] Validator address
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] Validator pub_key
             * @property {Long|null} [voting_power] Validator voting_power
             * @property {Long|null} [proposer_priority] Validator proposer_priority
             */

            /**
             * Constructs a new Validator.
             * @memberof tendermint.types
             * @classdesc Represents a Validator.
             * @implements IValidator
             * @constructor
             * @param {tendermint.types.IValidator=} [properties] Properties to set
             */
            function Validator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Validator address.
             * @member {Uint8Array} address
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.address = $util.newBuffer([]);

            /**
             * Validator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.pub_key = null;

            /**
             * Validator voting_power.
             * @member {Long} voting_power
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Validator proposer_priority.
             * @member {Long} proposer_priority
             * @memberof tendermint.types.Validator
             * @instance
             */
            Validator.prototype.proposer_priority = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified Validator message. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.voting_power);
                if (message.proposer_priority != null && Object.hasOwnProperty.call(message, "proposer_priority"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.proposer_priority);
                return writer;
            };

            /**
             * Encodes the specified Validator message, length delimited. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.IValidator} message Validator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Validator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Validator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Validator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.address = reader.bytes();
                        break;
                    case 2:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 3:
                        message.voting_power = reader.int64();
                        break;
                    case 4:
                        message.proposer_priority = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Validator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Validator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Validator} Validator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Validator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Validator message.
             * @function verify
             * @memberof tendermint.types.Validator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Validator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.address != null && message.hasOwnProperty("address"))
                    if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                        return "address: buffer expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                        return "voting_power: integer|Long expected";
                if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                    if (!$util.isInteger(message.proposer_priority) && !(message.proposer_priority && $util.isInteger(message.proposer_priority.low) && $util.isInteger(message.proposer_priority.high)))
                        return "proposer_priority: integer|Long expected";
                return null;
            };

            /**
             * Creates a Validator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Validator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Validator} Validator
             */
            Validator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Validator)
                    return object;
                let message = new $root.tendermint.types.Validator();
                if (object.address != null)
                    if (typeof object.address === "string")
                        $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                    else if (object.address.length)
                        message.address = object.address;
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.types.Validator.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.voting_power != null)
                    if ($util.Long)
                        (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                    else if (typeof object.voting_power === "string")
                        message.voting_power = parseInt(object.voting_power, 10);
                    else if (typeof object.voting_power === "number")
                        message.voting_power = object.voting_power;
                    else if (typeof object.voting_power === "object")
                        message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                if (object.proposer_priority != null)
                    if ($util.Long)
                        (message.proposer_priority = $util.Long.fromValue(object.proposer_priority)).unsigned = false;
                    else if (typeof object.proposer_priority === "string")
                        message.proposer_priority = parseInt(object.proposer_priority, 10);
                    else if (typeof object.proposer_priority === "number")
                        message.proposer_priority = object.proposer_priority;
                    else if (typeof object.proposer_priority === "object")
                        message.proposer_priority = new $util.LongBits(object.proposer_priority.low >>> 0, object.proposer_priority.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a Validator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Validator
             * @static
             * @param {tendermint.types.Validator} message Validator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Validator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.address = "";
                    else {
                        object.address = [];
                        if (options.bytes !== Array)
                            object.address = $util.newBuffer(object.address);
                    }
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.voting_power = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.proposer_priority = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.proposer_priority = options.longs === String ? "0" : 0;
                }
                if (message.address != null && message.hasOwnProperty("address"))
                    object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (typeof message.voting_power === "number")
                        object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                    else
                        object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                    if (typeof message.proposer_priority === "number")
                        object.proposer_priority = options.longs === String ? String(message.proposer_priority) : message.proposer_priority;
                    else
                        object.proposer_priority = options.longs === String ? $util.Long.prototype.toString.call(message.proposer_priority) : options.longs === Number ? new $util.LongBits(message.proposer_priority.low >>> 0, message.proposer_priority.high >>> 0).toNumber() : message.proposer_priority;
                return object;
            };

            /**
             * Converts this Validator to JSON.
             * @function toJSON
             * @memberof tendermint.types.Validator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Validator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Validator;
        })();

        types.SimpleValidator = (function() {

            /**
             * Properties of a SimpleValidator.
             * @memberof tendermint.types
             * @interface ISimpleValidator
             * @property {tendermint.crypto.IPublicKey|null} [pub_key] SimpleValidator pub_key
             * @property {Long|null} [voting_power] SimpleValidator voting_power
             */

            /**
             * Constructs a new SimpleValidator.
             * @memberof tendermint.types
             * @classdesc Represents a SimpleValidator.
             * @implements ISimpleValidator
             * @constructor
             * @param {tendermint.types.ISimpleValidator=} [properties] Properties to set
             */
            function SimpleValidator(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SimpleValidator pub_key.
             * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.pub_key = null;

            /**
             * SimpleValidator voting_power.
             * @member {Long} voting_power
             * @memberof tendermint.types.SimpleValidator
             * @instance
             */
            SimpleValidator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified SimpleValidator message. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SimpleValidator.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                    $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.voting_power);
                return writer;
            };

            /**
             * Encodes the specified SimpleValidator message, length delimited. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SimpleValidator.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SimpleValidator message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SimpleValidator.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SimpleValidator();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.voting_power = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SimpleValidator message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SimpleValidator.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SimpleValidator message.
             * @function verify
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SimpleValidator.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                    let error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                    if (error)
                        return "pub_key." + error;
                }
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                        return "voting_power: integer|Long expected";
                return null;
            };

            /**
             * Creates a SimpleValidator message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.SimpleValidator} SimpleValidator
             */
            SimpleValidator.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.SimpleValidator)
                    return object;
                let message = new $root.tendermint.types.SimpleValidator();
                if (object.pub_key != null) {
                    if (typeof object.pub_key !== "object")
                        throw TypeError(".tendermint.types.SimpleValidator.pub_key: object expected");
                    message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                }
                if (object.voting_power != null)
                    if ($util.Long)
                        (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                    else if (typeof object.voting_power === "string")
                        message.voting_power = parseInt(object.voting_power, 10);
                    else if (typeof object.voting_power === "number")
                        message.voting_power = object.voting_power;
                    else if (typeof object.voting_power === "object")
                        message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a SimpleValidator message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.SimpleValidator
             * @static
             * @param {tendermint.types.SimpleValidator} message SimpleValidator
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SimpleValidator.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.pub_key = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.voting_power = options.longs === String ? "0" : 0;
                }
                if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                    object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                    if (typeof message.voting_power === "number")
                        object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                    else
                        object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                return object;
            };

            /**
             * Converts this SimpleValidator to JSON.
             * @function toJSON
             * @memberof tendermint.types.SimpleValidator
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SimpleValidator.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SimpleValidator;
        })();

        /**
         * BlockIDFlag enum.
         * @name tendermint.types.BlockIDFlag
         * @enum {number}
         * @property {number} BLOCK_ID_FLAG_UNKNOWN=0 BLOCK_ID_FLAG_UNKNOWN value
         * @property {number} BLOCK_ID_FLAG_ABSENT=1 BLOCK_ID_FLAG_ABSENT value
         * @property {number} BLOCK_ID_FLAG_COMMIT=2 BLOCK_ID_FLAG_COMMIT value
         * @property {number} BLOCK_ID_FLAG_NIL=3 BLOCK_ID_FLAG_NIL value
         */
        types.BlockIDFlag = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "BLOCK_ID_FLAG_UNKNOWN"] = 0;
            values[valuesById[1] = "BLOCK_ID_FLAG_ABSENT"] = 1;
            values[valuesById[2] = "BLOCK_ID_FLAG_COMMIT"] = 2;
            values[valuesById[3] = "BLOCK_ID_FLAG_NIL"] = 3;
            return values;
        })();

        /**
         * SignedMsgType enum.
         * @name tendermint.types.SignedMsgType
         * @enum {number}
         * @property {number} SIGNED_MSG_TYPE_UNKNOWN=0 SIGNED_MSG_TYPE_UNKNOWN value
         * @property {number} SIGNED_MSG_TYPE_PREVOTE=1 SIGNED_MSG_TYPE_PREVOTE value
         * @property {number} SIGNED_MSG_TYPE_PRECOMMIT=2 SIGNED_MSG_TYPE_PRECOMMIT value
         * @property {number} SIGNED_MSG_TYPE_PROPOSAL=32 SIGNED_MSG_TYPE_PROPOSAL value
         */
        types.SignedMsgType = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SIGNED_MSG_TYPE_UNKNOWN"] = 0;
            values[valuesById[1] = "SIGNED_MSG_TYPE_PREVOTE"] = 1;
            values[valuesById[2] = "SIGNED_MSG_TYPE_PRECOMMIT"] = 2;
            values[valuesById[32] = "SIGNED_MSG_TYPE_PROPOSAL"] = 32;
            return values;
        })();

        types.PartSetHeader = (function() {

            /**
             * Properties of a PartSetHeader.
             * @memberof tendermint.types
             * @interface IPartSetHeader
             * @property {number|null} [total] PartSetHeader total
             * @property {Uint8Array|null} [hash] PartSetHeader hash
             */

            /**
             * Constructs a new PartSetHeader.
             * @memberof tendermint.types
             * @classdesc Represents a PartSetHeader.
             * @implements IPartSetHeader
             * @constructor
             * @param {tendermint.types.IPartSetHeader=} [properties] Properties to set
             */
            function PartSetHeader(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PartSetHeader total.
             * @member {number} total
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.total = 0;

            /**
             * PartSetHeader hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.PartSetHeader
             * @instance
             */
            PartSetHeader.prototype.hash = $util.newBuffer([]);

            /**
             * Encodes the specified PartSetHeader message. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartSetHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.total);
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                return writer;
            };

            /**
             * Encodes the specified PartSetHeader message, length delimited. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PartSetHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PartSetHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartSetHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.PartSetHeader();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.uint32();
                        break;
                    case 2:
                        message.hash = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PartSetHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PartSetHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PartSetHeader message.
             * @function verify
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PartSetHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total))
                        return "total: integer expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                return null;
            };

            /**
             * Creates a PartSetHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.PartSetHeader} PartSetHeader
             */
            PartSetHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.PartSetHeader)
                    return object;
                let message = new $root.tendermint.types.PartSetHeader();
                if (object.total != null)
                    message.total = object.total >>> 0;
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                return message;
            };

            /**
             * Creates a plain object from a PartSetHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.PartSetHeader
             * @static
             * @param {tendermint.types.PartSetHeader} message PartSetHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PartSetHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.total = 0;
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    object.total = message.total;
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                return object;
            };

            /**
             * Converts this PartSetHeader to JSON.
             * @function toJSON
             * @memberof tendermint.types.PartSetHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PartSetHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PartSetHeader;
        })();

        types.Part = (function() {

            /**
             * Properties of a Part.
             * @memberof tendermint.types
             * @interface IPart
             * @property {number|null} [index] Part index
             * @property {Uint8Array|null} [bytes] Part bytes
             * @property {tendermint.crypto.IProof|null} [proof] Part proof
             */

            /**
             * Constructs a new Part.
             * @memberof tendermint.types
             * @classdesc Represents a Part.
             * @implements IPart
             * @constructor
             * @param {tendermint.types.IPart=} [properties] Properties to set
             */
            function Part(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Part index.
             * @member {number} index
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.index = 0;

            /**
             * Part bytes.
             * @member {Uint8Array} bytes
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.bytes = $util.newBuffer([]);

            /**
             * Part proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.Part
             * @instance
             */
            Part.prototype.proof = null;

            /**
             * Encodes the specified Part message. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.IPart} message Part message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Part.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                if (message.bytes != null && Object.hasOwnProperty.call(message, "bytes"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.bytes);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Part message, length delimited. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.IPart} message Part message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Part.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Part message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Part
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Part} Part
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Part.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Part();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.index = reader.uint32();
                        break;
                    case 2:
                        message.bytes = reader.bytes();
                        break;
                    case 3:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Part message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Part
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Part} Part
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Part.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Part message.
             * @function verify
             * @memberof tendermint.types.Part
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Part.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.bytes != null && message.hasOwnProperty("bytes"))
                    if (!(message.bytes && typeof message.bytes.length === "number" || $util.isString(message.bytes)))
                        return "bytes: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a Part message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Part
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Part} Part
             */
            Part.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Part)
                    return object;
                let message = new $root.tendermint.types.Part();
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.bytes != null)
                    if (typeof object.bytes === "string")
                        $util.base64.decode(object.bytes, message.bytes = $util.newBuffer($util.base64.length(object.bytes)), 0);
                    else if (object.bytes.length)
                        message.bytes = object.bytes;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.types.Part.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a Part message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Part
             * @static
             * @param {tendermint.types.Part} message Part
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Part.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.index = 0;
                    if (options.bytes === String)
                        object.bytes = "";
                    else {
                        object.bytes = [];
                        if (options.bytes !== Array)
                            object.bytes = $util.newBuffer(object.bytes);
                    }
                    object.proof = null;
                }
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.bytes != null && message.hasOwnProperty("bytes"))
                    object.bytes = options.bytes === String ? $util.base64.encode(message.bytes, 0, message.bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytes) : message.bytes;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this Part to JSON.
             * @function toJSON
             * @memberof tendermint.types.Part
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Part.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Part;
        })();

        types.BlockID = (function() {

            /**
             * Properties of a BlockID.
             * @memberof tendermint.types
             * @interface IBlockID
             * @property {Uint8Array|null} [hash] BlockID hash
             * @property {tendermint.types.IPartSetHeader|null} [part_set_header] BlockID part_set_header
             */

            /**
             * Constructs a new BlockID.
             * @memberof tendermint.types
             * @classdesc Represents a BlockID.
             * @implements IBlockID
             * @constructor
             * @param {tendermint.types.IBlockID=} [properties] Properties to set
             */
            function BlockID(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockID hash.
             * @member {Uint8Array} hash
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.hash = $util.newBuffer([]);

            /**
             * BlockID part_set_header.
             * @member {tendermint.types.IPartSetHeader|null|undefined} part_set_header
             * @memberof tendermint.types.BlockID
             * @instance
             */
            BlockID.prototype.part_set_header = null;

            /**
             * Encodes the specified BlockID message. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockID.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                if (message.part_set_header != null && Object.hasOwnProperty.call(message, "part_set_header"))
                    $root.tendermint.types.PartSetHeader.encode(message.part_set_header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified BlockID message, length delimited. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockID.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockID message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockID} BlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockID.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockID();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.hash = reader.bytes();
                        break;
                    case 2:
                        message.part_set_header = $root.tendermint.types.PartSetHeader.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockID message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockID
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockID} BlockID
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockID.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockID message.
             * @function verify
             * @memberof tendermint.types.BlockID
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockID.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.hash != null && message.hasOwnProperty("hash"))
                    if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                        return "hash: buffer expected";
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header")) {
                    let error = $root.tendermint.types.PartSetHeader.verify(message.part_set_header);
                    if (error)
                        return "part_set_header." + error;
                }
                return null;
            };

            /**
             * Creates a BlockID message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockID
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockID} BlockID
             */
            BlockID.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockID)
                    return object;
                let message = new $root.tendermint.types.BlockID();
                if (object.hash != null)
                    if (typeof object.hash === "string")
                        $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                    else if (object.hash.length)
                        message.hash = object.hash;
                if (object.part_set_header != null) {
                    if (typeof object.part_set_header !== "object")
                        throw TypeError(".tendermint.types.BlockID.part_set_header: object expected");
                    message.part_set_header = $root.tendermint.types.PartSetHeader.fromObject(object.part_set_header);
                }
                return message;
            };

            /**
             * Creates a plain object from a BlockID message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockID
             * @static
             * @param {tendermint.types.BlockID} message BlockID
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockID.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.hash = "";
                    else {
                        object.hash = [];
                        if (options.bytes !== Array)
                            object.hash = $util.newBuffer(object.hash);
                    }
                    object.part_set_header = null;
                }
                if (message.hash != null && message.hasOwnProperty("hash"))
                    object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                if (message.part_set_header != null && message.hasOwnProperty("part_set_header"))
                    object.part_set_header = $root.tendermint.types.PartSetHeader.toObject(message.part_set_header, options);
                return object;
            };

            /**
             * Converts this BlockID to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockID
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockID.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockID;
        })();

        types.Header = (function() {

            /**
             * Properties of a Header.
             * @memberof tendermint.types
             * @interface IHeader
             * @property {tendermint.version.IConsensus|null} [version] Header version
             * @property {string|null} [chain_id] Header chain_id
             * @property {Long|null} [height] Header height
             * @property {google.protobuf.ITimestamp|null} [time] Header time
             * @property {tendermint.types.IBlockID|null} [last_block_id] Header last_block_id
             * @property {Uint8Array|null} [last_commit_hash] Header last_commit_hash
             * @property {Uint8Array|null} [data_hash] Header data_hash
             * @property {Uint8Array|null} [validators_hash] Header validators_hash
             * @property {Uint8Array|null} [next_validators_hash] Header next_validators_hash
             * @property {Uint8Array|null} [consensus_hash] Header consensus_hash
             * @property {Uint8Array|null} [app_hash] Header app_hash
             * @property {Uint8Array|null} [last_results_hash] Header last_results_hash
             * @property {Uint8Array|null} [evidence_hash] Header evidence_hash
             * @property {Uint8Array|null} [proposer_address] Header proposer_address
             */

            /**
             * Constructs a new Header.
             * @memberof tendermint.types
             * @classdesc Represents a Header.
             * @implements IHeader
             * @constructor
             * @param {tendermint.types.IHeader=} [properties] Properties to set
             */
            function Header(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Header version.
             * @member {tendermint.version.IConsensus|null|undefined} version
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.version = null;

            /**
             * Header chain_id.
             * @member {string} chain_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.chain_id = "";

            /**
             * Header height.
             * @member {Long} height
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Header time.
             * @member {google.protobuf.ITimestamp|null|undefined} time
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.time = null;

            /**
             * Header last_block_id.
             * @member {tendermint.types.IBlockID|null|undefined} last_block_id
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_block_id = null;

            /**
             * Header last_commit_hash.
             * @member {Uint8Array} last_commit_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_commit_hash = $util.newBuffer([]);

            /**
             * Header data_hash.
             * @member {Uint8Array} data_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.data_hash = $util.newBuffer([]);

            /**
             * Header validators_hash.
             * @member {Uint8Array} validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.validators_hash = $util.newBuffer([]);

            /**
             * Header next_validators_hash.
             * @member {Uint8Array} next_validators_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.next_validators_hash = $util.newBuffer([]);

            /**
             * Header consensus_hash.
             * @member {Uint8Array} consensus_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.consensus_hash = $util.newBuffer([]);

            /**
             * Header app_hash.
             * @member {Uint8Array} app_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.app_hash = $util.newBuffer([]);

            /**
             * Header last_results_hash.
             * @member {Uint8Array} last_results_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.last_results_hash = $util.newBuffer([]);

            /**
             * Header evidence_hash.
             * @member {Uint8Array} evidence_hash
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.evidence_hash = $util.newBuffer([]);

            /**
             * Header proposer_address.
             * @member {Uint8Array} proposer_address
             * @memberof tendermint.types.Header
             * @instance
             */
            Header.prototype.proposer_address = $util.newBuffer([]);

            /**
             * Encodes the specified Header message. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                    $root.tendermint.version.Consensus.encode(message.version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                    $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.last_block_id != null && Object.hasOwnProperty.call(message, "last_block_id"))
                    $root.tendermint.types.BlockID.encode(message.last_block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.last_commit_hash != null && Object.hasOwnProperty.call(message, "last_commit_hash"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.last_commit_hash);
                if (message.data_hash != null && Object.hasOwnProperty.call(message, "data_hash"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.data_hash);
                if (message.validators_hash != null && Object.hasOwnProperty.call(message, "validators_hash"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.validators_hash);
                if (message.next_validators_hash != null && Object.hasOwnProperty.call(message, "next_validators_hash"))
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.next_validators_hash);
                if (message.consensus_hash != null && Object.hasOwnProperty.call(message, "consensus_hash"))
                    writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.consensus_hash);
                if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                    writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.app_hash);
                if (message.last_results_hash != null && Object.hasOwnProperty.call(message, "last_results_hash"))
                    writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.last_results_hash);
                if (message.evidence_hash != null && Object.hasOwnProperty.call(message, "evidence_hash"))
                    writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.evidence_hash);
                if (message.proposer_address != null && Object.hasOwnProperty.call(message, "proposer_address"))
                    writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.proposer_address);
                return writer;
            };

            /**
             * Encodes the specified Header message, length delimited. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.IHeader} message Header message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Header.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Header message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Header();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.version = $root.tendermint.version.Consensus.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.chain_id = reader.string();
                        break;
                    case 3:
                        message.height = reader.int64();
                        break;
                    case 4:
                        message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.last_block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.last_commit_hash = reader.bytes();
                        break;
                    case 7:
                        message.data_hash = reader.bytes();
                        break;
                    case 8:
                        message.validators_hash = reader.bytes();
                        break;
                    case 9:
                        message.next_validators_hash = reader.bytes();
                        break;
                    case 10:
                        message.consensus_hash = reader.bytes();
                        break;
                    case 11:
                        message.app_hash = reader.bytes();
                        break;
                    case 12:
                        message.last_results_hash = reader.bytes();
                        break;
                    case 13:
                        message.evidence_hash = reader.bytes();
                        break;
                    case 14:
                        message.proposer_address = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Header message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Header
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Header} Header
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Header.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Header message.
             * @function verify
             * @memberof tendermint.types.Header
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Header.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.version != null && message.hasOwnProperty("version")) {
                    let error = $root.tendermint.version.Consensus.verify(message.version);
                    if (error)
                        return "version." + error;
                }
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    if (!$util.isString(message.chain_id))
                        return "chain_id: string expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.time != null && message.hasOwnProperty("time")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.time);
                    if (error)
                        return "time." + error;
                }
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.last_block_id);
                    if (error)
                        return "last_block_id." + error;
                }
                if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                    if (!(message.last_commit_hash && typeof message.last_commit_hash.length === "number" || $util.isString(message.last_commit_hash)))
                        return "last_commit_hash: buffer expected";
                if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                    if (!(message.data_hash && typeof message.data_hash.length === "number" || $util.isString(message.data_hash)))
                        return "data_hash: buffer expected";
                if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                    if (!(message.validators_hash && typeof message.validators_hash.length === "number" || $util.isString(message.validators_hash)))
                        return "validators_hash: buffer expected";
                if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                    if (!(message.next_validators_hash && typeof message.next_validators_hash.length === "number" || $util.isString(message.next_validators_hash)))
                        return "next_validators_hash: buffer expected";
                if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                    if (!(message.consensus_hash && typeof message.consensus_hash.length === "number" || $util.isString(message.consensus_hash)))
                        return "consensus_hash: buffer expected";
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                        return "app_hash: buffer expected";
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    if (!(message.last_results_hash && typeof message.last_results_hash.length === "number" || $util.isString(message.last_results_hash)))
                        return "last_results_hash: buffer expected";
                if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                    if (!(message.evidence_hash && typeof message.evidence_hash.length === "number" || $util.isString(message.evidence_hash)))
                        return "evidence_hash: buffer expected";
                if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                    if (!(message.proposer_address && typeof message.proposer_address.length === "number" || $util.isString(message.proposer_address)))
                        return "proposer_address: buffer expected";
                return null;
            };

            /**
             * Creates a Header message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Header
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Header} Header
             */
            Header.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Header)
                    return object;
                let message = new $root.tendermint.types.Header();
                if (object.version != null) {
                    if (typeof object.version !== "object")
                        throw TypeError(".tendermint.types.Header.version: object expected");
                    message.version = $root.tendermint.version.Consensus.fromObject(object.version);
                }
                if (object.chain_id != null)
                    message.chain_id = String(object.chain_id);
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.time != null) {
                    if (typeof object.time !== "object")
                        throw TypeError(".tendermint.types.Header.time: object expected");
                    message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                }
                if (object.last_block_id != null) {
                    if (typeof object.last_block_id !== "object")
                        throw TypeError(".tendermint.types.Header.last_block_id: object expected");
                    message.last_block_id = $root.tendermint.types.BlockID.fromObject(object.last_block_id);
                }
                if (object.last_commit_hash != null)
                    if (typeof object.last_commit_hash === "string")
                        $util.base64.decode(object.last_commit_hash, message.last_commit_hash = $util.newBuffer($util.base64.length(object.last_commit_hash)), 0);
                    else if (object.last_commit_hash.length)
                        message.last_commit_hash = object.last_commit_hash;
                if (object.data_hash != null)
                    if (typeof object.data_hash === "string")
                        $util.base64.decode(object.data_hash, message.data_hash = $util.newBuffer($util.base64.length(object.data_hash)), 0);
                    else if (object.data_hash.length)
                        message.data_hash = object.data_hash;
                if (object.validators_hash != null)
                    if (typeof object.validators_hash === "string")
                        $util.base64.decode(object.validators_hash, message.validators_hash = $util.newBuffer($util.base64.length(object.validators_hash)), 0);
                    else if (object.validators_hash.length)
                        message.validators_hash = object.validators_hash;
                if (object.next_validators_hash != null)
                    if (typeof object.next_validators_hash === "string")
                        $util.base64.decode(object.next_validators_hash, message.next_validators_hash = $util.newBuffer($util.base64.length(object.next_validators_hash)), 0);
                    else if (object.next_validators_hash.length)
                        message.next_validators_hash = object.next_validators_hash;
                if (object.consensus_hash != null)
                    if (typeof object.consensus_hash === "string")
                        $util.base64.decode(object.consensus_hash, message.consensus_hash = $util.newBuffer($util.base64.length(object.consensus_hash)), 0);
                    else if (object.consensus_hash.length)
                        message.consensus_hash = object.consensus_hash;
                if (object.app_hash != null)
                    if (typeof object.app_hash === "string")
                        $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                    else if (object.app_hash.length)
                        message.app_hash = object.app_hash;
                if (object.last_results_hash != null)
                    if (typeof object.last_results_hash === "string")
                        $util.base64.decode(object.last_results_hash, message.last_results_hash = $util.newBuffer($util.base64.length(object.last_results_hash)), 0);
                    else if (object.last_results_hash.length)
                        message.last_results_hash = object.last_results_hash;
                if (object.evidence_hash != null)
                    if (typeof object.evidence_hash === "string")
                        $util.base64.decode(object.evidence_hash, message.evidence_hash = $util.newBuffer($util.base64.length(object.evidence_hash)), 0);
                    else if (object.evidence_hash.length)
                        message.evidence_hash = object.evidence_hash;
                if (object.proposer_address != null)
                    if (typeof object.proposer_address === "string")
                        $util.base64.decode(object.proposer_address, message.proposer_address = $util.newBuffer($util.base64.length(object.proposer_address)), 0);
                    else if (object.proposer_address.length)
                        message.proposer_address = object.proposer_address;
                return message;
            };

            /**
             * Creates a plain object from a Header message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Header
             * @static
             * @param {tendermint.types.Header} message Header
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Header.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.version = null;
                    object.chain_id = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.time = null;
                    object.last_block_id = null;
                    if (options.bytes === String)
                        object.last_commit_hash = "";
                    else {
                        object.last_commit_hash = [];
                        if (options.bytes !== Array)
                            object.last_commit_hash = $util.newBuffer(object.last_commit_hash);
                    }
                    if (options.bytes === String)
                        object.data_hash = "";
                    else {
                        object.data_hash = [];
                        if (options.bytes !== Array)
                            object.data_hash = $util.newBuffer(object.data_hash);
                    }
                    if (options.bytes === String)
                        object.validators_hash = "";
                    else {
                        object.validators_hash = [];
                        if (options.bytes !== Array)
                            object.validators_hash = $util.newBuffer(object.validators_hash);
                    }
                    if (options.bytes === String)
                        object.next_validators_hash = "";
                    else {
                        object.next_validators_hash = [];
                        if (options.bytes !== Array)
                            object.next_validators_hash = $util.newBuffer(object.next_validators_hash);
                    }
                    if (options.bytes === String)
                        object.consensus_hash = "";
                    else {
                        object.consensus_hash = [];
                        if (options.bytes !== Array)
                            object.consensus_hash = $util.newBuffer(object.consensus_hash);
                    }
                    if (options.bytes === String)
                        object.app_hash = "";
                    else {
                        object.app_hash = [];
                        if (options.bytes !== Array)
                            object.app_hash = $util.newBuffer(object.app_hash);
                    }
                    if (options.bytes === String)
                        object.last_results_hash = "";
                    else {
                        object.last_results_hash = [];
                        if (options.bytes !== Array)
                            object.last_results_hash = $util.newBuffer(object.last_results_hash);
                    }
                    if (options.bytes === String)
                        object.evidence_hash = "";
                    else {
                        object.evidence_hash = [];
                        if (options.bytes !== Array)
                            object.evidence_hash = $util.newBuffer(object.evidence_hash);
                    }
                    if (options.bytes === String)
                        object.proposer_address = "";
                    else {
                        object.proposer_address = [];
                        if (options.bytes !== Array)
                            object.proposer_address = $util.newBuffer(object.proposer_address);
                    }
                }
                if (message.version != null && message.hasOwnProperty("version"))
                    object.version = $root.tendermint.version.Consensus.toObject(message.version, options);
                if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                    object.chain_id = message.chain_id;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.time != null && message.hasOwnProperty("time"))
                    object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                if (message.last_block_id != null && message.hasOwnProperty("last_block_id"))
                    object.last_block_id = $root.tendermint.types.BlockID.toObject(message.last_block_id, options);
                if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                    object.last_commit_hash = options.bytes === String ? $util.base64.encode(message.last_commit_hash, 0, message.last_commit_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_commit_hash) : message.last_commit_hash;
                if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                    object.data_hash = options.bytes === String ? $util.base64.encode(message.data_hash, 0, message.data_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.data_hash) : message.data_hash;
                if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                    object.validators_hash = options.bytes === String ? $util.base64.encode(message.validators_hash, 0, message.validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.validators_hash) : message.validators_hash;
                if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                    object.next_validators_hash = options.bytes === String ? $util.base64.encode(message.next_validators_hash, 0, message.next_validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_validators_hash) : message.next_validators_hash;
                if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                    object.consensus_hash = options.bytes === String ? $util.base64.encode(message.consensus_hash, 0, message.consensus_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.consensus_hash) : message.consensus_hash;
                if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                    object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                    object.last_results_hash = options.bytes === String ? $util.base64.encode(message.last_results_hash, 0, message.last_results_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_results_hash) : message.last_results_hash;
                if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                    object.evidence_hash = options.bytes === String ? $util.base64.encode(message.evidence_hash, 0, message.evidence_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.evidence_hash) : message.evidence_hash;
                if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                    object.proposer_address = options.bytes === String ? $util.base64.encode(message.proposer_address, 0, message.proposer_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.proposer_address) : message.proposer_address;
                return object;
            };

            /**
             * Converts this Header to JSON.
             * @function toJSON
             * @memberof tendermint.types.Header
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Header.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Header;
        })();

        types.Data = (function() {

            /**
             * Properties of a Data.
             * @memberof tendermint.types
             * @interface IData
             * @property {Array.<Uint8Array>|null} [txs] Data txs
             */

            /**
             * Constructs a new Data.
             * @memberof tendermint.types
             * @classdesc Represents a Data.
             * @implements IData
             * @constructor
             * @param {tendermint.types.IData=} [properties] Properties to set
             */
            function Data(properties) {
                this.txs = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Data txs.
             * @member {Array.<Uint8Array>} txs
             * @memberof tendermint.types.Data
             * @instance
             */
            Data.prototype.txs = $util.emptyArray;

            /**
             * Encodes the specified Data message. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.IData} message Data message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Data.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.txs != null && message.txs.length)
                    for (let i = 0; i < message.txs.length; ++i)
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.txs[i]);
                return writer;
            };

            /**
             * Encodes the specified Data message, length delimited. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.IData} message Data message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Data.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Data message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Data
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Data} Data
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Data.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Data();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.txs && message.txs.length))
                            message.txs = [];
                        message.txs.push(reader.bytes());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Data message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Data
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Data} Data
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Data.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Data message.
             * @function verify
             * @memberof tendermint.types.Data
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Data.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.txs != null && message.hasOwnProperty("txs")) {
                    if (!Array.isArray(message.txs))
                        return "txs: array expected";
                    for (let i = 0; i < message.txs.length; ++i)
                        if (!(message.txs[i] && typeof message.txs[i].length === "number" || $util.isString(message.txs[i])))
                            return "txs: buffer[] expected";
                }
                return null;
            };

            /**
             * Creates a Data message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Data
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Data} Data
             */
            Data.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Data)
                    return object;
                let message = new $root.tendermint.types.Data();
                if (object.txs) {
                    if (!Array.isArray(object.txs))
                        throw TypeError(".tendermint.types.Data.txs: array expected");
                    message.txs = [];
                    for (let i = 0; i < object.txs.length; ++i)
                        if (typeof object.txs[i] === "string")
                            $util.base64.decode(object.txs[i], message.txs[i] = $util.newBuffer($util.base64.length(object.txs[i])), 0);
                        else if (object.txs[i].length)
                            message.txs[i] = object.txs[i];
                }
                return message;
            };

            /**
             * Creates a plain object from a Data message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Data
             * @static
             * @param {tendermint.types.Data} message Data
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Data.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.txs = [];
                if (message.txs && message.txs.length) {
                    object.txs = [];
                    for (let j = 0; j < message.txs.length; ++j)
                        object.txs[j] = options.bytes === String ? $util.base64.encode(message.txs[j], 0, message.txs[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.txs[j]) : message.txs[j];
                }
                return object;
            };

            /**
             * Converts this Data to JSON.
             * @function toJSON
             * @memberof tendermint.types.Data
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Data.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Data;
        })();

        types.Vote = (function() {

            /**
             * Properties of a Vote.
             * @memberof tendermint.types
             * @interface IVote
             * @property {tendermint.types.SignedMsgType|null} [type] Vote type
             * @property {Long|null} [height] Vote height
             * @property {number|null} [round] Vote round
             * @property {tendermint.types.IBlockID|null} [block_id] Vote block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Vote timestamp
             * @property {Uint8Array|null} [validator_address] Vote validator_address
             * @property {number|null} [validator_index] Vote validator_index
             * @property {Uint8Array|null} [signature] Vote signature
             */

            /**
             * Constructs a new Vote.
             * @memberof tendermint.types
             * @classdesc Represents a Vote.
             * @implements IVote
             * @constructor
             * @param {tendermint.types.IVote=} [properties] Properties to set
             */
            function Vote(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Vote type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.type = 0;

            /**
             * Vote height.
             * @member {Long} height
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Vote round.
             * @member {number} round
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.round = 0;

            /**
             * Vote block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.block_id = null;

            /**
             * Vote timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.timestamp = null;

            /**
             * Vote validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_address = $util.newBuffer([]);

            /**
             * Vote validator_index.
             * @member {number} validator_index
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.validator_index = 0;

            /**
             * Vote signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Vote
             * @instance
             */
            Vote.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Vote message. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.validator_address);
                if (message.validator_index != null && Object.hasOwnProperty.call(message, "validator_index"))
                    writer.uint32(/* id 7, wireType 0 =*/56).int32(message.validator_index);
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified Vote message, length delimited. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.IVote} message Vote message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Vote.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Vote message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Vote();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    case 3:
                        message.round = reader.int32();
                        break;
                    case 4:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.validator_address = reader.bytes();
                        break;
                    case 7:
                        message.validator_index = reader.int32();
                        break;
                    case 8:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Vote message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Vote
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Vote} Vote
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Vote.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Vote message.
             * @function verify
             * @memberof tendermint.types.Vote
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Vote.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                        return "validator_address: buffer expected";
                if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                    if (!$util.isInteger(message.validator_index))
                        return "validator_index: integer expected";
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a Vote message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Vote
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Vote} Vote
             */
            Vote.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Vote)
                    return object;
                let message = new $root.tendermint.types.Vote();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Vote.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.Vote.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.validator_address != null)
                    if (typeof object.validator_address === "string")
                        $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                    else if (object.validator_address.length)
                        message.validator_address = object.validator_address;
                if (object.validator_index != null)
                    message.validator_index = object.validator_index | 0;
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a Vote message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Vote
             * @static
             * @param {tendermint.types.Vote} message Vote
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Vote.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.block_id = null;
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.validator_address = "";
                    else {
                        object.validator_address = [];
                        if (options.bytes !== Array)
                            object.validator_address = $util.newBuffer(object.validator_address);
                    }
                    object.validator_index = 0;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                    object.validator_index = message.validator_index;
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this Vote to JSON.
             * @function toJSON
             * @memberof tendermint.types.Vote
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Vote.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Vote;
        })();

        types.Commit = (function() {

            /**
             * Properties of a Commit.
             * @memberof tendermint.types
             * @interface ICommit
             * @property {Long|null} [height] Commit height
             * @property {number|null} [round] Commit round
             * @property {tendermint.types.IBlockID|null} [block_id] Commit block_id
             * @property {Array.<tendermint.types.ICommitSig>|null} [signatures] Commit signatures
             */

            /**
             * Constructs a new Commit.
             * @memberof tendermint.types
             * @classdesc Represents a Commit.
             * @implements ICommit
             * @constructor
             * @param {tendermint.types.ICommit=} [properties] Properties to set
             */
            function Commit(properties) {
                this.signatures = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Commit height.
             * @member {Long} height
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Commit round.
             * @member {number} round
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.round = 0;

            /**
             * Commit block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.block_id = null;

            /**
             * Commit signatures.
             * @member {Array.<tendermint.types.ICommitSig>} signatures
             * @memberof tendermint.types.Commit
             * @instance
             */
            Commit.prototype.signatures = $util.emptyArray;

            /**
             * Encodes the specified Commit message. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.ICommit} message Commit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Commit.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.signatures != null && message.signatures.length)
                    for (let i = 0; i < message.signatures.length; ++i)
                        $root.tendermint.types.CommitSig.encode(message.signatures[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Commit message, length delimited. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.ICommit} message Commit message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Commit.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Commit message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Commit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Commit} Commit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Commit.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Commit();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.height = reader.int64();
                        break;
                    case 2:
                        message.round = reader.int32();
                        break;
                    case 3:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.signatures && message.signatures.length))
                            message.signatures = [];
                        message.signatures.push($root.tendermint.types.CommitSig.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Commit message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Commit
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Commit} Commit
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Commit.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Commit message.
             * @function verify
             * @memberof tendermint.types.Commit
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Commit.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.signatures != null && message.hasOwnProperty("signatures")) {
                    if (!Array.isArray(message.signatures))
                        return "signatures: array expected";
                    for (let i = 0; i < message.signatures.length; ++i) {
                        let error = $root.tendermint.types.CommitSig.verify(message.signatures[i]);
                        if (error)
                            return "signatures." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Commit message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Commit
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Commit} Commit
             */
            Commit.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Commit)
                    return object;
                let message = new $root.tendermint.types.Commit();
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Commit.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.signatures) {
                    if (!Array.isArray(object.signatures))
                        throw TypeError(".tendermint.types.Commit.signatures: array expected");
                    message.signatures = [];
                    for (let i = 0; i < object.signatures.length; ++i) {
                        if (typeof object.signatures[i] !== "object")
                            throw TypeError(".tendermint.types.Commit.signatures: object expected");
                        message.signatures[i] = $root.tendermint.types.CommitSig.fromObject(object.signatures[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Commit message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Commit
             * @static
             * @param {tendermint.types.Commit} message Commit
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Commit.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.signatures = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.block_id = null;
                }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.signatures && message.signatures.length) {
                    object.signatures = [];
                    for (let j = 0; j < message.signatures.length; ++j)
                        object.signatures[j] = $root.tendermint.types.CommitSig.toObject(message.signatures[j], options);
                }
                return object;
            };

            /**
             * Converts this Commit to JSON.
             * @function toJSON
             * @memberof tendermint.types.Commit
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Commit.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Commit;
        })();

        types.CommitSig = (function() {

            /**
             * Properties of a CommitSig.
             * @memberof tendermint.types
             * @interface ICommitSig
             * @property {tendermint.types.BlockIDFlag|null} [block_id_flag] CommitSig block_id_flag
             * @property {Uint8Array|null} [validator_address] CommitSig validator_address
             * @property {google.protobuf.ITimestamp|null} [timestamp] CommitSig timestamp
             * @property {Uint8Array|null} [signature] CommitSig signature
             */

            /**
             * Constructs a new CommitSig.
             * @memberof tendermint.types
             * @classdesc Represents a CommitSig.
             * @implements ICommitSig
             * @constructor
             * @param {tendermint.types.ICommitSig=} [properties] Properties to set
             */
            function CommitSig(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CommitSig block_id_flag.
             * @member {tendermint.types.BlockIDFlag} block_id_flag
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.block_id_flag = 0;

            /**
             * CommitSig validator_address.
             * @member {Uint8Array} validator_address
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.validator_address = $util.newBuffer([]);

            /**
             * CommitSig timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.timestamp = null;

            /**
             * CommitSig signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.CommitSig
             * @instance
             */
            CommitSig.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified CommitSig message. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommitSig.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_id_flag != null && Object.hasOwnProperty.call(message, "block_id_flag"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.block_id_flag);
                if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.validator_address);
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified CommitSig message, length delimited. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CommitSig.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CommitSig message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.CommitSig} CommitSig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommitSig.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CommitSig();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_id_flag = reader.int32();
                        break;
                    case 2:
                        message.validator_address = reader.bytes();
                        break;
                    case 3:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CommitSig message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.CommitSig} CommitSig
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CommitSig.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CommitSig message.
             * @function verify
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CommitSig.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                    switch (message.block_id_flag) {
                    default:
                        return "block_id_flag: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                        return "validator_address: buffer expected";
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a CommitSig message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.CommitSig} CommitSig
             */
            CommitSig.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.CommitSig)
                    return object;
                let message = new $root.tendermint.types.CommitSig();
                switch (object.block_id_flag) {
                case "BLOCK_ID_FLAG_UNKNOWN":
                case 0:
                    message.block_id_flag = 0;
                    break;
                case "BLOCK_ID_FLAG_ABSENT":
                case 1:
                    message.block_id_flag = 1;
                    break;
                case "BLOCK_ID_FLAG_COMMIT":
                case 2:
                    message.block_id_flag = 2;
                    break;
                case "BLOCK_ID_FLAG_NIL":
                case 3:
                    message.block_id_flag = 3;
                    break;
                }
                if (object.validator_address != null)
                    if (typeof object.validator_address === "string")
                        $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                    else if (object.validator_address.length)
                        message.validator_address = object.validator_address;
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.CommitSig.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a CommitSig message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.CommitSig
             * @static
             * @param {tendermint.types.CommitSig} message CommitSig
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CommitSig.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block_id_flag = options.enums === String ? "BLOCK_ID_FLAG_UNKNOWN" : 0;
                    if (options.bytes === String)
                        object.validator_address = "";
                    else {
                        object.validator_address = [];
                        if (options.bytes !== Array)
                            object.validator_address = $util.newBuffer(object.validator_address);
                    }
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                    object.block_id_flag = options.enums === String ? $root.tendermint.types.BlockIDFlag[message.block_id_flag] : message.block_id_flag;
                if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                    object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this CommitSig to JSON.
             * @function toJSON
             * @memberof tendermint.types.CommitSig
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CommitSig.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CommitSig;
        })();

        types.Proposal = (function() {

            /**
             * Properties of a Proposal.
             * @memberof tendermint.types
             * @interface IProposal
             * @property {tendermint.types.SignedMsgType|null} [type] Proposal type
             * @property {Long|null} [height] Proposal height
             * @property {number|null} [round] Proposal round
             * @property {number|null} [pol_round] Proposal pol_round
             * @property {tendermint.types.IBlockID|null} [block_id] Proposal block_id
             * @property {google.protobuf.ITimestamp|null} [timestamp] Proposal timestamp
             * @property {Uint8Array|null} [signature] Proposal signature
             */

            /**
             * Constructs a new Proposal.
             * @memberof tendermint.types
             * @classdesc Represents a Proposal.
             * @implements IProposal
             * @constructor
             * @param {tendermint.types.IProposal=} [properties] Properties to set
             */
            function Proposal(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Proposal type.
             * @member {tendermint.types.SignedMsgType} type
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.type = 0;

            /**
             * Proposal height.
             * @member {Long} height
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proposal round.
             * @member {number} round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.round = 0;

            /**
             * Proposal pol_round.
             * @member {number} pol_round
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.pol_round = 0;

            /**
             * Proposal block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.block_id = null;

            /**
             * Proposal timestamp.
             * @member {google.protobuf.ITimestamp|null|undefined} timestamp
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.timestamp = null;

            /**
             * Proposal signature.
             * @member {Uint8Array} signature
             * @memberof tendermint.types.Proposal
             * @instance
             */
            Proposal.prototype.signature = $util.newBuffer([]);

            /**
             * Encodes the specified Proposal message. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                if (message.pol_round != null && Object.hasOwnProperty.call(message, "pol_round"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pol_round);
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.signature);
                return writer;
            };

            /**
             * Encodes the specified Proposal message, length delimited. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proposal.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Proposal();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.int32();
                        break;
                    case 2:
                        message.height = reader.int64();
                        break;
                    case 3:
                        message.round = reader.int32();
                        break;
                    case 4:
                        message.pol_round = reader.int32();
                        break;
                    case 5:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 6:
                        message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.signature = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Proposal message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.Proposal
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.Proposal} Proposal
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proposal.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Proposal message.
             * @function verify
             * @memberof tendermint.types.Proposal
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Proposal.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 32:
                        break;
                    }
                if (message.height != null && message.hasOwnProperty("height"))
                    if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                        return "height: integer|Long expected";
                if (message.round != null && message.hasOwnProperty("round"))
                    if (!$util.isInteger(message.round))
                        return "round: integer expected";
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    if (!$util.isInteger(message.pol_round))
                        return "pol_round: integer expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    let error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                    if (error)
                        return "timestamp." + error;
                }
                if (message.signature != null && message.hasOwnProperty("signature"))
                    if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                        return "signature: buffer expected";
                return null;
            };

            /**
             * Creates a Proposal message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.Proposal
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.Proposal} Proposal
             */
            Proposal.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.Proposal)
                    return object;
                let message = new $root.tendermint.types.Proposal();
                switch (object.type) {
                case "SIGNED_MSG_TYPE_UNKNOWN":
                case 0:
                    message.type = 0;
                    break;
                case "SIGNED_MSG_TYPE_PREVOTE":
                case 1:
                    message.type = 1;
                    break;
                case "SIGNED_MSG_TYPE_PRECOMMIT":
                case 2:
                    message.type = 2;
                    break;
                case "SIGNED_MSG_TYPE_PROPOSAL":
                case 32:
                    message.type = 32;
                    break;
                }
                if (object.height != null)
                    if ($util.Long)
                        (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                    else if (typeof object.height === "string")
                        message.height = parseInt(object.height, 10);
                    else if (typeof object.height === "number")
                        message.height = object.height;
                    else if (typeof object.height === "object")
                        message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                if (object.round != null)
                    message.round = object.round | 0;
                if (object.pol_round != null)
                    message.pol_round = object.pol_round | 0;
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.Proposal.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".tendermint.types.Proposal.timestamp: object expected");
                    message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                }
                if (object.signature != null)
                    if (typeof object.signature === "string")
                        $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                    else if (object.signature.length)
                        message.signature = object.signature;
                return message;
            };

            /**
             * Creates a plain object from a Proposal message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.Proposal
             * @static
             * @param {tendermint.types.Proposal} message Proposal
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Proposal.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.height = options.longs === String ? "0" : 0;
                    object.round = 0;
                    object.pol_round = 0;
                    object.block_id = null;
                    object.timestamp = null;
                    if (options.bytes === String)
                        object.signature = "";
                    else {
                        object.signature = [];
                        if (options.bytes !== Array)
                            object.signature = $util.newBuffer(object.signature);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                if (message.height != null && message.hasOwnProperty("height"))
                    if (typeof message.height === "number")
                        object.height = options.longs === String ? String(message.height) : message.height;
                    else
                        object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                if (message.round != null && message.hasOwnProperty("round"))
                    object.round = message.round;
                if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                    object.pol_round = message.pol_round;
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                    object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                if (message.signature != null && message.hasOwnProperty("signature"))
                    object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                return object;
            };

            /**
             * Converts this Proposal to JSON.
             * @function toJSON
             * @memberof tendermint.types.Proposal
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Proposal.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Proposal;
        })();

        types.SignedHeader = (function() {

            /**
             * Properties of a SignedHeader.
             * @memberof tendermint.types
             * @interface ISignedHeader
             * @property {tendermint.types.IHeader|null} [header] SignedHeader header
             * @property {tendermint.types.ICommit|null} [commit] SignedHeader commit
             */

            /**
             * Constructs a new SignedHeader.
             * @memberof tendermint.types
             * @classdesc Represents a SignedHeader.
             * @implements ISignedHeader
             * @constructor
             * @param {tendermint.types.ISignedHeader=} [properties] Properties to set
             */
            function SignedHeader(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SignedHeader header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.header = null;

            /**
             * SignedHeader commit.
             * @member {tendermint.types.ICommit|null|undefined} commit
             * @memberof tendermint.types.SignedHeader
             * @instance
             */
            SignedHeader.prototype.commit = null;

            /**
             * Encodes the specified SignedHeader message. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedHeader.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                    $root.tendermint.types.Commit.encode(message.commit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SignedHeader message, length delimited. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SignedHeader.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SignedHeader message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.SignedHeader} SignedHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedHeader.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SignedHeader();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.commit = $root.tendermint.types.Commit.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SignedHeader message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.SignedHeader} SignedHeader
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SignedHeader.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SignedHeader message.
             * @function verify
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SignedHeader.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.commit != null && message.hasOwnProperty("commit")) {
                    let error = $root.tendermint.types.Commit.verify(message.commit);
                    if (error)
                        return "commit." + error;
                }
                return null;
            };

            /**
             * Creates a SignedHeader message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.SignedHeader} SignedHeader
             */
            SignedHeader.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.SignedHeader)
                    return object;
                let message = new $root.tendermint.types.SignedHeader();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.SignedHeader.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.commit != null) {
                    if (typeof object.commit !== "object")
                        throw TypeError(".tendermint.types.SignedHeader.commit: object expected");
                    message.commit = $root.tendermint.types.Commit.fromObject(object.commit);
                }
                return message;
            };

            /**
             * Creates a plain object from a SignedHeader message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.SignedHeader
             * @static
             * @param {tendermint.types.SignedHeader} message SignedHeader
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SignedHeader.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.header = null;
                    object.commit = null;
                }
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.commit != null && message.hasOwnProperty("commit"))
                    object.commit = $root.tendermint.types.Commit.toObject(message.commit, options);
                return object;
            };

            /**
             * Converts this SignedHeader to JSON.
             * @function toJSON
             * @memberof tendermint.types.SignedHeader
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SignedHeader.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return SignedHeader;
        })();

        types.LightBlock = (function() {

            /**
             * Properties of a LightBlock.
             * @memberof tendermint.types
             * @interface ILightBlock
             * @property {tendermint.types.ISignedHeader|null} [signed_header] LightBlock signed_header
             * @property {tendermint.types.IValidatorSet|null} [validator_set] LightBlock validator_set
             */

            /**
             * Constructs a new LightBlock.
             * @memberof tendermint.types
             * @classdesc Represents a LightBlock.
             * @implements ILightBlock
             * @constructor
             * @param {tendermint.types.ILightBlock=} [properties] Properties to set
             */
            function LightBlock(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * LightBlock signed_header.
             * @member {tendermint.types.ISignedHeader|null|undefined} signed_header
             * @memberof tendermint.types.LightBlock
             * @instance
             */
            LightBlock.prototype.signed_header = null;

            /**
             * LightBlock validator_set.
             * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
             * @memberof tendermint.types.LightBlock
             * @instance
             */
            LightBlock.prototype.validator_set = null;

            /**
             * Encodes the specified LightBlock message. Does not implicitly {@link tendermint.types.LightBlock.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {tendermint.types.ILightBlock} message LightBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightBlock.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.signed_header != null && Object.hasOwnProperty.call(message, "signed_header"))
                    $root.tendermint.types.SignedHeader.encode(message.signed_header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.validator_set != null && Object.hasOwnProperty.call(message, "validator_set"))
                    $root.tendermint.types.ValidatorSet.encode(message.validator_set, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified LightBlock message, length delimited. Does not implicitly {@link tendermint.types.LightBlock.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {tendermint.types.ILightBlock} message LightBlock message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            LightBlock.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a LightBlock message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.LightBlock} LightBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightBlock.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.LightBlock();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.signed_header = $root.tendermint.types.SignedHeader.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.validator_set = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a LightBlock message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.LightBlock} LightBlock
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            LightBlock.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a LightBlock message.
             * @function verify
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            LightBlock.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.signed_header != null && message.hasOwnProperty("signed_header")) {
                    let error = $root.tendermint.types.SignedHeader.verify(message.signed_header);
                    if (error)
                        return "signed_header." + error;
                }
                if (message.validator_set != null && message.hasOwnProperty("validator_set")) {
                    let error = $root.tendermint.types.ValidatorSet.verify(message.validator_set);
                    if (error)
                        return "validator_set." + error;
                }
                return null;
            };

            /**
             * Creates a LightBlock message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.LightBlock} LightBlock
             */
            LightBlock.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.LightBlock)
                    return object;
                let message = new $root.tendermint.types.LightBlock();
                if (object.signed_header != null) {
                    if (typeof object.signed_header !== "object")
                        throw TypeError(".tendermint.types.LightBlock.signed_header: object expected");
                    message.signed_header = $root.tendermint.types.SignedHeader.fromObject(object.signed_header);
                }
                if (object.validator_set != null) {
                    if (typeof object.validator_set !== "object")
                        throw TypeError(".tendermint.types.LightBlock.validator_set: object expected");
                    message.validator_set = $root.tendermint.types.ValidatorSet.fromObject(object.validator_set);
                }
                return message;
            };

            /**
             * Creates a plain object from a LightBlock message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.LightBlock
             * @static
             * @param {tendermint.types.LightBlock} message LightBlock
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            LightBlock.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.signed_header = null;
                    object.validator_set = null;
                }
                if (message.signed_header != null && message.hasOwnProperty("signed_header"))
                    object.signed_header = $root.tendermint.types.SignedHeader.toObject(message.signed_header, options);
                if (message.validator_set != null && message.hasOwnProperty("validator_set"))
                    object.validator_set = $root.tendermint.types.ValidatorSet.toObject(message.validator_set, options);
                return object;
            };

            /**
             * Converts this LightBlock to JSON.
             * @function toJSON
             * @memberof tendermint.types.LightBlock
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            LightBlock.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return LightBlock;
        })();

        types.BlockMeta = (function() {

            /**
             * Properties of a BlockMeta.
             * @memberof tendermint.types
             * @interface IBlockMeta
             * @property {tendermint.types.IBlockID|null} [block_id] BlockMeta block_id
             * @property {Long|null} [block_size] BlockMeta block_size
             * @property {tendermint.types.IHeader|null} [header] BlockMeta header
             * @property {Long|null} [num_txs] BlockMeta num_txs
             */

            /**
             * Constructs a new BlockMeta.
             * @memberof tendermint.types
             * @classdesc Represents a BlockMeta.
             * @implements IBlockMeta
             * @constructor
             * @param {tendermint.types.IBlockMeta=} [properties] Properties to set
             */
            function BlockMeta(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BlockMeta block_id.
             * @member {tendermint.types.IBlockID|null|undefined} block_id
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_id = null;

            /**
             * BlockMeta block_size.
             * @member {Long} block_size
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.block_size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * BlockMeta header.
             * @member {tendermint.types.IHeader|null|undefined} header
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.header = null;

            /**
             * BlockMeta num_txs.
             * @member {Long} num_txs
             * @memberof tendermint.types.BlockMeta
             * @instance
             */
            BlockMeta.prototype.num_txs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Encodes the specified BlockMeta message. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMeta.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                    $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.block_size != null && Object.hasOwnProperty.call(message, "block_size"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.block_size);
                if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                    $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.num_txs != null && Object.hasOwnProperty.call(message, "num_txs"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.num_txs);
                return writer;
            };

            /**
             * Encodes the specified BlockMeta message, length delimited. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BlockMeta.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BlockMeta message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.BlockMeta} BlockMeta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMeta.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockMeta();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                        break;
                    case 2:
                        message.block_size = reader.int64();
                        break;
                    case 3:
                        message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                        break;
                    case 4:
                        message.num_txs = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BlockMeta message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.BlockMeta} BlockMeta
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BlockMeta.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BlockMeta message.
             * @function verify
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BlockMeta.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block_id != null && message.hasOwnProperty("block_id")) {
                    let error = $root.tendermint.types.BlockID.verify(message.block_id);
                    if (error)
                        return "block_id." + error;
                }
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    if (!$util.isInteger(message.block_size) && !(message.block_size && $util.isInteger(message.block_size.low) && $util.isInteger(message.block_size.high)))
                        return "block_size: integer|Long expected";
                if (message.header != null && message.hasOwnProperty("header")) {
                    let error = $root.tendermint.types.Header.verify(message.header);
                    if (error)
                        return "header." + error;
                }
                if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                    if (!$util.isInteger(message.num_txs) && !(message.num_txs && $util.isInteger(message.num_txs.low) && $util.isInteger(message.num_txs.high)))
                        return "num_txs: integer|Long expected";
                return null;
            };

            /**
             * Creates a BlockMeta message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.BlockMeta} BlockMeta
             */
            BlockMeta.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.BlockMeta)
                    return object;
                let message = new $root.tendermint.types.BlockMeta();
                if (object.block_id != null) {
                    if (typeof object.block_id !== "object")
                        throw TypeError(".tendermint.types.BlockMeta.block_id: object expected");
                    message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                }
                if (object.block_size != null)
                    if ($util.Long)
                        (message.block_size = $util.Long.fromValue(object.block_size)).unsigned = false;
                    else if (typeof object.block_size === "string")
                        message.block_size = parseInt(object.block_size, 10);
                    else if (typeof object.block_size === "number")
                        message.block_size = object.block_size;
                    else if (typeof object.block_size === "object")
                        message.block_size = new $util.LongBits(object.block_size.low >>> 0, object.block_size.high >>> 0).toNumber();
                if (object.header != null) {
                    if (typeof object.header !== "object")
                        throw TypeError(".tendermint.types.BlockMeta.header: object expected");
                    message.header = $root.tendermint.types.Header.fromObject(object.header);
                }
                if (object.num_txs != null)
                    if ($util.Long)
                        (message.num_txs = $util.Long.fromValue(object.num_txs)).unsigned = false;
                    else if (typeof object.num_txs === "string")
                        message.num_txs = parseInt(object.num_txs, 10);
                    else if (typeof object.num_txs === "number")
                        message.num_txs = object.num_txs;
                    else if (typeof object.num_txs === "object")
                        message.num_txs = new $util.LongBits(object.num_txs.low >>> 0, object.num_txs.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from a BlockMeta message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.BlockMeta
             * @static
             * @param {tendermint.types.BlockMeta} message BlockMeta
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BlockMeta.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.block_id = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.block_size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block_size = options.longs === String ? "0" : 0;
                    object.header = null;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.num_txs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.num_txs = options.longs === String ? "0" : 0;
                }
                if (message.block_id != null && message.hasOwnProperty("block_id"))
                    object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                if (message.block_size != null && message.hasOwnProperty("block_size"))
                    if (typeof message.block_size === "number")
                        object.block_size = options.longs === String ? String(message.block_size) : message.block_size;
                    else
                        object.block_size = options.longs === String ? $util.Long.prototype.toString.call(message.block_size) : options.longs === Number ? new $util.LongBits(message.block_size.low >>> 0, message.block_size.high >>> 0).toNumber() : message.block_size;
                if (message.header != null && message.hasOwnProperty("header"))
                    object.header = $root.tendermint.types.Header.toObject(message.header, options);
                if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                    if (typeof message.num_txs === "number")
                        object.num_txs = options.longs === String ? String(message.num_txs) : message.num_txs;
                    else
                        object.num_txs = options.longs === String ? $util.Long.prototype.toString.call(message.num_txs) : options.longs === Number ? new $util.LongBits(message.num_txs.low >>> 0, message.num_txs.high >>> 0).toNumber() : message.num_txs;
                return object;
            };

            /**
             * Converts this BlockMeta to JSON.
             * @function toJSON
             * @memberof tendermint.types.BlockMeta
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BlockMeta.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BlockMeta;
        })();

        types.TxProof = (function() {

            /**
             * Properties of a TxProof.
             * @memberof tendermint.types
             * @interface ITxProof
             * @property {Uint8Array|null} [root_hash] TxProof root_hash
             * @property {Uint8Array|null} [data] TxProof data
             * @property {tendermint.crypto.IProof|null} [proof] TxProof proof
             */

            /**
             * Constructs a new TxProof.
             * @memberof tendermint.types
             * @classdesc Represents a TxProof.
             * @implements ITxProof
             * @constructor
             * @param {tendermint.types.ITxProof=} [properties] Properties to set
             */
            function TxProof(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TxProof root_hash.
             * @member {Uint8Array} root_hash
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.root_hash = $util.newBuffer([]);

            /**
             * TxProof data.
             * @member {Uint8Array} data
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.data = $util.newBuffer([]);

            /**
             * TxProof proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.types.TxProof
             * @instance
             */
            TxProof.prototype.proof = null;

            /**
             * Encodes the specified TxProof message. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxProof.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.root_hash != null && Object.hasOwnProperty.call(message, "root_hash"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.root_hash);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TxProof message, length delimited. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TxProof.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TxProof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.types.TxProof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.types.TxProof} TxProof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxProof.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.TxProof();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.root_hash = reader.bytes();
                        break;
                    case 2:
                        message.data = reader.bytes();
                        break;
                    case 3:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TxProof message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.types.TxProof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.types.TxProof} TxProof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TxProof.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TxProof message.
             * @function verify
             * @memberof tendermint.types.TxProof
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TxProof.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                    if (!(message.root_hash && typeof message.root_hash.length === "number" || $util.isString(message.root_hash)))
                        return "root_hash: buffer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a TxProof message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.types.TxProof
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.types.TxProof} TxProof
             */
            TxProof.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.types.TxProof)
                    return object;
                let message = new $root.tendermint.types.TxProof();
                if (object.root_hash != null)
                    if (typeof object.root_hash === "string")
                        $util.base64.decode(object.root_hash, message.root_hash = $util.newBuffer($util.base64.length(object.root_hash)), 0);
                    else if (object.root_hash.length)
                        message.root_hash = object.root_hash;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.types.TxProof.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a TxProof message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.types.TxProof
             * @static
             * @param {tendermint.types.TxProof} message TxProof
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TxProof.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.root_hash = "";
                    else {
                        object.root_hash = [];
                        if (options.bytes !== Array)
                            object.root_hash = $util.newBuffer(object.root_hash);
                    }
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                    object.proof = null;
                }
                if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                    object.root_hash = options.bytes === String ? $util.base64.encode(message.root_hash, 0, message.root_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.root_hash) : message.root_hash;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this TxProof to JSON.
             * @function toJSON
             * @memberof tendermint.types.TxProof
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TxProof.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return TxProof;
        })();

        return types;
    })();

    tendermint.crypto = (function() {

        /**
         * Namespace crypto.
         * @memberof tendermint
         * @namespace
         */
        const crypto = {};

        crypto.PublicKey = (function() {

            /**
             * Properties of a PublicKey.
             * @memberof tendermint.crypto
             * @interface IPublicKey
             * @property {Uint8Array|null} [ed25519] PublicKey ed25519
             * @property {Uint8Array|null} [secp256k1] PublicKey secp256k1
             */

            /**
             * Constructs a new PublicKey.
             * @memberof tendermint.crypto
             * @classdesc Represents a PublicKey.
             * @implements IPublicKey
             * @constructor
             * @param {tendermint.crypto.IPublicKey=} [properties] Properties to set
             */
            function PublicKey(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * PublicKey ed25519.
             * @member {Uint8Array|null|undefined} ed25519
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            PublicKey.prototype.ed25519 = null;

            /**
             * PublicKey secp256k1.
             * @member {Uint8Array|null|undefined} secp256k1
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            PublicKey.prototype.secp256k1 = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * PublicKey sum.
             * @member {"ed25519"|"secp256k1"|undefined} sum
             * @memberof tendermint.crypto.PublicKey
             * @instance
             */
            Object.defineProperty(PublicKey.prototype, "sum", {
                get: $util.oneOfGetter($oneOfFields = ["ed25519", "secp256k1"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified PublicKey message. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PublicKey.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ed25519 != null && Object.hasOwnProperty.call(message, "ed25519"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ed25519);
                if (message.secp256k1 != null && Object.hasOwnProperty.call(message, "secp256k1"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.secp256k1);
                return writer;
            };

            /**
             * Encodes the specified PublicKey message, length delimited. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            PublicKey.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a PublicKey message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.PublicKey} PublicKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PublicKey.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.PublicKey();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ed25519 = reader.bytes();
                        break;
                    case 2:
                        message.secp256k1 = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a PublicKey message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.PublicKey} PublicKey
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            PublicKey.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a PublicKey message.
             * @function verify
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            PublicKey.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    properties.sum = 1;
                    if (!(message.ed25519 && typeof message.ed25519.length === "number" || $util.isString(message.ed25519)))
                        return "ed25519: buffer expected";
                }
                if (message.secp256k1 != null && message.hasOwnProperty("secp256k1")) {
                    if (properties.sum === 1)
                        return "sum: multiple values";
                    properties.sum = 1;
                    if (!(message.secp256k1 && typeof message.secp256k1.length === "number" || $util.isString(message.secp256k1)))
                        return "secp256k1: buffer expected";
                }
                return null;
            };

            /**
             * Creates a PublicKey message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.PublicKey} PublicKey
             */
            PublicKey.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.PublicKey)
                    return object;
                let message = new $root.tendermint.crypto.PublicKey();
                if (object.ed25519 != null)
                    if (typeof object.ed25519 === "string")
                        $util.base64.decode(object.ed25519, message.ed25519 = $util.newBuffer($util.base64.length(object.ed25519)), 0);
                    else if (object.ed25519.length)
                        message.ed25519 = object.ed25519;
                if (object.secp256k1 != null)
                    if (typeof object.secp256k1 === "string")
                        $util.base64.decode(object.secp256k1, message.secp256k1 = $util.newBuffer($util.base64.length(object.secp256k1)), 0);
                    else if (object.secp256k1.length)
                        message.secp256k1 = object.secp256k1;
                return message;
            };

            /**
             * Creates a plain object from a PublicKey message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.PublicKey
             * @static
             * @param {tendermint.crypto.PublicKey} message PublicKey
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            PublicKey.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                    object.ed25519 = options.bytes === String ? $util.base64.encode(message.ed25519, 0, message.ed25519.length) : options.bytes === Array ? Array.prototype.slice.call(message.ed25519) : message.ed25519;
                    if (options.oneofs)
                        object.sum = "ed25519";
                }
                if (message.secp256k1 != null && message.hasOwnProperty("secp256k1")) {
                    object.secp256k1 = options.bytes === String ? $util.base64.encode(message.secp256k1, 0, message.secp256k1.length) : options.bytes === Array ? Array.prototype.slice.call(message.secp256k1) : message.secp256k1;
                    if (options.oneofs)
                        object.sum = "secp256k1";
                }
                return object;
            };

            /**
             * Converts this PublicKey to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.PublicKey
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            PublicKey.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return PublicKey;
        })();

        crypto.Proof = (function() {

            /**
             * Properties of a Proof.
             * @memberof tendermint.crypto
             * @interface IProof
             * @property {Long|null} [total] Proof total
             * @property {Long|null} [index] Proof index
             * @property {Uint8Array|null} [leaf_hash] Proof leaf_hash
             * @property {Array.<Uint8Array>|null} [aunts] Proof aunts
             */

            /**
             * Constructs a new Proof.
             * @memberof tendermint.crypto
             * @classdesc Represents a Proof.
             * @implements IProof
             * @constructor
             * @param {tendermint.crypto.IProof=} [properties] Properties to set
             */
            function Proof(properties) {
                this.aunts = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Proof total.
             * @member {Long} total
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.total = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proof index.
             * @member {Long} index
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Proof leaf_hash.
             * @member {Uint8Array} leaf_hash
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.leaf_hash = $util.newBuffer([]);

            /**
             * Proof aunts.
             * @member {Array.<Uint8Array>} aunts
             * @memberof tendermint.crypto.Proof
             * @instance
             */
            Proof.prototype.aunts = $util.emptyArray;

            /**
             * Encodes the specified Proof message. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proof.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.total);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.index);
                if (message.leaf_hash != null && Object.hasOwnProperty.call(message, "leaf_hash"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.leaf_hash);
                if (message.aunts != null && message.aunts.length)
                    for (let i = 0; i < message.aunts.length; ++i)
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.aunts[i]);
                return writer;
            };

            /**
             * Encodes the specified Proof message, length delimited. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Proof.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Proof message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.Proof} Proof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proof.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.Proof();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.total = reader.int64();
                        break;
                    case 2:
                        message.index = reader.int64();
                        break;
                    case 3:
                        message.leaf_hash = reader.bytes();
                        break;
                    case 4:
                        if (!(message.aunts && message.aunts.length))
                            message.aunts = [];
                        message.aunts.push(reader.bytes());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Proof message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.Proof} Proof
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Proof.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Proof message.
             * @function verify
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Proof.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.total != null && message.hasOwnProperty("total"))
                    if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                        return "total: integer|Long expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                        return "index: integer|Long expected";
                if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                    if (!(message.leaf_hash && typeof message.leaf_hash.length === "number" || $util.isString(message.leaf_hash)))
                        return "leaf_hash: buffer expected";
                if (message.aunts != null && message.hasOwnProperty("aunts")) {
                    if (!Array.isArray(message.aunts))
                        return "aunts: array expected";
                    for (let i = 0; i < message.aunts.length; ++i)
                        if (!(message.aunts[i] && typeof message.aunts[i].length === "number" || $util.isString(message.aunts[i])))
                            return "aunts: buffer[] expected";
                }
                return null;
            };

            /**
             * Creates a Proof message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.Proof} Proof
             */
            Proof.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.Proof)
                    return object;
                let message = new $root.tendermint.crypto.Proof();
                if (object.total != null)
                    if ($util.Long)
                        (message.total = $util.Long.fromValue(object.total)).unsigned = false;
                    else if (typeof object.total === "string")
                        message.total = parseInt(object.total, 10);
                    else if (typeof object.total === "number")
                        message.total = object.total;
                    else if (typeof object.total === "object")
                        message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber();
                if (object.index != null)
                    if ($util.Long)
                        (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                    else if (typeof object.index === "string")
                        message.index = parseInt(object.index, 10);
                    else if (typeof object.index === "number")
                        message.index = object.index;
                    else if (typeof object.index === "object")
                        message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                if (object.leaf_hash != null)
                    if (typeof object.leaf_hash === "string")
                        $util.base64.decode(object.leaf_hash, message.leaf_hash = $util.newBuffer($util.base64.length(object.leaf_hash)), 0);
                    else if (object.leaf_hash.length)
                        message.leaf_hash = object.leaf_hash;
                if (object.aunts) {
                    if (!Array.isArray(object.aunts))
                        throw TypeError(".tendermint.crypto.Proof.aunts: array expected");
                    message.aunts = [];
                    for (let i = 0; i < object.aunts.length; ++i)
                        if (typeof object.aunts[i] === "string")
                            $util.base64.decode(object.aunts[i], message.aunts[i] = $util.newBuffer($util.base64.length(object.aunts[i])), 0);
                        else if (object.aunts[i].length)
                            message.aunts[i] = object.aunts[i];
                }
                return message;
            };

            /**
             * Creates a plain object from a Proof message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.Proof
             * @static
             * @param {tendermint.crypto.Proof} message Proof
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Proof.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.aunts = [];
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.total = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.index = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.leaf_hash = "";
                    else {
                        object.leaf_hash = [];
                        if (options.bytes !== Array)
                            object.leaf_hash = $util.newBuffer(object.leaf_hash);
                    }
                }
                if (message.total != null && message.hasOwnProperty("total"))
                    if (typeof message.total === "number")
                        object.total = options.longs === String ? String(message.total) : message.total;
                    else
                        object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber() : message.total;
                if (message.index != null && message.hasOwnProperty("index"))
                    if (typeof message.index === "number")
                        object.index = options.longs === String ? String(message.index) : message.index;
                    else
                        object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                    object.leaf_hash = options.bytes === String ? $util.base64.encode(message.leaf_hash, 0, message.leaf_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.leaf_hash) : message.leaf_hash;
                if (message.aunts && message.aunts.length) {
                    object.aunts = [];
                    for (let j = 0; j < message.aunts.length; ++j)
                        object.aunts[j] = options.bytes === String ? $util.base64.encode(message.aunts[j], 0, message.aunts[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.aunts[j]) : message.aunts[j];
                }
                return object;
            };

            /**
             * Converts this Proof to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.Proof
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Proof.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Proof;
        })();

        crypto.ValueOp = (function() {

            /**
             * Properties of a ValueOp.
             * @memberof tendermint.crypto
             * @interface IValueOp
             * @property {Uint8Array|null} [key] ValueOp key
             * @property {tendermint.crypto.IProof|null} [proof] ValueOp proof
             */

            /**
             * Constructs a new ValueOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ValueOp.
             * @implements IValueOp
             * @constructor
             * @param {tendermint.crypto.IValueOp=} [properties] Properties to set
             */
            function ValueOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ValueOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.key = $util.newBuffer([]);

            /**
             * ValueOp proof.
             * @member {tendermint.crypto.IProof|null|undefined} proof
             * @memberof tendermint.crypto.ValueOp
             * @instance
             */
            ValueOp.prototype.proof = null;

            /**
             * Encodes the specified ValueOp message. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                    $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ValueOp message, length delimited. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ValueOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ValueOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ValueOp} ValueOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ValueOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.bytes();
                        break;
                    case 2:
                        message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ValueOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ValueOp} ValueOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ValueOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ValueOp message.
             * @function verify
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ValueOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.proof != null && message.hasOwnProperty("proof")) {
                    let error = $root.tendermint.crypto.Proof.verify(message.proof);
                    if (error)
                        return "proof." + error;
                }
                return null;
            };

            /**
             * Creates a ValueOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ValueOp} ValueOp
             */
            ValueOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ValueOp)
                    return object;
                let message = new $root.tendermint.crypto.ValueOp();
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.proof != null) {
                    if (typeof object.proof !== "object")
                        throw TypeError(".tendermint.crypto.ValueOp.proof: object expected");
                    message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                }
                return message;
            };

            /**
             * Creates a plain object from a ValueOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ValueOp
             * @static
             * @param {tendermint.crypto.ValueOp} message ValueOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ValueOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    object.proof = null;
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.proof != null && message.hasOwnProperty("proof"))
                    object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                return object;
            };

            /**
             * Converts this ValueOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ValueOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ValueOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ValueOp;
        })();

        crypto.DominoOp = (function() {

            /**
             * Properties of a DominoOp.
             * @memberof tendermint.crypto
             * @interface IDominoOp
             * @property {string|null} [key] DominoOp key
             * @property {string|null} [input] DominoOp input
             * @property {string|null} [output] DominoOp output
             */

            /**
             * Constructs a new DominoOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a DominoOp.
             * @implements IDominoOp
             * @constructor
             * @param {tendermint.crypto.IDominoOp=} [properties] Properties to set
             */
            function DominoOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DominoOp key.
             * @member {string} key
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.key = "";

            /**
             * DominoOp input.
             * @member {string} input
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.input = "";

            /**
             * DominoOp output.
             * @member {string} output
             * @memberof tendermint.crypto.DominoOp
             * @instance
             */
            DominoOp.prototype.output = "";

            /**
             * Encodes the specified DominoOp message. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DominoOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input);
                if (message.output != null && Object.hasOwnProperty.call(message, "output"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output);
                return writer;
            };

            /**
             * Encodes the specified DominoOp message, length delimited. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DominoOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DominoOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.DominoOp} DominoOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DominoOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.DominoOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.key = reader.string();
                        break;
                    case 2:
                        message.input = reader.string();
                        break;
                    case 3:
                        message.output = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DominoOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.DominoOp} DominoOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DominoOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DominoOp message.
             * @function verify
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DominoOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.input != null && message.hasOwnProperty("input"))
                    if (!$util.isString(message.input))
                        return "input: string expected";
                if (message.output != null && message.hasOwnProperty("output"))
                    if (!$util.isString(message.output))
                        return "output: string expected";
                return null;
            };

            /**
             * Creates a DominoOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.DominoOp} DominoOp
             */
            DominoOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.DominoOp)
                    return object;
                let message = new $root.tendermint.crypto.DominoOp();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.input != null)
                    message.input = String(object.input);
                if (object.output != null)
                    message.output = String(object.output);
                return message;
            };

            /**
             * Creates a plain object from a DominoOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.DominoOp
             * @static
             * @param {tendermint.crypto.DominoOp} message DominoOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DominoOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.key = "";
                    object.input = "";
                    object.output = "";
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.input != null && message.hasOwnProperty("input"))
                    object.input = message.input;
                if (message.output != null && message.hasOwnProperty("output"))
                    object.output = message.output;
                return object;
            };

            /**
             * Converts this DominoOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.DominoOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DominoOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DominoOp;
        })();

        crypto.ProofOp = (function() {

            /**
             * Properties of a ProofOp.
             * @memberof tendermint.crypto
             * @interface IProofOp
             * @property {string|null} [type] ProofOp type
             * @property {Uint8Array|null} [key] ProofOp key
             * @property {Uint8Array|null} [data] ProofOp data
             */

            /**
             * Constructs a new ProofOp.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOp.
             * @implements IProofOp
             * @constructor
             * @param {tendermint.crypto.IProofOp=} [properties] Properties to set
             */
            function ProofOp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProofOp type.
             * @member {string} type
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.type = "";

            /**
             * ProofOp key.
             * @member {Uint8Array} key
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.key = $util.newBuffer([]);

            /**
             * ProofOp data.
             * @member {Uint8Array} data
             * @memberof tendermint.crypto.ProofOp
             * @instance
             */
            ProofOp.prototype.data = $util.newBuffer([]);

            /**
             * Encodes the specified ProofOp message. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key);
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                return writer;
            };

            /**
             * Encodes the specified ProofOp message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProofOp message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOp} ProofOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type = reader.string();
                        break;
                    case 2:
                        message.key = reader.bytes();
                        break;
                    case 3:
                        message.data = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProofOp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ProofOp} ProofOp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProofOp message.
             * @function verify
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProofOp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type != null && message.hasOwnProperty("type"))
                    if (!$util.isString(message.type))
                        return "type: string expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                        return "key: buffer expected";
                if (message.data != null && message.hasOwnProperty("data"))
                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                        return "data: buffer expected";
                return null;
            };

            /**
             * Creates a ProofOp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ProofOp} ProofOp
             */
            ProofOp.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ProofOp)
                    return object;
                let message = new $root.tendermint.crypto.ProofOp();
                if (object.type != null)
                    message.type = String(object.type);
                if (object.key != null)
                    if (typeof object.key === "string")
                        $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                    else if (object.key.length)
                        message.key = object.key;
                if (object.data != null)
                    if (typeof object.data === "string")
                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                    else if (object.data.length)
                        message.data = object.data;
                return message;
            };

            /**
             * Creates a plain object from a ProofOp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ProofOp
             * @static
             * @param {tendermint.crypto.ProofOp} message ProofOp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProofOp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type = "";
                    if (options.bytes === String)
                        object.key = "";
                    else {
                        object.key = [];
                        if (options.bytes !== Array)
                            object.key = $util.newBuffer(object.key);
                    }
                    if (options.bytes === String)
                        object.data = "";
                    else {
                        object.data = [];
                        if (options.bytes !== Array)
                            object.data = $util.newBuffer(object.data);
                    }
                }
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = message.type;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                return object;
            };

            /**
             * Converts this ProofOp to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ProofOp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProofOp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProofOp;
        })();

        crypto.ProofOps = (function() {

            /**
             * Properties of a ProofOps.
             * @memberof tendermint.crypto
             * @interface IProofOps
             * @property {Array.<tendermint.crypto.IProofOp>|null} [ops] ProofOps ops
             */

            /**
             * Constructs a new ProofOps.
             * @memberof tendermint.crypto
             * @classdesc Represents a ProofOps.
             * @implements IProofOps
             * @constructor
             * @param {tendermint.crypto.IProofOps=} [properties] Properties to set
             */
            function ProofOps(properties) {
                this.ops = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ProofOps ops.
             * @member {Array.<tendermint.crypto.IProofOp>} ops
             * @memberof tendermint.crypto.ProofOps
             * @instance
             */
            ProofOps.prototype.ops = $util.emptyArray;

            /**
             * Encodes the specified ProofOps message. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
             * @function encode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOps.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ops != null && message.ops.length)
                    for (let i = 0; i < message.ops.length; ++i)
                        $root.tendermint.crypto.ProofOp.encode(message.ops[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ProofOps message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ProofOps.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ProofOps message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.crypto.ProofOps} ProofOps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOps.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOps();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.ops && message.ops.length))
                            message.ops = [];
                        message.ops.push($root.tendermint.crypto.ProofOp.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ProofOps message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.crypto.ProofOps} ProofOps
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ProofOps.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ProofOps message.
             * @function verify
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ProofOps.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ops != null && message.hasOwnProperty("ops")) {
                    if (!Array.isArray(message.ops))
                        return "ops: array expected";
                    for (let i = 0; i < message.ops.length; ++i) {
                        let error = $root.tendermint.crypto.ProofOp.verify(message.ops[i]);
                        if (error)
                            return "ops." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ProofOps message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.crypto.ProofOps} ProofOps
             */
            ProofOps.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.crypto.ProofOps)
                    return object;
                let message = new $root.tendermint.crypto.ProofOps();
                if (object.ops) {
                    if (!Array.isArray(object.ops))
                        throw TypeError(".tendermint.crypto.ProofOps.ops: array expected");
                    message.ops = [];
                    for (let i = 0; i < object.ops.length; ++i) {
                        if (typeof object.ops[i] !== "object")
                            throw TypeError(".tendermint.crypto.ProofOps.ops: object expected");
                        message.ops[i] = $root.tendermint.crypto.ProofOp.fromObject(object.ops[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ProofOps message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.crypto.ProofOps
             * @static
             * @param {tendermint.crypto.ProofOps} message ProofOps
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ProofOps.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.ops = [];
                if (message.ops && message.ops.length) {
                    object.ops = [];
                    for (let j = 0; j < message.ops.length; ++j)
                        object.ops[j] = $root.tendermint.crypto.ProofOp.toObject(message.ops[j], options);
                }
                return object;
            };

            /**
             * Converts this ProofOps to JSON.
             * @function toJSON
             * @memberof tendermint.crypto.ProofOps
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ProofOps.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ProofOps;
        })();

        return crypto;
    })();

    tendermint.version = (function() {

        /**
         * Namespace version.
         * @memberof tendermint
         * @namespace
         */
        const version = {};

        version.App = (function() {

            /**
             * Properties of an App.
             * @memberof tendermint.version
             * @interface IApp
             * @property {Long|null} [protocol] App protocol
             * @property {string|null} [software] App software
             */

            /**
             * Constructs a new App.
             * @memberof tendermint.version
             * @classdesc Represents an App.
             * @implements IApp
             * @constructor
             * @param {tendermint.version.IApp=} [properties] Properties to set
             */
            function App(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * App protocol.
             * @member {Long} protocol
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.protocol = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * App software.
             * @member {string} software
             * @memberof tendermint.version.App
             * @instance
             */
            App.prototype.software = "";

            /**
             * Encodes the specified App message. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.IApp} message App message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            App.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.protocol);
                if (message.software != null && Object.hasOwnProperty.call(message, "software"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.software);
                return writer;
            };

            /**
             * Encodes the specified App message, length delimited. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.IApp} message App message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            App.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an App message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.App
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.version.App} App
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            App.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.App();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.protocol = reader.uint64();
                        break;
                    case 2:
                        message.software = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an App message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.version.App
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.version.App} App
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            App.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an App message.
             * @function verify
             * @memberof tendermint.version.App
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            App.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    if (!$util.isInteger(message.protocol) && !(message.protocol && $util.isInteger(message.protocol.low) && $util.isInteger(message.protocol.high)))
                        return "protocol: integer|Long expected";
                if (message.software != null && message.hasOwnProperty("software"))
                    if (!$util.isString(message.software))
                        return "software: string expected";
                return null;
            };

            /**
             * Creates an App message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.version.App
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.version.App} App
             */
            App.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.version.App)
                    return object;
                let message = new $root.tendermint.version.App();
                if (object.protocol != null)
                    if ($util.Long)
                        (message.protocol = $util.Long.fromValue(object.protocol)).unsigned = true;
                    else if (typeof object.protocol === "string")
                        message.protocol = parseInt(object.protocol, 10);
                    else if (typeof object.protocol === "number")
                        message.protocol = object.protocol;
                    else if (typeof object.protocol === "object")
                        message.protocol = new $util.LongBits(object.protocol.low >>> 0, object.protocol.high >>> 0).toNumber(true);
                if (object.software != null)
                    message.software = String(object.software);
                return message;
            };

            /**
             * Creates a plain object from an App message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.version.App
             * @static
             * @param {tendermint.version.App} message App
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            App.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.protocol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.protocol = options.longs === String ? "0" : 0;
                    object.software = "";
                }
                if (message.protocol != null && message.hasOwnProperty("protocol"))
                    if (typeof message.protocol === "number")
                        object.protocol = options.longs === String ? String(message.protocol) : message.protocol;
                    else
                        object.protocol = options.longs === String ? $util.Long.prototype.toString.call(message.protocol) : options.longs === Number ? new $util.LongBits(message.protocol.low >>> 0, message.protocol.high >>> 0).toNumber(true) : message.protocol;
                if (message.software != null && message.hasOwnProperty("software"))
                    object.software = message.software;
                return object;
            };

            /**
             * Converts this App to JSON.
             * @function toJSON
             * @memberof tendermint.version.App
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            App.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return App;
        })();

        version.Consensus = (function() {

            /**
             * Properties of a Consensus.
             * @memberof tendermint.version
             * @interface IConsensus
             * @property {Long|null} [block] Consensus block
             * @property {Long|null} [app] Consensus app
             */

            /**
             * Constructs a new Consensus.
             * @memberof tendermint.version
             * @classdesc Represents a Consensus.
             * @implements IConsensus
             * @constructor
             * @param {tendermint.version.IConsensus=} [properties] Properties to set
             */
            function Consensus(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Consensus block.
             * @member {Long} block
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Consensus app.
             * @member {Long} app
             * @memberof tendermint.version.Consensus
             * @instance
             */
            Consensus.prototype.app = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Encodes the specified Consensus message. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
             * @function encode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Consensus.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.block);
                if (message.app != null && Object.hasOwnProperty.call(message, "app"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.app);
                return writer;
            };

            /**
             * Encodes the specified Consensus message, length delimited. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
             * @function encodeDelimited
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Consensus.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Consensus message from the specified reader or buffer.
             * @function decode
             * @memberof tendermint.version.Consensus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {tendermint.version.Consensus} Consensus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Consensus.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.Consensus();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.block = reader.uint64();
                        break;
                    case 2:
                        message.app = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Consensus message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof tendermint.version.Consensus
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {tendermint.version.Consensus} Consensus
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Consensus.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Consensus message.
             * @function verify
             * @memberof tendermint.version.Consensus
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Consensus.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.block != null && message.hasOwnProperty("block"))
                    if (!$util.isInteger(message.block) && !(message.block && $util.isInteger(message.block.low) && $util.isInteger(message.block.high)))
                        return "block: integer|Long expected";
                if (message.app != null && message.hasOwnProperty("app"))
                    if (!$util.isInteger(message.app) && !(message.app && $util.isInteger(message.app.low) && $util.isInteger(message.app.high)))
                        return "app: integer|Long expected";
                return null;
            };

            /**
             * Creates a Consensus message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof tendermint.version.Consensus
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {tendermint.version.Consensus} Consensus
             */
            Consensus.fromObject = function fromObject(object) {
                if (object instanceof $root.tendermint.version.Consensus)
                    return object;
                let message = new $root.tendermint.version.Consensus();
                if (object.block != null)
                    if ($util.Long)
                        (message.block = $util.Long.fromValue(object.block)).unsigned = true;
                    else if (typeof object.block === "string")
                        message.block = parseInt(object.block, 10);
                    else if (typeof object.block === "number")
                        message.block = object.block;
                    else if (typeof object.block === "object")
                        message.block = new $util.LongBits(object.block.low >>> 0, object.block.high >>> 0).toNumber(true);
                if (object.app != null)
                    if ($util.Long)
                        (message.app = $util.Long.fromValue(object.app)).unsigned = true;
                    else if (typeof object.app === "string")
                        message.app = parseInt(object.app, 10);
                    else if (typeof object.app === "number")
                        message.app = object.app;
                    else if (typeof object.app === "object")
                        message.app = new $util.LongBits(object.app.low >>> 0, object.app.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a Consensus message. Also converts values to other types if specified.
             * @function toObject
             * @memberof tendermint.version.Consensus
             * @static
             * @param {tendermint.version.Consensus} message Consensus
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Consensus.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.block = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.app = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.app = options.longs === String ? "0" : 0;
                }
                if (message.block != null && message.hasOwnProperty("block"))
                    if (typeof message.block === "number")
                        object.block = options.longs === String ? String(message.block) : message.block;
                    else
                        object.block = options.longs === String ? $util.Long.prototype.toString.call(message.block) : options.longs === Number ? new $util.LongBits(message.block.low >>> 0, message.block.high >>> 0).toNumber(true) : message.block;
                if (message.app != null && message.hasOwnProperty("app"))
                    if (typeof message.app === "number")
                        object.app = options.longs === String ? String(message.app) : message.app;
                    else
                        object.app = options.longs === String ? $util.Long.prototype.toString.call(message.app) : options.longs === Number ? new $util.LongBits(message.app.low >>> 0, message.app.high >>> 0).toNumber(true) : message.app;
                return object;
            };

            /**
             * Converts this Consensus to JSON.
             * @function toJSON
             * @memberof tendermint.version.Consensus
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Consensus.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Consensus;
        })();

        return version;
    })();

    tendermint.libs = (function() {

        /**
         * Namespace libs.
         * @memberof tendermint
         * @namespace
         */
        const libs = {};

        libs.bits = (function() {

            /**
             * Namespace bits.
             * @memberof tendermint.libs
             * @namespace
             */
            const bits = {};

            bits.BitArray = (function() {

                /**
                 * Properties of a BitArray.
                 * @memberof tendermint.libs.bits
                 * @interface IBitArray
                 * @property {Long|null} [bits] BitArray bits
                 * @property {Array.<Long>|null} [elems] BitArray elems
                 */

                /**
                 * Constructs a new BitArray.
                 * @memberof tendermint.libs.bits
                 * @classdesc Represents a BitArray.
                 * @implements IBitArray
                 * @constructor
                 * @param {tendermint.libs.bits.IBitArray=} [properties] Properties to set
                 */
                function BitArray(properties) {
                    this.elems = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * BitArray bits.
                 * @member {Long} bits
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.bits = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                /**
                 * BitArray elems.
                 * @member {Array.<Long>} elems
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 */
                BitArray.prototype.elems = $util.emptyArray;

                /**
                 * Encodes the specified BitArray message. Does not implicitly {@link tendermint.libs.bits.BitArray.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.IBitArray} message BitArray message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BitArray.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.bits != null && Object.hasOwnProperty.call(message, "bits"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.bits);
                    if (message.elems != null && message.elems.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.elems.length; ++i)
                            writer.uint64(message.elems[i]);
                        writer.ldelim();
                    }
                    return writer;
                };

                /**
                 * Encodes the specified BitArray message, length delimited. Does not implicitly {@link tendermint.libs.bits.BitArray.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.IBitArray} message BitArray message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BitArray.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a BitArray message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BitArray.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.libs.bits.BitArray();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.bits = reader.int64();
                            break;
                        case 2:
                            if (!(message.elems && message.elems.length))
                                message.elems = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.elems.push(reader.uint64());
                            } else
                                message.elems.push(reader.uint64());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a BitArray message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BitArray.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a BitArray message.
                 * @function verify
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BitArray.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.bits != null && message.hasOwnProperty("bits"))
                        if (!$util.isInteger(message.bits) && !(message.bits && $util.isInteger(message.bits.low) && $util.isInteger(message.bits.high)))
                            return "bits: integer|Long expected";
                    if (message.elems != null && message.hasOwnProperty("elems")) {
                        if (!Array.isArray(message.elems))
                            return "elems: array expected";
                        for (let i = 0; i < message.elems.length; ++i)
                            if (!$util.isInteger(message.elems[i]) && !(message.elems[i] && $util.isInteger(message.elems[i].low) && $util.isInteger(message.elems[i].high)))
                                return "elems: integer|Long[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a BitArray message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.libs.bits.BitArray} BitArray
                 */
                BitArray.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.libs.bits.BitArray)
                        return object;
                    let message = new $root.tendermint.libs.bits.BitArray();
                    if (object.bits != null)
                        if ($util.Long)
                            (message.bits = $util.Long.fromValue(object.bits)).unsigned = false;
                        else if (typeof object.bits === "string")
                            message.bits = parseInt(object.bits, 10);
                        else if (typeof object.bits === "number")
                            message.bits = object.bits;
                        else if (typeof object.bits === "object")
                            message.bits = new $util.LongBits(object.bits.low >>> 0, object.bits.high >>> 0).toNumber();
                    if (object.elems) {
                        if (!Array.isArray(object.elems))
                            throw TypeError(".tendermint.libs.bits.BitArray.elems: array expected");
                        message.elems = [];
                        for (let i = 0; i < object.elems.length; ++i)
                            if ($util.Long)
                                (message.elems[i] = $util.Long.fromValue(object.elems[i])).unsigned = true;
                            else if (typeof object.elems[i] === "string")
                                message.elems[i] = parseInt(object.elems[i], 10);
                            else if (typeof object.elems[i] === "number")
                                message.elems[i] = object.elems[i];
                            else if (typeof object.elems[i] === "object")
                                message.elems[i] = new $util.LongBits(object.elems[i].low >>> 0, object.elems[i].high >>> 0).toNumber(true);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a BitArray message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.libs.bits.BitArray
                 * @static
                 * @param {tendermint.libs.bits.BitArray} message BitArray
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BitArray.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.elems = [];
                    if (options.defaults)
                        if ($util.Long) {
                            let long = new $util.Long(0, 0, false);
                            object.bits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.bits = options.longs === String ? "0" : 0;
                    if (message.bits != null && message.hasOwnProperty("bits"))
                        if (typeof message.bits === "number")
                            object.bits = options.longs === String ? String(message.bits) : message.bits;
                        else
                            object.bits = options.longs === String ? $util.Long.prototype.toString.call(message.bits) : options.longs === Number ? new $util.LongBits(message.bits.low >>> 0, message.bits.high >>> 0).toNumber() : message.bits;
                    if (message.elems && message.elems.length) {
                        object.elems = [];
                        for (let j = 0; j < message.elems.length; ++j)
                            if (typeof message.elems[j] === "number")
                                object.elems[j] = options.longs === String ? String(message.elems[j]) : message.elems[j];
                            else
                                object.elems[j] = options.longs === String ? $util.Long.prototype.toString.call(message.elems[j]) : options.longs === Number ? new $util.LongBits(message.elems[j].low >>> 0, message.elems[j].high >>> 0).toNumber(true) : message.elems[j];
                    }
                    return object;
                };

                /**
                 * Converts this BitArray to JSON.
                 * @function toJSON
                 * @memberof tendermint.libs.bits.BitArray
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BitArray.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return BitArray;
            })();

            return bits;
        })();

        return libs;
    })();

    return tendermint;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (let i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
             * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.public_dependency = [];
                this.weak_dependency = [];
                this.message_type = [];
                this.enum_type = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto public_dependency.
             * @member {Array.<number>} public_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.public_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto weak_dependency.
             * @member {Array.<number>} weak_dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;

            /**
             * FileDescriptorProto message_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} message_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.message_type = $util.emptyArray;

            /**
             * FileDescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto source_code_info.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.source_code_info = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (let i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.message_type != null && message.message_type.length)
                    for (let i = 0; i < message.message_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (let i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.public_dependency != null && message.public_dependency.length)
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                if (message.weak_dependency != null && message.weak_dependency.length)
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.public_dependency && message.public_dependency.length))
                            message.public_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.public_dependency.push(reader.int32());
                        } else
                            message.public_dependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weak_dependency && message.weak_dependency.length))
                            message.weak_dependency = [];
                        if ((tag & 7) === 2) {
                            let end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weak_dependency.push(reader.int32());
                        } else
                            message.weak_dependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.message_type && message.message_type.length))
                            message.message_type = [];
                        message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                    if (!Array.isArray(message.public_dependency))
                        return "public_dependency: array expected";
                    for (let i = 0; i < message.public_dependency.length; ++i)
                        if (!$util.isInteger(message.public_dependency[i]))
                            return "public_dependency: integer[] expected";
                }
                if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                    if (!Array.isArray(message.weak_dependency))
                        return "weak_dependency: array expected";
                    for (let i = 0; i < message.weak_dependency.length; ++i)
                        if (!$util.isInteger(message.weak_dependency[i]))
                            return "weak_dependency: integer[] expected";
                }
                if (message.message_type != null && message.hasOwnProperty("message_type")) {
                    if (!Array.isArray(message.message_type))
                        return "message_type: array expected";
                    for (let i = 0; i < message.message_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                        if (error)
                            return "message_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                    if (error)
                        return "source_code_info." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.public_dependency) {
                    if (!Array.isArray(object.public_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                    message.public_dependency = [];
                    for (let i = 0; i < object.public_dependency.length; ++i)
                        message.public_dependency[i] = object.public_dependency[i] | 0;
                }
                if (object.weak_dependency) {
                    if (!Array.isArray(object.weak_dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                    message.weak_dependency = [];
                    for (let i = 0; i < object.weak_dependency.length; ++i)
                        message.weak_dependency[i] = object.weak_dependency[i] | 0;
                }
                if (object.message_type) {
                    if (!Array.isArray(object.message_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                    message.message_type = [];
                    for (let i = 0; i < object.message_type.length; ++i) {
                        if (typeof object.message_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                        message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.source_code_info != null) {
                    if (typeof object.source_code_info !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                    message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.message_type = [];
                    object.enum_type = [];
                    object.service = [];
                    object.extension = [];
                    object.public_dependency = [];
                    object.weak_dependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.source_code_info = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.message_type && message.message_type.length) {
                    object.message_type = [];
                    for (let j = 0; j < message.message_type.length; ++j)
                        object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                    object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                if (message.public_dependency && message.public_dependency.length) {
                    object.public_dependency = [];
                    for (let j = 0; j < message.public_dependency.length; ++j)
                        object.public_dependency[j] = message.public_dependency[j];
                }
                if (message.weak_dependency && message.weak_dependency.length) {
                    object.weak_dependency = [];
                    for (let j = 0; j < message.weak_dependency.length; ++j)
                        object.weak_dependency[j] = message.weak_dependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
             * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nested_type = [];
                this.enum_type = [];
                this.extension_range = [];
                this.oneof_decl = [];
                this.reserved_range = [];
                this.reserved_name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nested_type.
             * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nested_type = $util.emptyArray;

            /**
             * DescriptorProto enum_type.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enum_type = $util.emptyArray;

            /**
             * DescriptorProto extension_range.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension_range = $util.emptyArray;

            /**
             * DescriptorProto oneof_decl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneof_decl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reserved_range.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_range = $util.emptyArray;

            /**
             * DescriptorProto reserved_name.
             * @member {Array.<string>} reserved_name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reserved_name = $util.emptyArray;

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (let i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nested_type != null && message.nested_type.length)
                    for (let i = 0; i < message.nested_type.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enum_type != null && message.enum_type.length)
                    for (let i = 0; i < message.enum_type.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extension_range != null && message.extension_range.length)
                    for (let i = 0; i < message.extension_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneof_decl != null && message.oneof_decl.length)
                    for (let i = 0; i < message.oneof_decl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reserved_range != null && message.reserved_range.length)
                    for (let i = 0; i < message.reserved_range.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reserved_name != null && message.reserved_name.length)
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nested_type && message.nested_type.length))
                            message.nested_type = [];
                        message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enum_type && message.enum_type.length))
                            message.enum_type = [];
                        message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extension_range && message.extension_range.length))
                            message.extension_range = [];
                        message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneof_decl && message.oneof_decl.length))
                            message.oneof_decl = [];
                        message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reserved_range && message.reserved_range.length))
                            message.reserved_range = [];
                        message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reserved_name && message.reserved_name.length))
                            message.reserved_name = [];
                        message.reserved_name.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                    if (!Array.isArray(message.nested_type))
                        return "nested_type: array expected";
                    for (let i = 0; i < message.nested_type.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                        if (error)
                            return "nested_type." + error;
                    }
                }
                if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                    if (!Array.isArray(message.enum_type))
                        return "enum_type: array expected";
                    for (let i = 0; i < message.enum_type.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                        if (error)
                            return "enum_type." + error;
                    }
                }
                if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                    if (!Array.isArray(message.extension_range))
                        return "extension_range: array expected";
                    for (let i = 0; i < message.extension_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                        if (error)
                            return "extension_range." + error;
                    }
                }
                if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                    if (!Array.isArray(message.oneof_decl))
                        return "oneof_decl: array expected";
                    for (let i = 0; i < message.oneof_decl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                        if (error)
                            return "oneof_decl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                    if (!Array.isArray(message.reserved_range))
                        return "reserved_range: array expected";
                    for (let i = 0; i < message.reserved_range.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                        if (error)
                            return "reserved_range." + error;
                    }
                }
                if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                    if (!Array.isArray(message.reserved_name))
                        return "reserved_name: array expected";
                    for (let i = 0; i < message.reserved_name.length; ++i)
                        if (!$util.isString(message.reserved_name[i]))
                            return "reserved_name: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nested_type) {
                    if (!Array.isArray(object.nested_type))
                        throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                    message.nested_type = [];
                    for (let i = 0; i < object.nested_type.length; ++i) {
                        if (typeof object.nested_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                        message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                    }
                }
                if (object.enum_type) {
                    if (!Array.isArray(object.enum_type))
                        throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                    message.enum_type = [];
                    for (let i = 0; i < object.enum_type.length; ++i) {
                        if (typeof object.enum_type[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                        message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                    }
                }
                if (object.extension_range) {
                    if (!Array.isArray(object.extension_range))
                        throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                    message.extension_range = [];
                    for (let i = 0; i < object.extension_range.length; ++i) {
                        if (typeof object.extension_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                        message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                    }
                }
                if (object.oneof_decl) {
                    if (!Array.isArray(object.oneof_decl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                    message.oneof_decl = [];
                    for (let i = 0; i < object.oneof_decl.length; ++i) {
                        if (typeof object.oneof_decl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                        message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reserved_range) {
                    if (!Array.isArray(object.reserved_range))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                    message.reserved_range = [];
                    for (let i = 0; i < object.reserved_range.length; ++i) {
                        if (typeof object.reserved_range[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                        message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                    }
                }
                if (object.reserved_name) {
                    if (!Array.isArray(object.reserved_name))
                        throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                    message.reserved_name = [];
                    for (let i = 0; i < object.reserved_name.length; ++i)
                        message.reserved_name[i] = String(object.reserved_name[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nested_type = [];
                    object.enum_type = [];
                    object.extension_range = [];
                    object.extension = [];
                    object.oneof_decl = [];
                    object.reserved_range = [];
                    object.reserved_name = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nested_type && message.nested_type.length) {
                    object.nested_type = [];
                    for (let j = 0; j < message.nested_type.length; ++j)
                        object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                }
                if (message.enum_type && message.enum_type.length) {
                    object.enum_type = [];
                    for (let j = 0; j < message.enum_type.length; ++j)
                        object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                }
                if (message.extension_range && message.extension_range.length) {
                    object.extension_range = [];
                    for (let j = 0; j < message.extension_range.length; ++j)
                        object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneof_decl && message.oneof_decl.length) {
                    object.oneof_decl = [];
                    for (let j = 0; j < message.oneof_decl.length; ++j)
                        object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                }
                if (message.reserved_range && message.reserved_range.length) {
                    object.reserved_range = [];
                    for (let j = 0; j < message.reserved_range.length; ++j)
                        object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                }
                if (message.reserved_name && message.reserved_name.length) {
                    object.reserved_name = [];
                    for (let j = 0; j < message.reserved_name.length; ++j)
                        object.reserved_name[j] = message.reserved_name[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [type_name] FieldDescriptorProto type_name
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [default_value] FieldDescriptorProto default_value
             * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
             * @property {string|null} [json_name] FieldDescriptorProto json_name
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto type_name.
             * @member {string} type_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type_name = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto default_value.
             * @member {string} default_value
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.default_value = "";

            /**
             * FieldDescriptorProto oneof_index.
             * @member {number} oneof_index
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneof_index = 0;

            /**
             * FieldDescriptorProto json_name.
             * @member {string} json_name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.json_name = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.type_name = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.default_value = reader.string();
                        break;
                    case 9:
                        message.oneof_index = reader.int32();
                        break;
                    case 10:
                        message.json_name = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    if (!$util.isString(message.type_name))
                        return "type_name: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    if (!$util.isString(message.default_value))
                        return "default_value: string expected";
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    if (!$util.isInteger(message.oneof_index))
                        return "oneof_index: integer expected";
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    if (!$util.isString(message.json_name))
                        return "json_name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.type_name != null)
                    message.type_name = String(object.type_name);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.default_value != null)
                    message.default_value = String(object.default_value);
                if (object.oneof_index != null)
                    message.oneof_index = object.oneof_index | 0;
                if (object.json_name != null)
                    message.json_name = String(object.json_name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.type_name = "";
                    object.default_value = "";
                    object.options = null;
                    object.oneof_index = 0;
                    object.json_name = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.type_name != null && message.hasOwnProperty("type_name"))
                    object.type_name = message.type_name;
                if (message.default_value != null && message.hasOwnProperty("default_value"))
                    object.default_value = message.default_value;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                    object.oneof_index = message.oneof_index;
                if (message.json_name != null && message.hasOwnProperty("json_name"))
                    object.json_name = message.json_name;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (let i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.value = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (let i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [input_type] MethodDescriptorProto input_type
             * @property {string|null} [output_type] MethodDescriptorProto output_type
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
             * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto input_type.
             * @member {string} input_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.input_type = "";

            /**
             * MethodDescriptorProto output_type.
             * @member {string} output_type
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.output_type = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto client_streaming.
             * @member {boolean} client_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.client_streaming = false;

            /**
             * MethodDescriptorProto server_streaming.
             * @member {boolean} server_streaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.server_streaming = false;

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.input_type = reader.string();
                        break;
                    case 3:
                        message.output_type = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.client_streaming = reader.bool();
                        break;
                    case 6:
                        message.server_streaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    if (!$util.isString(message.input_type))
                        return "input_type: string expected";
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    if (!$util.isString(message.output_type))
                        return "output_type: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    if (typeof message.client_streaming !== "boolean")
                        return "client_streaming: boolean expected";
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    if (typeof message.server_streaming !== "boolean")
                        return "server_streaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.input_type != null)
                    message.input_type = String(object.input_type);
                if (object.output_type != null)
                    message.output_type = String(object.output_type);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.client_streaming != null)
                    message.client_streaming = Boolean(object.client_streaming);
                if (object.server_streaming != null)
                    message.server_streaming = Boolean(object.server_streaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.input_type = "";
                    object.output_type = "";
                    object.options = null;
                    object.client_streaming = false;
                    object.server_streaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.input_type != null && message.hasOwnProperty("input_type"))
                    object.input_type = message.input_type;
                if (message.output_type != null && message.hasOwnProperty("output_type"))
                    object.output_type = message.output_type;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                    object.client_streaming = message.client_streaming;
                if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                    object.server_streaming = message.server_streaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [java_package] FileOptions java_package
             * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
             * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
             * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
             * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
             * @property {string|null} [go_package] FileOptions go_package
             * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
             * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
             * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
             * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
             * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters_all"] FileOptions .gogoproto.goproto_getters_all
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix_all"] FileOptions .gogoproto.goproto_enum_prefix_all
             * @property {boolean|null} [".gogoproto.goproto_stringer_all"] FileOptions .gogoproto.goproto_stringer_all
             * @property {boolean|null} [".gogoproto.verbose_equal_all"] FileOptions .gogoproto.verbose_equal_all
             * @property {boolean|null} [".gogoproto.face_all"] FileOptions .gogoproto.face_all
             * @property {boolean|null} [".gogoproto.gostring_all"] FileOptions .gogoproto.gostring_all
             * @property {boolean|null} [".gogoproto.populate_all"] FileOptions .gogoproto.populate_all
             * @property {boolean|null} [".gogoproto.stringer_all"] FileOptions .gogoproto.stringer_all
             * @property {boolean|null} [".gogoproto.onlyone_all"] FileOptions .gogoproto.onlyone_all
             * @property {boolean|null} [".gogoproto.equal_all"] FileOptions .gogoproto.equal_all
             * @property {boolean|null} [".gogoproto.description_all"] FileOptions .gogoproto.description_all
             * @property {boolean|null} [".gogoproto.testgen_all"] FileOptions .gogoproto.testgen_all
             * @property {boolean|null} [".gogoproto.benchgen_all"] FileOptions .gogoproto.benchgen_all
             * @property {boolean|null} [".gogoproto.marshaler_all"] FileOptions .gogoproto.marshaler_all
             * @property {boolean|null} [".gogoproto.unmarshaler_all"] FileOptions .gogoproto.unmarshaler_all
             * @property {boolean|null} [".gogoproto.stable_marshaler_all"] FileOptions .gogoproto.stable_marshaler_all
             * @property {boolean|null} [".gogoproto.sizer_all"] FileOptions .gogoproto.sizer_all
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer_all"] FileOptions .gogoproto.goproto_enum_stringer_all
             * @property {boolean|null} [".gogoproto.enum_stringer_all"] FileOptions .gogoproto.enum_stringer_all
             * @property {boolean|null} [".gogoproto.unsafe_marshaler_all"] FileOptions .gogoproto.unsafe_marshaler_all
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler_all"] FileOptions .gogoproto.unsafe_unmarshaler_all
             * @property {boolean|null} [".gogoproto.goproto_extensions_map_all"] FileOptions .gogoproto.goproto_extensions_map_all
             * @property {boolean|null} [".gogoproto.goproto_unrecognized_all"] FileOptions .gogoproto.goproto_unrecognized_all
             * @property {boolean|null} [".gogoproto.gogoproto_import"] FileOptions .gogoproto.gogoproto_import
             * @property {boolean|null} [".gogoproto.protosizer_all"] FileOptions .gogoproto.protosizer_all
             * @property {boolean|null} [".gogoproto.compare_all"] FileOptions .gogoproto.compare_all
             * @property {boolean|null} [".gogoproto.typedecl_all"] FileOptions .gogoproto.typedecl_all
             * @property {boolean|null} [".gogoproto.enumdecl_all"] FileOptions .gogoproto.enumdecl_all
             * @property {boolean|null} [".gogoproto.goproto_registration"] FileOptions .gogoproto.goproto_registration
             * @property {boolean|null} [".gogoproto.messagename_all"] FileOptions .gogoproto.messagename_all
             * @property {boolean|null} [".gogoproto.goproto_sizecache_all"] FileOptions .gogoproto.goproto_sizecache_all
             * @property {boolean|null} [".gogoproto.goproto_unkeyed_all"] FileOptions .gogoproto.goproto_unkeyed_all
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions java_package.
             * @member {string} java_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_package = "";

            /**
             * FileOptions java_outer_classname.
             * @member {string} java_outer_classname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_outer_classname = "";

            /**
             * FileOptions java_multiple_files.
             * @member {boolean} java_multiple_files
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_multiple_files = false;

            /**
             * FileOptions java_generate_equals_and_hash.
             * @member {boolean} java_generate_equals_and_hash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generate_equals_and_hash = false;

            /**
             * FileOptions java_string_check_utf8.
             * @member {boolean} java_string_check_utf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_string_check_utf8 = false;

            /**
             * FileOptions optimize_for.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimize_for = 1;

            /**
             * FileOptions go_package.
             * @member {string} go_package
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.go_package = "";

            /**
             * FileOptions cc_generic_services.
             * @member {boolean} cc_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_generic_services = false;

            /**
             * FileOptions java_generic_services.
             * @member {boolean} java_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.java_generic_services = false;

            /**
             * FileOptions py_generic_services.
             * @member {boolean} py_generic_services
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.py_generic_services = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions cc_enable_arenas.
             * @member {boolean} cc_enable_arenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.cc_enable_arenas = false;

            /**
             * FileOptions objc_class_prefix.
             * @member {string} objc_class_prefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objc_class_prefix = "";

            /**
             * FileOptions csharp_namespace.
             * @member {string} csharp_namespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharp_namespace = "";

            /**
             * FileOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FileOptions .gogoproto.goproto_getters_all.
             * @member {boolean} .gogoproto.goproto_getters_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_getters_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_prefix_all.
             * @member {boolean} .gogoproto.goproto_enum_prefix_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_prefix_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_stringer_all.
             * @member {boolean} .gogoproto.goproto_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.verbose_equal_all.
             * @member {boolean} .gogoproto.verbose_equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.verbose_equal_all"] = false;

            /**
             * FileOptions .gogoproto.face_all.
             * @member {boolean} .gogoproto.face_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.face_all"] = false;

            /**
             * FileOptions .gogoproto.gostring_all.
             * @member {boolean} .gogoproto.gostring_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gostring_all"] = false;

            /**
             * FileOptions .gogoproto.populate_all.
             * @member {boolean} .gogoproto.populate_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.populate_all"] = false;

            /**
             * FileOptions .gogoproto.stringer_all.
             * @member {boolean} .gogoproto.stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stringer_all"] = false;

            /**
             * FileOptions .gogoproto.onlyone_all.
             * @member {boolean} .gogoproto.onlyone_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.onlyone_all"] = false;

            /**
             * FileOptions .gogoproto.equal_all.
             * @member {boolean} .gogoproto.equal_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.equal_all"] = false;

            /**
             * FileOptions .gogoproto.description_all.
             * @member {boolean} .gogoproto.description_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.description_all"] = false;

            /**
             * FileOptions .gogoproto.testgen_all.
             * @member {boolean} .gogoproto.testgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.testgen_all"] = false;

            /**
             * FileOptions .gogoproto.benchgen_all.
             * @member {boolean} .gogoproto.benchgen_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.benchgen_all"] = false;

            /**
             * FileOptions .gogoproto.marshaler_all.
             * @member {boolean} .gogoproto.marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unmarshaler_all.
             * @member {boolean} .gogoproto.unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.stable_marshaler_all.
             * @member {boolean} .gogoproto.stable_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.stable_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.sizer_all.
             * @member {boolean} .gogoproto.sizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.sizer_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_enum_stringer_all.
             * @member {boolean} .gogoproto.goproto_enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.enum_stringer_all.
             * @member {boolean} .gogoproto.enum_stringer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enum_stringer_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_marshaler_all.
             * @member {boolean} .gogoproto.unsafe_marshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_marshaler_all"] = false;

            /**
             * FileOptions .gogoproto.unsafe_unmarshaler_all.
             * @member {boolean} .gogoproto.unsafe_unmarshaler_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.unsafe_unmarshaler_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_extensions_map_all.
             * @member {boolean} .gogoproto.goproto_extensions_map_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_extensions_map_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unrecognized_all.
             * @member {boolean} .gogoproto.goproto_unrecognized_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unrecognized_all"] = false;

            /**
             * FileOptions .gogoproto.gogoproto_import.
             * @member {boolean} .gogoproto.gogoproto_import
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.gogoproto_import"] = false;

            /**
             * FileOptions .gogoproto.protosizer_all.
             * @member {boolean} .gogoproto.protosizer_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.protosizer_all"] = false;

            /**
             * FileOptions .gogoproto.compare_all.
             * @member {boolean} .gogoproto.compare_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.compare_all"] = false;

            /**
             * FileOptions .gogoproto.typedecl_all.
             * @member {boolean} .gogoproto.typedecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.typedecl_all"] = false;

            /**
             * FileOptions .gogoproto.enumdecl_all.
             * @member {boolean} .gogoproto.enumdecl_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.enumdecl_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_registration.
             * @member {boolean} .gogoproto.goproto_registration
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_registration"] = false;

            /**
             * FileOptions .gogoproto.messagename_all.
             * @member {boolean} .gogoproto.messagename_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.messagename_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_sizecache_all.
             * @member {boolean} .gogoproto.goproto_sizecache_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_sizecache_all"] = false;

            /**
             * FileOptions .gogoproto.goproto_unkeyed_all.
             * @member {boolean} .gogoproto.goproto_unkeyed_all
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype[".gogoproto.goproto_unkeyed_all"] = false;

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters_all"))
                    writer.uint32(/* id 63001, wireType 0 =*/504008).bool(message[".gogoproto.goproto_getters_all"]);
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix_all"))
                    writer.uint32(/* id 63002, wireType 0 =*/504016).bool(message[".gogoproto.goproto_enum_prefix_all"]);
                if (message[".gogoproto.goproto_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer_all"))
                    writer.uint32(/* id 63003, wireType 0 =*/504024).bool(message[".gogoproto.goproto_stringer_all"]);
                if (message[".gogoproto.verbose_equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal_all"))
                    writer.uint32(/* id 63004, wireType 0 =*/504032).bool(message[".gogoproto.verbose_equal_all"]);
                if (message[".gogoproto.face_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face_all"))
                    writer.uint32(/* id 63005, wireType 0 =*/504040).bool(message[".gogoproto.face_all"]);
                if (message[".gogoproto.gostring_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring_all"))
                    writer.uint32(/* id 63006, wireType 0 =*/504048).bool(message[".gogoproto.gostring_all"]);
                if (message[".gogoproto.populate_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate_all"))
                    writer.uint32(/* id 63007, wireType 0 =*/504056).bool(message[".gogoproto.populate_all"]);
                if (message[".gogoproto.stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer_all"))
                    writer.uint32(/* id 63008, wireType 0 =*/504064).bool(message[".gogoproto.stringer_all"]);
                if (message[".gogoproto.onlyone_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone_all"))
                    writer.uint32(/* id 63009, wireType 0 =*/504072).bool(message[".gogoproto.onlyone_all"]);
                if (message[".gogoproto.equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal_all"))
                    writer.uint32(/* id 63013, wireType 0 =*/504104).bool(message[".gogoproto.equal_all"]);
                if (message[".gogoproto.description_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description_all"))
                    writer.uint32(/* id 63014, wireType 0 =*/504112).bool(message[".gogoproto.description_all"]);
                if (message[".gogoproto.testgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen_all"))
                    writer.uint32(/* id 63015, wireType 0 =*/504120).bool(message[".gogoproto.testgen_all"]);
                if (message[".gogoproto.benchgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen_all"))
                    writer.uint32(/* id 63016, wireType 0 =*/504128).bool(message[".gogoproto.benchgen_all"]);
                if (message[".gogoproto.marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler_all"))
                    writer.uint32(/* id 63017, wireType 0 =*/504136).bool(message[".gogoproto.marshaler_all"]);
                if (message[".gogoproto.unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler_all"))
                    writer.uint32(/* id 63018, wireType 0 =*/504144).bool(message[".gogoproto.unmarshaler_all"]);
                if (message[".gogoproto.stable_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler_all"))
                    writer.uint32(/* id 63019, wireType 0 =*/504152).bool(message[".gogoproto.stable_marshaler_all"]);
                if (message[".gogoproto.sizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer_all"))
                    writer.uint32(/* id 63020, wireType 0 =*/504160).bool(message[".gogoproto.sizer_all"]);
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer_all"))
                    writer.uint32(/* id 63021, wireType 0 =*/504168).bool(message[".gogoproto.goproto_enum_stringer_all"]);
                if (message[".gogoproto.enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer_all"))
                    writer.uint32(/* id 63022, wireType 0 =*/504176).bool(message[".gogoproto.enum_stringer_all"]);
                if (message[".gogoproto.unsafe_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler_all"))
                    writer.uint32(/* id 63023, wireType 0 =*/504184).bool(message[".gogoproto.unsafe_marshaler_all"]);
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler_all"))
                    writer.uint32(/* id 63024, wireType 0 =*/504192).bool(message[".gogoproto.unsafe_unmarshaler_all"]);
                if (message[".gogoproto.goproto_extensions_map_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map_all"))
                    writer.uint32(/* id 63025, wireType 0 =*/504200).bool(message[".gogoproto.goproto_extensions_map_all"]);
                if (message[".gogoproto.goproto_unrecognized_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized_all"))
                    writer.uint32(/* id 63026, wireType 0 =*/504208).bool(message[".gogoproto.goproto_unrecognized_all"]);
                if (message[".gogoproto.gogoproto_import"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gogoproto_import"))
                    writer.uint32(/* id 63027, wireType 0 =*/504216).bool(message[".gogoproto.gogoproto_import"]);
                if (message[".gogoproto.protosizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer_all"))
                    writer.uint32(/* id 63028, wireType 0 =*/504224).bool(message[".gogoproto.protosizer_all"]);
                if (message[".gogoproto.compare_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare_all"))
                    writer.uint32(/* id 63029, wireType 0 =*/504232).bool(message[".gogoproto.compare_all"]);
                if (message[".gogoproto.typedecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl_all"))
                    writer.uint32(/* id 63030, wireType 0 =*/504240).bool(message[".gogoproto.typedecl_all"]);
                if (message[".gogoproto.enumdecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl_all"))
                    writer.uint32(/* id 63031, wireType 0 =*/504248).bool(message[".gogoproto.enumdecl_all"]);
                if (message[".gogoproto.goproto_registration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_registration"))
                    writer.uint32(/* id 63032, wireType 0 =*/504256).bool(message[".gogoproto.goproto_registration"]);
                if (message[".gogoproto.messagename_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename_all"))
                    writer.uint32(/* id 63033, wireType 0 =*/504264).bool(message[".gogoproto.messagename_all"]);
                if (message[".gogoproto.goproto_sizecache_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache_all"))
                    writer.uint32(/* id 63034, wireType 0 =*/504272).bool(message[".gogoproto.goproto_sizecache_all"]);
                if (message[".gogoproto.goproto_unkeyed_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed_all"))
                    writer.uint32(/* id 63035, wireType 0 =*/504280).bool(message[".gogoproto.goproto_unkeyed_all"]);
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.java_package = reader.string();
                        break;
                    case 8:
                        message.java_outer_classname = reader.string();
                        break;
                    case 10:
                        message.java_multiple_files = reader.bool();
                        break;
                    case 20:
                        message.java_generate_equals_and_hash = reader.bool();
                        break;
                    case 27:
                        message.java_string_check_utf8 = reader.bool();
                        break;
                    case 9:
                        message.optimize_for = reader.int32();
                        break;
                    case 11:
                        message.go_package = reader.string();
                        break;
                    case 16:
                        message.cc_generic_services = reader.bool();
                        break;
                    case 17:
                        message.java_generic_services = reader.bool();
                        break;
                    case 18:
                        message.py_generic_services = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.cc_enable_arenas = reader.bool();
                        break;
                    case 36:
                        message.objc_class_prefix = reader.string();
                        break;
                    case 37:
                        message.csharp_namespace = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 63001:
                        message[".gogoproto.goproto_getters_all"] = reader.bool();
                        break;
                    case 63002:
                        message[".gogoproto.goproto_enum_prefix_all"] = reader.bool();
                        break;
                    case 63003:
                        message[".gogoproto.goproto_stringer_all"] = reader.bool();
                        break;
                    case 63004:
                        message[".gogoproto.verbose_equal_all"] = reader.bool();
                        break;
                    case 63005:
                        message[".gogoproto.face_all"] = reader.bool();
                        break;
                    case 63006:
                        message[".gogoproto.gostring_all"] = reader.bool();
                        break;
                    case 63007:
                        message[".gogoproto.populate_all"] = reader.bool();
                        break;
                    case 63008:
                        message[".gogoproto.stringer_all"] = reader.bool();
                        break;
                    case 63009:
                        message[".gogoproto.onlyone_all"] = reader.bool();
                        break;
                    case 63013:
                        message[".gogoproto.equal_all"] = reader.bool();
                        break;
                    case 63014:
                        message[".gogoproto.description_all"] = reader.bool();
                        break;
                    case 63015:
                        message[".gogoproto.testgen_all"] = reader.bool();
                        break;
                    case 63016:
                        message[".gogoproto.benchgen_all"] = reader.bool();
                        break;
                    case 63017:
                        message[".gogoproto.marshaler_all"] = reader.bool();
                        break;
                    case 63018:
                        message[".gogoproto.unmarshaler_all"] = reader.bool();
                        break;
                    case 63019:
                        message[".gogoproto.stable_marshaler_all"] = reader.bool();
                        break;
                    case 63020:
                        message[".gogoproto.sizer_all"] = reader.bool();
                        break;
                    case 63021:
                        message[".gogoproto.goproto_enum_stringer_all"] = reader.bool();
                        break;
                    case 63022:
                        message[".gogoproto.enum_stringer_all"] = reader.bool();
                        break;
                    case 63023:
                        message[".gogoproto.unsafe_marshaler_all"] = reader.bool();
                        break;
                    case 63024:
                        message[".gogoproto.unsafe_unmarshaler_all"] = reader.bool();
                        break;
                    case 63025:
                        message[".gogoproto.goproto_extensions_map_all"] = reader.bool();
                        break;
                    case 63026:
                        message[".gogoproto.goproto_unrecognized_all"] = reader.bool();
                        break;
                    case 63027:
                        message[".gogoproto.gogoproto_import"] = reader.bool();
                        break;
                    case 63028:
                        message[".gogoproto.protosizer_all"] = reader.bool();
                        break;
                    case 63029:
                        message[".gogoproto.compare_all"] = reader.bool();
                        break;
                    case 63030:
                        message[".gogoproto.typedecl_all"] = reader.bool();
                        break;
                    case 63031:
                        message[".gogoproto.enumdecl_all"] = reader.bool();
                        break;
                    case 63032:
                        message[".gogoproto.goproto_registration"] = reader.bool();
                        break;
                    case 63033:
                        message[".gogoproto.messagename_all"] = reader.bool();
                        break;
                    case 63034:
                        message[".gogoproto.goproto_sizecache_all"] = reader.bool();
                        break;
                    case 63035:
                        message[".gogoproto.goproto_unkeyed_all"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    if (!$util.isString(message.java_package))
                        return "java_package: string expected";
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    if (!$util.isString(message.java_outer_classname))
                        return "java_outer_classname: string expected";
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    if (typeof message.java_multiple_files !== "boolean")
                        return "java_multiple_files: boolean expected";
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    if (typeof message.java_generate_equals_and_hash !== "boolean")
                        return "java_generate_equals_and_hash: boolean expected";
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    if (typeof message.java_string_check_utf8 !== "boolean")
                        return "java_string_check_utf8: boolean expected";
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    switch (message.optimize_for) {
                    default:
                        return "optimize_for: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    if (!$util.isString(message.go_package))
                        return "go_package: string expected";
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    if (typeof message.cc_generic_services !== "boolean")
                        return "cc_generic_services: boolean expected";
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    if (typeof message.java_generic_services !== "boolean")
                        return "java_generic_services: boolean expected";
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    if (typeof message.py_generic_services !== "boolean")
                        return "py_generic_services: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    if (typeof message.cc_enable_arenas !== "boolean")
                        return "cc_enable_arenas: boolean expected";
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    if (!$util.isString(message.objc_class_prefix))
                        return "objc_class_prefix: string expected";
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    if (!$util.isString(message.csharp_namespace))
                        return "csharp_namespace: string expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    if (typeof message[".gogoproto.goproto_getters_all"] !== "boolean")
                        return ".gogoproto.goproto_getters_all: boolean expected";
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    if (typeof message[".gogoproto.goproto_enum_prefix_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix_all: boolean expected";
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    if (typeof message[".gogoproto.goproto_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_stringer_all: boolean expected";
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    if (typeof message[".gogoproto.verbose_equal_all"] !== "boolean")
                        return ".gogoproto.verbose_equal_all: boolean expected";
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    if (typeof message[".gogoproto.face_all"] !== "boolean")
                        return ".gogoproto.face_all: boolean expected";
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    if (typeof message[".gogoproto.gostring_all"] !== "boolean")
                        return ".gogoproto.gostring_all: boolean expected";
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    if (typeof message[".gogoproto.populate_all"] !== "boolean")
                        return ".gogoproto.populate_all: boolean expected";
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    if (typeof message[".gogoproto.stringer_all"] !== "boolean")
                        return ".gogoproto.stringer_all: boolean expected";
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    if (typeof message[".gogoproto.onlyone_all"] !== "boolean")
                        return ".gogoproto.onlyone_all: boolean expected";
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    if (typeof message[".gogoproto.equal_all"] !== "boolean")
                        return ".gogoproto.equal_all: boolean expected";
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    if (typeof message[".gogoproto.description_all"] !== "boolean")
                        return ".gogoproto.description_all: boolean expected";
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    if (typeof message[".gogoproto.testgen_all"] !== "boolean")
                        return ".gogoproto.testgen_all: boolean expected";
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    if (typeof message[".gogoproto.benchgen_all"] !== "boolean")
                        return ".gogoproto.benchgen_all: boolean expected";
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    if (typeof message[".gogoproto.marshaler_all"] !== "boolean")
                        return ".gogoproto.marshaler_all: boolean expected";
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    if (typeof message[".gogoproto.unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unmarshaler_all: boolean expected";
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    if (typeof message[".gogoproto.stable_marshaler_all"] !== "boolean")
                        return ".gogoproto.stable_marshaler_all: boolean expected";
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    if (typeof message[".gogoproto.sizer_all"] !== "boolean")
                        return ".gogoproto.sizer_all: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    if (typeof message[".gogoproto.goproto_enum_stringer_all"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer_all: boolean expected";
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    if (typeof message[".gogoproto.enum_stringer_all"] !== "boolean")
                        return ".gogoproto.enum_stringer_all: boolean expected";
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    if (typeof message[".gogoproto.unsafe_marshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler_all: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler_all"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler_all: boolean expected";
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    if (typeof message[".gogoproto.goproto_extensions_map_all"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map_all: boolean expected";
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    if (typeof message[".gogoproto.goproto_unrecognized_all"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized_all: boolean expected";
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    if (typeof message[".gogoproto.gogoproto_import"] !== "boolean")
                        return ".gogoproto.gogoproto_import: boolean expected";
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    if (typeof message[".gogoproto.protosizer_all"] !== "boolean")
                        return ".gogoproto.protosizer_all: boolean expected";
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    if (typeof message[".gogoproto.compare_all"] !== "boolean")
                        return ".gogoproto.compare_all: boolean expected";
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    if (typeof message[".gogoproto.typedecl_all"] !== "boolean")
                        return ".gogoproto.typedecl_all: boolean expected";
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    if (typeof message[".gogoproto.enumdecl_all"] !== "boolean")
                        return ".gogoproto.enumdecl_all: boolean expected";
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    if (typeof message[".gogoproto.goproto_registration"] !== "boolean")
                        return ".gogoproto.goproto_registration: boolean expected";
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    if (typeof message[".gogoproto.messagename_all"] !== "boolean")
                        return ".gogoproto.messagename_all: boolean expected";
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    if (typeof message[".gogoproto.goproto_sizecache_all"] !== "boolean")
                        return ".gogoproto.goproto_sizecache_all: boolean expected";
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    if (typeof message[".gogoproto.goproto_unkeyed_all"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed_all: boolean expected";
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.java_package != null)
                    message.java_package = String(object.java_package);
                if (object.java_outer_classname != null)
                    message.java_outer_classname = String(object.java_outer_classname);
                if (object.java_multiple_files != null)
                    message.java_multiple_files = Boolean(object.java_multiple_files);
                if (object.java_generate_equals_and_hash != null)
                    message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                if (object.java_string_check_utf8 != null)
                    message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                switch (object.optimize_for) {
                case "SPEED":
                case 1:
                    message.optimize_for = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimize_for = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimize_for = 3;
                    break;
                }
                if (object.go_package != null)
                    message.go_package = String(object.go_package);
                if (object.cc_generic_services != null)
                    message.cc_generic_services = Boolean(object.cc_generic_services);
                if (object.java_generic_services != null)
                    message.java_generic_services = Boolean(object.java_generic_services);
                if (object.py_generic_services != null)
                    message.py_generic_services = Boolean(object.py_generic_services);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.cc_enable_arenas != null)
                    message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                if (object.objc_class_prefix != null)
                    message.objc_class_prefix = String(object.objc_class_prefix);
                if (object.csharp_namespace != null)
                    message.csharp_namespace = String(object.csharp_namespace);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters_all"] != null)
                    message[".gogoproto.goproto_getters_all"] = Boolean(object[".gogoproto.goproto_getters_all"]);
                if (object[".gogoproto.goproto_enum_prefix_all"] != null)
                    message[".gogoproto.goproto_enum_prefix_all"] = Boolean(object[".gogoproto.goproto_enum_prefix_all"]);
                if (object[".gogoproto.goproto_stringer_all"] != null)
                    message[".gogoproto.goproto_stringer_all"] = Boolean(object[".gogoproto.goproto_stringer_all"]);
                if (object[".gogoproto.verbose_equal_all"] != null)
                    message[".gogoproto.verbose_equal_all"] = Boolean(object[".gogoproto.verbose_equal_all"]);
                if (object[".gogoproto.face_all"] != null)
                    message[".gogoproto.face_all"] = Boolean(object[".gogoproto.face_all"]);
                if (object[".gogoproto.gostring_all"] != null)
                    message[".gogoproto.gostring_all"] = Boolean(object[".gogoproto.gostring_all"]);
                if (object[".gogoproto.populate_all"] != null)
                    message[".gogoproto.populate_all"] = Boolean(object[".gogoproto.populate_all"]);
                if (object[".gogoproto.stringer_all"] != null)
                    message[".gogoproto.stringer_all"] = Boolean(object[".gogoproto.stringer_all"]);
                if (object[".gogoproto.onlyone_all"] != null)
                    message[".gogoproto.onlyone_all"] = Boolean(object[".gogoproto.onlyone_all"]);
                if (object[".gogoproto.equal_all"] != null)
                    message[".gogoproto.equal_all"] = Boolean(object[".gogoproto.equal_all"]);
                if (object[".gogoproto.description_all"] != null)
                    message[".gogoproto.description_all"] = Boolean(object[".gogoproto.description_all"]);
                if (object[".gogoproto.testgen_all"] != null)
                    message[".gogoproto.testgen_all"] = Boolean(object[".gogoproto.testgen_all"]);
                if (object[".gogoproto.benchgen_all"] != null)
                    message[".gogoproto.benchgen_all"] = Boolean(object[".gogoproto.benchgen_all"]);
                if (object[".gogoproto.marshaler_all"] != null)
                    message[".gogoproto.marshaler_all"] = Boolean(object[".gogoproto.marshaler_all"]);
                if (object[".gogoproto.unmarshaler_all"] != null)
                    message[".gogoproto.unmarshaler_all"] = Boolean(object[".gogoproto.unmarshaler_all"]);
                if (object[".gogoproto.stable_marshaler_all"] != null)
                    message[".gogoproto.stable_marshaler_all"] = Boolean(object[".gogoproto.stable_marshaler_all"]);
                if (object[".gogoproto.sizer_all"] != null)
                    message[".gogoproto.sizer_all"] = Boolean(object[".gogoproto.sizer_all"]);
                if (object[".gogoproto.goproto_enum_stringer_all"] != null)
                    message[".gogoproto.goproto_enum_stringer_all"] = Boolean(object[".gogoproto.goproto_enum_stringer_all"]);
                if (object[".gogoproto.enum_stringer_all"] != null)
                    message[".gogoproto.enum_stringer_all"] = Boolean(object[".gogoproto.enum_stringer_all"]);
                if (object[".gogoproto.unsafe_marshaler_all"] != null)
                    message[".gogoproto.unsafe_marshaler_all"] = Boolean(object[".gogoproto.unsafe_marshaler_all"]);
                if (object[".gogoproto.unsafe_unmarshaler_all"] != null)
                    message[".gogoproto.unsafe_unmarshaler_all"] = Boolean(object[".gogoproto.unsafe_unmarshaler_all"]);
                if (object[".gogoproto.goproto_extensions_map_all"] != null)
                    message[".gogoproto.goproto_extensions_map_all"] = Boolean(object[".gogoproto.goproto_extensions_map_all"]);
                if (object[".gogoproto.goproto_unrecognized_all"] != null)
                    message[".gogoproto.goproto_unrecognized_all"] = Boolean(object[".gogoproto.goproto_unrecognized_all"]);
                if (object[".gogoproto.gogoproto_import"] != null)
                    message[".gogoproto.gogoproto_import"] = Boolean(object[".gogoproto.gogoproto_import"]);
                if (object[".gogoproto.protosizer_all"] != null)
                    message[".gogoproto.protosizer_all"] = Boolean(object[".gogoproto.protosizer_all"]);
                if (object[".gogoproto.compare_all"] != null)
                    message[".gogoproto.compare_all"] = Boolean(object[".gogoproto.compare_all"]);
                if (object[".gogoproto.typedecl_all"] != null)
                    message[".gogoproto.typedecl_all"] = Boolean(object[".gogoproto.typedecl_all"]);
                if (object[".gogoproto.enumdecl_all"] != null)
                    message[".gogoproto.enumdecl_all"] = Boolean(object[".gogoproto.enumdecl_all"]);
                if (object[".gogoproto.goproto_registration"] != null)
                    message[".gogoproto.goproto_registration"] = Boolean(object[".gogoproto.goproto_registration"]);
                if (object[".gogoproto.messagename_all"] != null)
                    message[".gogoproto.messagename_all"] = Boolean(object[".gogoproto.messagename_all"]);
                if (object[".gogoproto.goproto_sizecache_all"] != null)
                    message[".gogoproto.goproto_sizecache_all"] = Boolean(object[".gogoproto.goproto_sizecache_all"]);
                if (object[".gogoproto.goproto_unkeyed_all"] != null)
                    message[".gogoproto.goproto_unkeyed_all"] = Boolean(object[".gogoproto.goproto_unkeyed_all"]);
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.java_package = "";
                    object.java_outer_classname = "";
                    object.optimize_for = options.enums === String ? "SPEED" : 1;
                    object.java_multiple_files = false;
                    object.go_package = "";
                    object.cc_generic_services = false;
                    object.java_generic_services = false;
                    object.py_generic_services = false;
                    object.java_generate_equals_and_hash = false;
                    object.deprecated = false;
                    object.java_string_check_utf8 = false;
                    object.cc_enable_arenas = false;
                    object.objc_class_prefix = "";
                    object.csharp_namespace = "";
                    object[".gogoproto.goproto_getters_all"] = false;
                    object[".gogoproto.goproto_enum_prefix_all"] = false;
                    object[".gogoproto.goproto_stringer_all"] = false;
                    object[".gogoproto.verbose_equal_all"] = false;
                    object[".gogoproto.face_all"] = false;
                    object[".gogoproto.gostring_all"] = false;
                    object[".gogoproto.populate_all"] = false;
                    object[".gogoproto.stringer_all"] = false;
                    object[".gogoproto.onlyone_all"] = false;
                    object[".gogoproto.equal_all"] = false;
                    object[".gogoproto.description_all"] = false;
                    object[".gogoproto.testgen_all"] = false;
                    object[".gogoproto.benchgen_all"] = false;
                    object[".gogoproto.marshaler_all"] = false;
                    object[".gogoproto.unmarshaler_all"] = false;
                    object[".gogoproto.stable_marshaler_all"] = false;
                    object[".gogoproto.sizer_all"] = false;
                    object[".gogoproto.goproto_enum_stringer_all"] = false;
                    object[".gogoproto.enum_stringer_all"] = false;
                    object[".gogoproto.unsafe_marshaler_all"] = false;
                    object[".gogoproto.unsafe_unmarshaler_all"] = false;
                    object[".gogoproto.goproto_extensions_map_all"] = false;
                    object[".gogoproto.goproto_unrecognized_all"] = false;
                    object[".gogoproto.gogoproto_import"] = false;
                    object[".gogoproto.protosizer_all"] = false;
                    object[".gogoproto.compare_all"] = false;
                    object[".gogoproto.typedecl_all"] = false;
                    object[".gogoproto.enumdecl_all"] = false;
                    object[".gogoproto.goproto_registration"] = false;
                    object[".gogoproto.messagename_all"] = false;
                    object[".gogoproto.goproto_sizecache_all"] = false;
                    object[".gogoproto.goproto_unkeyed_all"] = false;
                }
                if (message.java_package != null && message.hasOwnProperty("java_package"))
                    object.java_package = message.java_package;
                if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                    object.java_outer_classname = message.java_outer_classname;
                if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                    object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                    object.java_multiple_files = message.java_multiple_files;
                if (message.go_package != null && message.hasOwnProperty("go_package"))
                    object.go_package = message.go_package;
                if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                    object.cc_generic_services = message.cc_generic_services;
                if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                    object.java_generic_services = message.java_generic_services;
                if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                    object.py_generic_services = message.py_generic_services;
                if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                    object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                    object.java_string_check_utf8 = message.java_string_check_utf8;
                if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                    object.cc_enable_arenas = message.cc_enable_arenas;
                if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                    object.objc_class_prefix = message.objc_class_prefix;
                if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                    object.csharp_namespace = message.csharp_namespace;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                    object[".gogoproto.goproto_getters_all"] = message[".gogoproto.goproto_getters_all"];
                if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                    object[".gogoproto.goproto_enum_prefix_all"] = message[".gogoproto.goproto_enum_prefix_all"];
                if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                    object[".gogoproto.goproto_stringer_all"] = message[".gogoproto.goproto_stringer_all"];
                if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                    object[".gogoproto.verbose_equal_all"] = message[".gogoproto.verbose_equal_all"];
                if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                    object[".gogoproto.face_all"] = message[".gogoproto.face_all"];
                if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                    object[".gogoproto.gostring_all"] = message[".gogoproto.gostring_all"];
                if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                    object[".gogoproto.populate_all"] = message[".gogoproto.populate_all"];
                if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                    object[".gogoproto.stringer_all"] = message[".gogoproto.stringer_all"];
                if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                    object[".gogoproto.onlyone_all"] = message[".gogoproto.onlyone_all"];
                if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                    object[".gogoproto.equal_all"] = message[".gogoproto.equal_all"];
                if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                    object[".gogoproto.description_all"] = message[".gogoproto.description_all"];
                if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                    object[".gogoproto.testgen_all"] = message[".gogoproto.testgen_all"];
                if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                    object[".gogoproto.benchgen_all"] = message[".gogoproto.benchgen_all"];
                if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                    object[".gogoproto.marshaler_all"] = message[".gogoproto.marshaler_all"];
                if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                    object[".gogoproto.unmarshaler_all"] = message[".gogoproto.unmarshaler_all"];
                if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                    object[".gogoproto.stable_marshaler_all"] = message[".gogoproto.stable_marshaler_all"];
                if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                    object[".gogoproto.sizer_all"] = message[".gogoproto.sizer_all"];
                if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                    object[".gogoproto.goproto_enum_stringer_all"] = message[".gogoproto.goproto_enum_stringer_all"];
                if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                    object[".gogoproto.enum_stringer_all"] = message[".gogoproto.enum_stringer_all"];
                if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                    object[".gogoproto.unsafe_marshaler_all"] = message[".gogoproto.unsafe_marshaler_all"];
                if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                    object[".gogoproto.unsafe_unmarshaler_all"] = message[".gogoproto.unsafe_unmarshaler_all"];
                if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                    object[".gogoproto.goproto_extensions_map_all"] = message[".gogoproto.goproto_extensions_map_all"];
                if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                    object[".gogoproto.goproto_unrecognized_all"] = message[".gogoproto.goproto_unrecognized_all"];
                if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                    object[".gogoproto.gogoproto_import"] = message[".gogoproto.gogoproto_import"];
                if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                    object[".gogoproto.protosizer_all"] = message[".gogoproto.protosizer_all"];
                if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                    object[".gogoproto.compare_all"] = message[".gogoproto.compare_all"];
                if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                    object[".gogoproto.typedecl_all"] = message[".gogoproto.typedecl_all"];
                if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                    object[".gogoproto.enumdecl_all"] = message[".gogoproto.enumdecl_all"];
                if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                    object[".gogoproto.goproto_registration"] = message[".gogoproto.goproto_registration"];
                if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                    object[".gogoproto.messagename_all"] = message[".gogoproto.messagename_all"];
                if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                    object[".gogoproto.goproto_sizecache_all"] = message[".gogoproto.goproto_sizecache_all"];
                if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                    object[".gogoproto.goproto_unkeyed_all"] = message[".gogoproto.goproto_unkeyed_all"];
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
             * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [map_entry] MessageOptions map_entry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_getters"] MessageOptions .gogoproto.goproto_getters
             * @property {boolean|null} [".gogoproto.goproto_stringer"] MessageOptions .gogoproto.goproto_stringer
             * @property {boolean|null} [".gogoproto.verbose_equal"] MessageOptions .gogoproto.verbose_equal
             * @property {boolean|null} [".gogoproto.face"] MessageOptions .gogoproto.face
             * @property {boolean|null} [".gogoproto.gostring"] MessageOptions .gogoproto.gostring
             * @property {boolean|null} [".gogoproto.populate"] MessageOptions .gogoproto.populate
             * @property {boolean|null} [".gogoproto.stringer"] MessageOptions .gogoproto.stringer
             * @property {boolean|null} [".gogoproto.onlyone"] MessageOptions .gogoproto.onlyone
             * @property {boolean|null} [".gogoproto.equal"] MessageOptions .gogoproto.equal
             * @property {boolean|null} [".gogoproto.description"] MessageOptions .gogoproto.description
             * @property {boolean|null} [".gogoproto.testgen"] MessageOptions .gogoproto.testgen
             * @property {boolean|null} [".gogoproto.benchgen"] MessageOptions .gogoproto.benchgen
             * @property {boolean|null} [".gogoproto.marshaler"] MessageOptions .gogoproto.marshaler
             * @property {boolean|null} [".gogoproto.unmarshaler"] MessageOptions .gogoproto.unmarshaler
             * @property {boolean|null} [".gogoproto.stable_marshaler"] MessageOptions .gogoproto.stable_marshaler
             * @property {boolean|null} [".gogoproto.sizer"] MessageOptions .gogoproto.sizer
             * @property {boolean|null} [".gogoproto.unsafe_marshaler"] MessageOptions .gogoproto.unsafe_marshaler
             * @property {boolean|null} [".gogoproto.unsafe_unmarshaler"] MessageOptions .gogoproto.unsafe_unmarshaler
             * @property {boolean|null} [".gogoproto.goproto_extensions_map"] MessageOptions .gogoproto.goproto_extensions_map
             * @property {boolean|null} [".gogoproto.goproto_unrecognized"] MessageOptions .gogoproto.goproto_unrecognized
             * @property {boolean|null} [".gogoproto.protosizer"] MessageOptions .gogoproto.protosizer
             * @property {boolean|null} [".gogoproto.compare"] MessageOptions .gogoproto.compare
             * @property {boolean|null} [".gogoproto.typedecl"] MessageOptions .gogoproto.typedecl
             * @property {boolean|null} [".gogoproto.messagename"] MessageOptions .gogoproto.messagename
             * @property {boolean|null} [".gogoproto.goproto_sizecache"] MessageOptions .gogoproto.goproto_sizecache
             * @property {boolean|null} [".gogoproto.goproto_unkeyed"] MessageOptions .gogoproto.goproto_unkeyed
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions message_set_wire_format.
             * @member {boolean} message_set_wire_format
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.message_set_wire_format = false;

            /**
             * MessageOptions no_standard_descriptor_accessor.
             * @member {boolean} no_standard_descriptor_accessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.no_standard_descriptor_accessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions map_entry.
             * @member {boolean} map_entry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.map_entry = false;

            /**
             * MessageOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MessageOptions .gogoproto.goproto_getters.
             * @member {boolean} .gogoproto.goproto_getters
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_getters"] = false;

            /**
             * MessageOptions .gogoproto.goproto_stringer.
             * @member {boolean} .gogoproto.goproto_stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_stringer"] = false;

            /**
             * MessageOptions .gogoproto.verbose_equal.
             * @member {boolean} .gogoproto.verbose_equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.verbose_equal"] = false;

            /**
             * MessageOptions .gogoproto.face.
             * @member {boolean} .gogoproto.face
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.face"] = false;

            /**
             * MessageOptions .gogoproto.gostring.
             * @member {boolean} .gogoproto.gostring
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.gostring"] = false;

            /**
             * MessageOptions .gogoproto.populate.
             * @member {boolean} .gogoproto.populate
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.populate"] = false;

            /**
             * MessageOptions .gogoproto.stringer.
             * @member {boolean} .gogoproto.stringer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stringer"] = false;

            /**
             * MessageOptions .gogoproto.onlyone.
             * @member {boolean} .gogoproto.onlyone
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.onlyone"] = false;

            /**
             * MessageOptions .gogoproto.equal.
             * @member {boolean} .gogoproto.equal
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.equal"] = false;

            /**
             * MessageOptions .gogoproto.description.
             * @member {boolean} .gogoproto.description
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.description"] = false;

            /**
             * MessageOptions .gogoproto.testgen.
             * @member {boolean} .gogoproto.testgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.testgen"] = false;

            /**
             * MessageOptions .gogoproto.benchgen.
             * @member {boolean} .gogoproto.benchgen
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.benchgen"] = false;

            /**
             * MessageOptions .gogoproto.marshaler.
             * @member {boolean} .gogoproto.marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unmarshaler.
             * @member {boolean} .gogoproto.unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.stable_marshaler.
             * @member {boolean} .gogoproto.stable_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.stable_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.sizer.
             * @member {boolean} .gogoproto.sizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.sizer"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_marshaler.
             * @member {boolean} .gogoproto.unsafe_marshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_marshaler"] = false;

            /**
             * MessageOptions .gogoproto.unsafe_unmarshaler.
             * @member {boolean} .gogoproto.unsafe_unmarshaler
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.unsafe_unmarshaler"] = false;

            /**
             * MessageOptions .gogoproto.goproto_extensions_map.
             * @member {boolean} .gogoproto.goproto_extensions_map
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_extensions_map"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unrecognized.
             * @member {boolean} .gogoproto.goproto_unrecognized
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unrecognized"] = false;

            /**
             * MessageOptions .gogoproto.protosizer.
             * @member {boolean} .gogoproto.protosizer
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.protosizer"] = false;

            /**
             * MessageOptions .gogoproto.compare.
             * @member {boolean} .gogoproto.compare
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.compare"] = false;

            /**
             * MessageOptions .gogoproto.typedecl.
             * @member {boolean} .gogoproto.typedecl
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.typedecl"] = false;

            /**
             * MessageOptions .gogoproto.messagename.
             * @member {boolean} .gogoproto.messagename
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.messagename"] = false;

            /**
             * MessageOptions .gogoproto.goproto_sizecache.
             * @member {boolean} .gogoproto.goproto_sizecache
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_sizecache"] = false;

            /**
             * MessageOptions .gogoproto.goproto_unkeyed.
             * @member {boolean} .gogoproto.goproto_unkeyed
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".gogoproto.goproto_unkeyed"] = false;

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_getters"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters"))
                    writer.uint32(/* id 64001, wireType 0 =*/512008).bool(message[".gogoproto.goproto_getters"]);
                if (message[".gogoproto.goproto_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer"))
                    writer.uint32(/* id 64003, wireType 0 =*/512024).bool(message[".gogoproto.goproto_stringer"]);
                if (message[".gogoproto.verbose_equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal"))
                    writer.uint32(/* id 64004, wireType 0 =*/512032).bool(message[".gogoproto.verbose_equal"]);
                if (message[".gogoproto.face"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face"))
                    writer.uint32(/* id 64005, wireType 0 =*/512040).bool(message[".gogoproto.face"]);
                if (message[".gogoproto.gostring"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring"))
                    writer.uint32(/* id 64006, wireType 0 =*/512048).bool(message[".gogoproto.gostring"]);
                if (message[".gogoproto.populate"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate"))
                    writer.uint32(/* id 64007, wireType 0 =*/512056).bool(message[".gogoproto.populate"]);
                if (message[".gogoproto.onlyone"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone"))
                    writer.uint32(/* id 64009, wireType 0 =*/512072).bool(message[".gogoproto.onlyone"]);
                if (message[".gogoproto.equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal"))
                    writer.uint32(/* id 64013, wireType 0 =*/512104).bool(message[".gogoproto.equal"]);
                if (message[".gogoproto.description"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description"))
                    writer.uint32(/* id 64014, wireType 0 =*/512112).bool(message[".gogoproto.description"]);
                if (message[".gogoproto.testgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen"))
                    writer.uint32(/* id 64015, wireType 0 =*/512120).bool(message[".gogoproto.testgen"]);
                if (message[".gogoproto.benchgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen"))
                    writer.uint32(/* id 64016, wireType 0 =*/512128).bool(message[".gogoproto.benchgen"]);
                if (message[".gogoproto.marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler"))
                    writer.uint32(/* id 64017, wireType 0 =*/512136).bool(message[".gogoproto.marshaler"]);
                if (message[".gogoproto.unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler"))
                    writer.uint32(/* id 64018, wireType 0 =*/512144).bool(message[".gogoproto.unmarshaler"]);
                if (message[".gogoproto.stable_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler"))
                    writer.uint32(/* id 64019, wireType 0 =*/512152).bool(message[".gogoproto.stable_marshaler"]);
                if (message[".gogoproto.sizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer"))
                    writer.uint32(/* id 64020, wireType 0 =*/512160).bool(message[".gogoproto.sizer"]);
                if (message[".gogoproto.unsafe_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler"))
                    writer.uint32(/* id 64023, wireType 0 =*/512184).bool(message[".gogoproto.unsafe_marshaler"]);
                if (message[".gogoproto.unsafe_unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler"))
                    writer.uint32(/* id 64024, wireType 0 =*/512192).bool(message[".gogoproto.unsafe_unmarshaler"]);
                if (message[".gogoproto.goproto_extensions_map"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map"))
                    writer.uint32(/* id 64025, wireType 0 =*/512200).bool(message[".gogoproto.goproto_extensions_map"]);
                if (message[".gogoproto.goproto_unrecognized"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized"))
                    writer.uint32(/* id 64026, wireType 0 =*/512208).bool(message[".gogoproto.goproto_unrecognized"]);
                if (message[".gogoproto.protosizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer"))
                    writer.uint32(/* id 64028, wireType 0 =*/512224).bool(message[".gogoproto.protosizer"]);
                if (message[".gogoproto.compare"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare"))
                    writer.uint32(/* id 64029, wireType 0 =*/512232).bool(message[".gogoproto.compare"]);
                if (message[".gogoproto.typedecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl"))
                    writer.uint32(/* id 64030, wireType 0 =*/512240).bool(message[".gogoproto.typedecl"]);
                if (message[".gogoproto.messagename"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename"))
                    writer.uint32(/* id 64033, wireType 0 =*/512264).bool(message[".gogoproto.messagename"]);
                if (message[".gogoproto.goproto_sizecache"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache"))
                    writer.uint32(/* id 64034, wireType 0 =*/512272).bool(message[".gogoproto.goproto_sizecache"]);
                if (message[".gogoproto.goproto_unkeyed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed"))
                    writer.uint32(/* id 64035, wireType 0 =*/512280).bool(message[".gogoproto.goproto_unkeyed"]);
                if (message[".gogoproto.stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer"))
                    writer.uint32(/* id 67008, wireType 0 =*/536064).bool(message[".gogoproto.stringer"]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.message_set_wire_format = reader.bool();
                        break;
                    case 2:
                        message.no_standard_descriptor_accessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.map_entry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 64001:
                        message[".gogoproto.goproto_getters"] = reader.bool();
                        break;
                    case 64003:
                        message[".gogoproto.goproto_stringer"] = reader.bool();
                        break;
                    case 64004:
                        message[".gogoproto.verbose_equal"] = reader.bool();
                        break;
                    case 64005:
                        message[".gogoproto.face"] = reader.bool();
                        break;
                    case 64006:
                        message[".gogoproto.gostring"] = reader.bool();
                        break;
                    case 64007:
                        message[".gogoproto.populate"] = reader.bool();
                        break;
                    case 67008:
                        message[".gogoproto.stringer"] = reader.bool();
                        break;
                    case 64009:
                        message[".gogoproto.onlyone"] = reader.bool();
                        break;
                    case 64013:
                        message[".gogoproto.equal"] = reader.bool();
                        break;
                    case 64014:
                        message[".gogoproto.description"] = reader.bool();
                        break;
                    case 64015:
                        message[".gogoproto.testgen"] = reader.bool();
                        break;
                    case 64016:
                        message[".gogoproto.benchgen"] = reader.bool();
                        break;
                    case 64017:
                        message[".gogoproto.marshaler"] = reader.bool();
                        break;
                    case 64018:
                        message[".gogoproto.unmarshaler"] = reader.bool();
                        break;
                    case 64019:
                        message[".gogoproto.stable_marshaler"] = reader.bool();
                        break;
                    case 64020:
                        message[".gogoproto.sizer"] = reader.bool();
                        break;
                    case 64023:
                        message[".gogoproto.unsafe_marshaler"] = reader.bool();
                        break;
                    case 64024:
                        message[".gogoproto.unsafe_unmarshaler"] = reader.bool();
                        break;
                    case 64025:
                        message[".gogoproto.goproto_extensions_map"] = reader.bool();
                        break;
                    case 64026:
                        message[".gogoproto.goproto_unrecognized"] = reader.bool();
                        break;
                    case 64028:
                        message[".gogoproto.protosizer"] = reader.bool();
                        break;
                    case 64029:
                        message[".gogoproto.compare"] = reader.bool();
                        break;
                    case 64030:
                        message[".gogoproto.typedecl"] = reader.bool();
                        break;
                    case 64033:
                        message[".gogoproto.messagename"] = reader.bool();
                        break;
                    case 64034:
                        message[".gogoproto.goproto_sizecache"] = reader.bool();
                        break;
                    case 64035:
                        message[".gogoproto.goproto_unkeyed"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    if (typeof message.message_set_wire_format !== "boolean")
                        return "message_set_wire_format: boolean expected";
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    if (typeof message.no_standard_descriptor_accessor !== "boolean")
                        return "no_standard_descriptor_accessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    if (typeof message.map_entry !== "boolean")
                        return "map_entry: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    if (typeof message[".gogoproto.goproto_getters"] !== "boolean")
                        return ".gogoproto.goproto_getters: boolean expected";
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    if (typeof message[".gogoproto.goproto_stringer"] !== "boolean")
                        return ".gogoproto.goproto_stringer: boolean expected";
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    if (typeof message[".gogoproto.verbose_equal"] !== "boolean")
                        return ".gogoproto.verbose_equal: boolean expected";
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    if (typeof message[".gogoproto.face"] !== "boolean")
                        return ".gogoproto.face: boolean expected";
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    if (typeof message[".gogoproto.gostring"] !== "boolean")
                        return ".gogoproto.gostring: boolean expected";
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    if (typeof message[".gogoproto.populate"] !== "boolean")
                        return ".gogoproto.populate: boolean expected";
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    if (typeof message[".gogoproto.stringer"] !== "boolean")
                        return ".gogoproto.stringer: boolean expected";
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    if (typeof message[".gogoproto.onlyone"] !== "boolean")
                        return ".gogoproto.onlyone: boolean expected";
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    if (typeof message[".gogoproto.equal"] !== "boolean")
                        return ".gogoproto.equal: boolean expected";
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    if (typeof message[".gogoproto.description"] !== "boolean")
                        return ".gogoproto.description: boolean expected";
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    if (typeof message[".gogoproto.testgen"] !== "boolean")
                        return ".gogoproto.testgen: boolean expected";
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    if (typeof message[".gogoproto.benchgen"] !== "boolean")
                        return ".gogoproto.benchgen: boolean expected";
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    if (typeof message[".gogoproto.marshaler"] !== "boolean")
                        return ".gogoproto.marshaler: boolean expected";
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    if (typeof message[".gogoproto.unmarshaler"] !== "boolean")
                        return ".gogoproto.unmarshaler: boolean expected";
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    if (typeof message[".gogoproto.stable_marshaler"] !== "boolean")
                        return ".gogoproto.stable_marshaler: boolean expected";
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    if (typeof message[".gogoproto.sizer"] !== "boolean")
                        return ".gogoproto.sizer: boolean expected";
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    if (typeof message[".gogoproto.unsafe_marshaler"] !== "boolean")
                        return ".gogoproto.unsafe_marshaler: boolean expected";
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    if (typeof message[".gogoproto.unsafe_unmarshaler"] !== "boolean")
                        return ".gogoproto.unsafe_unmarshaler: boolean expected";
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    if (typeof message[".gogoproto.goproto_extensions_map"] !== "boolean")
                        return ".gogoproto.goproto_extensions_map: boolean expected";
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    if (typeof message[".gogoproto.goproto_unrecognized"] !== "boolean")
                        return ".gogoproto.goproto_unrecognized: boolean expected";
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    if (typeof message[".gogoproto.protosizer"] !== "boolean")
                        return ".gogoproto.protosizer: boolean expected";
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    if (typeof message[".gogoproto.compare"] !== "boolean")
                        return ".gogoproto.compare: boolean expected";
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    if (typeof message[".gogoproto.typedecl"] !== "boolean")
                        return ".gogoproto.typedecl: boolean expected";
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    if (typeof message[".gogoproto.messagename"] !== "boolean")
                        return ".gogoproto.messagename: boolean expected";
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    if (typeof message[".gogoproto.goproto_sizecache"] !== "boolean")
                        return ".gogoproto.goproto_sizecache: boolean expected";
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    if (typeof message[".gogoproto.goproto_unkeyed"] !== "boolean")
                        return ".gogoproto.goproto_unkeyed: boolean expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.message_set_wire_format != null)
                    message.message_set_wire_format = Boolean(object.message_set_wire_format);
                if (object.no_standard_descriptor_accessor != null)
                    message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.map_entry != null)
                    message.map_entry = Boolean(object.map_entry);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_getters"] != null)
                    message[".gogoproto.goproto_getters"] = Boolean(object[".gogoproto.goproto_getters"]);
                if (object[".gogoproto.goproto_stringer"] != null)
                    message[".gogoproto.goproto_stringer"] = Boolean(object[".gogoproto.goproto_stringer"]);
                if (object[".gogoproto.verbose_equal"] != null)
                    message[".gogoproto.verbose_equal"] = Boolean(object[".gogoproto.verbose_equal"]);
                if (object[".gogoproto.face"] != null)
                    message[".gogoproto.face"] = Boolean(object[".gogoproto.face"]);
                if (object[".gogoproto.gostring"] != null)
                    message[".gogoproto.gostring"] = Boolean(object[".gogoproto.gostring"]);
                if (object[".gogoproto.populate"] != null)
                    message[".gogoproto.populate"] = Boolean(object[".gogoproto.populate"]);
                if (object[".gogoproto.stringer"] != null)
                    message[".gogoproto.stringer"] = Boolean(object[".gogoproto.stringer"]);
                if (object[".gogoproto.onlyone"] != null)
                    message[".gogoproto.onlyone"] = Boolean(object[".gogoproto.onlyone"]);
                if (object[".gogoproto.equal"] != null)
                    message[".gogoproto.equal"] = Boolean(object[".gogoproto.equal"]);
                if (object[".gogoproto.description"] != null)
                    message[".gogoproto.description"] = Boolean(object[".gogoproto.description"]);
                if (object[".gogoproto.testgen"] != null)
                    message[".gogoproto.testgen"] = Boolean(object[".gogoproto.testgen"]);
                if (object[".gogoproto.benchgen"] != null)
                    message[".gogoproto.benchgen"] = Boolean(object[".gogoproto.benchgen"]);
                if (object[".gogoproto.marshaler"] != null)
                    message[".gogoproto.marshaler"] = Boolean(object[".gogoproto.marshaler"]);
                if (object[".gogoproto.unmarshaler"] != null)
                    message[".gogoproto.unmarshaler"] = Boolean(object[".gogoproto.unmarshaler"]);
                if (object[".gogoproto.stable_marshaler"] != null)
                    message[".gogoproto.stable_marshaler"] = Boolean(object[".gogoproto.stable_marshaler"]);
                if (object[".gogoproto.sizer"] != null)
                    message[".gogoproto.sizer"] = Boolean(object[".gogoproto.sizer"]);
                if (object[".gogoproto.unsafe_marshaler"] != null)
                    message[".gogoproto.unsafe_marshaler"] = Boolean(object[".gogoproto.unsafe_marshaler"]);
                if (object[".gogoproto.unsafe_unmarshaler"] != null)
                    message[".gogoproto.unsafe_unmarshaler"] = Boolean(object[".gogoproto.unsafe_unmarshaler"]);
                if (object[".gogoproto.goproto_extensions_map"] != null)
                    message[".gogoproto.goproto_extensions_map"] = Boolean(object[".gogoproto.goproto_extensions_map"]);
                if (object[".gogoproto.goproto_unrecognized"] != null)
                    message[".gogoproto.goproto_unrecognized"] = Boolean(object[".gogoproto.goproto_unrecognized"]);
                if (object[".gogoproto.protosizer"] != null)
                    message[".gogoproto.protosizer"] = Boolean(object[".gogoproto.protosizer"]);
                if (object[".gogoproto.compare"] != null)
                    message[".gogoproto.compare"] = Boolean(object[".gogoproto.compare"]);
                if (object[".gogoproto.typedecl"] != null)
                    message[".gogoproto.typedecl"] = Boolean(object[".gogoproto.typedecl"]);
                if (object[".gogoproto.messagename"] != null)
                    message[".gogoproto.messagename"] = Boolean(object[".gogoproto.messagename"]);
                if (object[".gogoproto.goproto_sizecache"] != null)
                    message[".gogoproto.goproto_sizecache"] = Boolean(object[".gogoproto.goproto_sizecache"]);
                if (object[".gogoproto.goproto_unkeyed"] != null)
                    message[".gogoproto.goproto_unkeyed"] = Boolean(object[".gogoproto.goproto_unkeyed"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.message_set_wire_format = false;
                    object.no_standard_descriptor_accessor = false;
                    object.deprecated = false;
                    object.map_entry = false;
                    object[".gogoproto.goproto_getters"] = false;
                    object[".gogoproto.goproto_stringer"] = false;
                    object[".gogoproto.verbose_equal"] = false;
                    object[".gogoproto.face"] = false;
                    object[".gogoproto.gostring"] = false;
                    object[".gogoproto.populate"] = false;
                    object[".gogoproto.onlyone"] = false;
                    object[".gogoproto.equal"] = false;
                    object[".gogoproto.description"] = false;
                    object[".gogoproto.testgen"] = false;
                    object[".gogoproto.benchgen"] = false;
                    object[".gogoproto.marshaler"] = false;
                    object[".gogoproto.unmarshaler"] = false;
                    object[".gogoproto.stable_marshaler"] = false;
                    object[".gogoproto.sizer"] = false;
                    object[".gogoproto.unsafe_marshaler"] = false;
                    object[".gogoproto.unsafe_unmarshaler"] = false;
                    object[".gogoproto.goproto_extensions_map"] = false;
                    object[".gogoproto.goproto_unrecognized"] = false;
                    object[".gogoproto.protosizer"] = false;
                    object[".gogoproto.compare"] = false;
                    object[".gogoproto.typedecl"] = false;
                    object[".gogoproto.messagename"] = false;
                    object[".gogoproto.goproto_sizecache"] = false;
                    object[".gogoproto.goproto_unkeyed"] = false;
                    object[".gogoproto.stringer"] = false;
                }
                if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                    object.message_set_wire_format = message.message_set_wire_format;
                if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                    object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                    object.map_entry = message.map_entry;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                    object[".gogoproto.goproto_getters"] = message[".gogoproto.goproto_getters"];
                if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                    object[".gogoproto.goproto_stringer"] = message[".gogoproto.goproto_stringer"];
                if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                    object[".gogoproto.verbose_equal"] = message[".gogoproto.verbose_equal"];
                if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                    object[".gogoproto.face"] = message[".gogoproto.face"];
                if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                    object[".gogoproto.gostring"] = message[".gogoproto.gostring"];
                if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                    object[".gogoproto.populate"] = message[".gogoproto.populate"];
                if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                    object[".gogoproto.onlyone"] = message[".gogoproto.onlyone"];
                if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                    object[".gogoproto.equal"] = message[".gogoproto.equal"];
                if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                    object[".gogoproto.description"] = message[".gogoproto.description"];
                if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                    object[".gogoproto.testgen"] = message[".gogoproto.testgen"];
                if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                    object[".gogoproto.benchgen"] = message[".gogoproto.benchgen"];
                if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                    object[".gogoproto.marshaler"] = message[".gogoproto.marshaler"];
                if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                    object[".gogoproto.unmarshaler"] = message[".gogoproto.unmarshaler"];
                if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                    object[".gogoproto.stable_marshaler"] = message[".gogoproto.stable_marshaler"];
                if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                    object[".gogoproto.sizer"] = message[".gogoproto.sizer"];
                if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                    object[".gogoproto.unsafe_marshaler"] = message[".gogoproto.unsafe_marshaler"];
                if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                    object[".gogoproto.unsafe_unmarshaler"] = message[".gogoproto.unsafe_unmarshaler"];
                if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                    object[".gogoproto.goproto_extensions_map"] = message[".gogoproto.goproto_extensions_map"];
                if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                    object[".gogoproto.goproto_unrecognized"] = message[".gogoproto.goproto_unrecognized"];
                if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                    object[".gogoproto.protosizer"] = message[".gogoproto.protosizer"];
                if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                    object[".gogoproto.compare"] = message[".gogoproto.compare"];
                if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                    object[".gogoproto.typedecl"] = message[".gogoproto.typedecl"];
                if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                    object[".gogoproto.messagename"] = message[".gogoproto.messagename"];
                if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                    object[".gogoproto.goproto_sizecache"] = message[".gogoproto.goproto_sizecache"];
                if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                    object[".gogoproto.goproto_unkeyed"] = message[".gogoproto.goproto_unkeyed"];
                if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                    object[".gogoproto.stringer"] = message[".gogoproto.stringer"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.nullable"] FieldOptions .gogoproto.nullable
             * @property {boolean|null} [".gogoproto.embed"] FieldOptions .gogoproto.embed
             * @property {string|null} [".gogoproto.customtype"] FieldOptions .gogoproto.customtype
             * @property {string|null} [".gogoproto.customname"] FieldOptions .gogoproto.customname
             * @property {string|null} [".gogoproto.jsontag"] FieldOptions .gogoproto.jsontag
             * @property {string|null} [".gogoproto.moretags"] FieldOptions .gogoproto.moretags
             * @property {string|null} [".gogoproto.casttype"] FieldOptions .gogoproto.casttype
             * @property {string|null} [".gogoproto.castkey"] FieldOptions .gogoproto.castkey
             * @property {string|null} [".gogoproto.castvalue"] FieldOptions .gogoproto.castvalue
             * @property {boolean|null} [".gogoproto.stdtime"] FieldOptions .gogoproto.stdtime
             * @property {boolean|null} [".gogoproto.stdduration"] FieldOptions .gogoproto.stdduration
             * @property {boolean|null} [".gogoproto.wktpointer"] FieldOptions .gogoproto.wktpointer
             * @property {string|null} [".gogoproto.castrepeated"] FieldOptions .gogoproto.castrepeated
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * FieldOptions .gogoproto.nullable.
             * @member {boolean} .gogoproto.nullable
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.nullable"] = false;

            /**
             * FieldOptions .gogoproto.embed.
             * @member {boolean} .gogoproto.embed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.embed"] = false;

            /**
             * FieldOptions .gogoproto.customtype.
             * @member {string} .gogoproto.customtype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customtype"] = "";

            /**
             * FieldOptions .gogoproto.customname.
             * @member {string} .gogoproto.customname
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.customname"] = "";

            /**
             * FieldOptions .gogoproto.jsontag.
             * @member {string} .gogoproto.jsontag
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.jsontag"] = "";

            /**
             * FieldOptions .gogoproto.moretags.
             * @member {string} .gogoproto.moretags
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.moretags"] = "";

            /**
             * FieldOptions .gogoproto.casttype.
             * @member {string} .gogoproto.casttype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.casttype"] = "";

            /**
             * FieldOptions .gogoproto.castkey.
             * @member {string} .gogoproto.castkey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castkey"] = "";

            /**
             * FieldOptions .gogoproto.castvalue.
             * @member {string} .gogoproto.castvalue
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castvalue"] = "";

            /**
             * FieldOptions .gogoproto.stdtime.
             * @member {boolean} .gogoproto.stdtime
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdtime"] = false;

            /**
             * FieldOptions .gogoproto.stdduration.
             * @member {boolean} .gogoproto.stdduration
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.stdduration"] = false;

            /**
             * FieldOptions .gogoproto.wktpointer.
             * @member {boolean} .gogoproto.wktpointer
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.wktpointer"] = false;

            /**
             * FieldOptions .gogoproto.castrepeated.
             * @member {string} .gogoproto.castrepeated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".gogoproto.castrepeated"] = "";

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.nullable"] != null && Object.hasOwnProperty.call(message, ".gogoproto.nullable"))
                    writer.uint32(/* id 65001, wireType 0 =*/520008).bool(message[".gogoproto.nullable"]);
                if (message[".gogoproto.embed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.embed"))
                    writer.uint32(/* id 65002, wireType 0 =*/520016).bool(message[".gogoproto.embed"]);
                if (message[".gogoproto.customtype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customtype"))
                    writer.uint32(/* id 65003, wireType 2 =*/520026).string(message[".gogoproto.customtype"]);
                if (message[".gogoproto.customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customname"))
                    writer.uint32(/* id 65004, wireType 2 =*/520034).string(message[".gogoproto.customname"]);
                if (message[".gogoproto.jsontag"] != null && Object.hasOwnProperty.call(message, ".gogoproto.jsontag"))
                    writer.uint32(/* id 65005, wireType 2 =*/520042).string(message[".gogoproto.jsontag"]);
                if (message[".gogoproto.moretags"] != null && Object.hasOwnProperty.call(message, ".gogoproto.moretags"))
                    writer.uint32(/* id 65006, wireType 2 =*/520050).string(message[".gogoproto.moretags"]);
                if (message[".gogoproto.casttype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.casttype"))
                    writer.uint32(/* id 65007, wireType 2 =*/520058).string(message[".gogoproto.casttype"]);
                if (message[".gogoproto.castkey"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castkey"))
                    writer.uint32(/* id 65008, wireType 2 =*/520066).string(message[".gogoproto.castkey"]);
                if (message[".gogoproto.castvalue"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castvalue"))
                    writer.uint32(/* id 65009, wireType 2 =*/520074).string(message[".gogoproto.castvalue"]);
                if (message[".gogoproto.stdtime"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdtime"))
                    writer.uint32(/* id 65010, wireType 0 =*/520080).bool(message[".gogoproto.stdtime"]);
                if (message[".gogoproto.stdduration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdduration"))
                    writer.uint32(/* id 65011, wireType 0 =*/520088).bool(message[".gogoproto.stdduration"]);
                if (message[".gogoproto.wktpointer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.wktpointer"))
                    writer.uint32(/* id 65012, wireType 0 =*/520096).bool(message[".gogoproto.wktpointer"]);
                if (message[".gogoproto.castrepeated"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castrepeated"))
                    writer.uint32(/* id 65013, wireType 2 =*/520106).string(message[".gogoproto.castrepeated"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 65001:
                        message[".gogoproto.nullable"] = reader.bool();
                        break;
                    case 65002:
                        message[".gogoproto.embed"] = reader.bool();
                        break;
                    case 65003:
                        message[".gogoproto.customtype"] = reader.string();
                        break;
                    case 65004:
                        message[".gogoproto.customname"] = reader.string();
                        break;
                    case 65005:
                        message[".gogoproto.jsontag"] = reader.string();
                        break;
                    case 65006:
                        message[".gogoproto.moretags"] = reader.string();
                        break;
                    case 65007:
                        message[".gogoproto.casttype"] = reader.string();
                        break;
                    case 65008:
                        message[".gogoproto.castkey"] = reader.string();
                        break;
                    case 65009:
                        message[".gogoproto.castvalue"] = reader.string();
                        break;
                    case 65010:
                        message[".gogoproto.stdtime"] = reader.bool();
                        break;
                    case 65011:
                        message[".gogoproto.stdduration"] = reader.bool();
                        break;
                    case 65012:
                        message[".gogoproto.wktpointer"] = reader.bool();
                        break;
                    case 65013:
                        message[".gogoproto.castrepeated"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    if (typeof message[".gogoproto.nullable"] !== "boolean")
                        return ".gogoproto.nullable: boolean expected";
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    if (typeof message[".gogoproto.embed"] !== "boolean")
                        return ".gogoproto.embed: boolean expected";
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    if (!$util.isString(message[".gogoproto.customtype"]))
                        return ".gogoproto.customtype: string expected";
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    if (!$util.isString(message[".gogoproto.customname"]))
                        return ".gogoproto.customname: string expected";
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    if (!$util.isString(message[".gogoproto.jsontag"]))
                        return ".gogoproto.jsontag: string expected";
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    if (!$util.isString(message[".gogoproto.moretags"]))
                        return ".gogoproto.moretags: string expected";
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    if (!$util.isString(message[".gogoproto.casttype"]))
                        return ".gogoproto.casttype: string expected";
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    if (!$util.isString(message[".gogoproto.castkey"]))
                        return ".gogoproto.castkey: string expected";
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    if (!$util.isString(message[".gogoproto.castvalue"]))
                        return ".gogoproto.castvalue: string expected";
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    if (typeof message[".gogoproto.stdtime"] !== "boolean")
                        return ".gogoproto.stdtime: boolean expected";
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    if (typeof message[".gogoproto.stdduration"] !== "boolean")
                        return ".gogoproto.stdduration: boolean expected";
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    if (typeof message[".gogoproto.wktpointer"] !== "boolean")
                        return ".gogoproto.wktpointer: boolean expected";
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    if (!$util.isString(message[".gogoproto.castrepeated"]))
                        return ".gogoproto.castrepeated: string expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.nullable"] != null)
                    message[".gogoproto.nullable"] = Boolean(object[".gogoproto.nullable"]);
                if (object[".gogoproto.embed"] != null)
                    message[".gogoproto.embed"] = Boolean(object[".gogoproto.embed"]);
                if (object[".gogoproto.customtype"] != null)
                    message[".gogoproto.customtype"] = String(object[".gogoproto.customtype"]);
                if (object[".gogoproto.customname"] != null)
                    message[".gogoproto.customname"] = String(object[".gogoproto.customname"]);
                if (object[".gogoproto.jsontag"] != null)
                    message[".gogoproto.jsontag"] = String(object[".gogoproto.jsontag"]);
                if (object[".gogoproto.moretags"] != null)
                    message[".gogoproto.moretags"] = String(object[".gogoproto.moretags"]);
                if (object[".gogoproto.casttype"] != null)
                    message[".gogoproto.casttype"] = String(object[".gogoproto.casttype"]);
                if (object[".gogoproto.castkey"] != null)
                    message[".gogoproto.castkey"] = String(object[".gogoproto.castkey"]);
                if (object[".gogoproto.castvalue"] != null)
                    message[".gogoproto.castvalue"] = String(object[".gogoproto.castvalue"]);
                if (object[".gogoproto.stdtime"] != null)
                    message[".gogoproto.stdtime"] = Boolean(object[".gogoproto.stdtime"]);
                if (object[".gogoproto.stdduration"] != null)
                    message[".gogoproto.stdduration"] = Boolean(object[".gogoproto.stdduration"]);
                if (object[".gogoproto.wktpointer"] != null)
                    message[".gogoproto.wktpointer"] = Boolean(object[".gogoproto.wktpointer"]);
                if (object[".gogoproto.castrepeated"] != null)
                    message[".gogoproto.castrepeated"] = String(object[".gogoproto.castrepeated"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".gogoproto.nullable"] = false;
                    object[".gogoproto.embed"] = false;
                    object[".gogoproto.customtype"] = "";
                    object[".gogoproto.customname"] = "";
                    object[".gogoproto.jsontag"] = "";
                    object[".gogoproto.moretags"] = "";
                    object[".gogoproto.casttype"] = "";
                    object[".gogoproto.castkey"] = "";
                    object[".gogoproto.castvalue"] = "";
                    object[".gogoproto.stdtime"] = false;
                    object[".gogoproto.stdduration"] = false;
                    object[".gogoproto.wktpointer"] = false;
                    object[".gogoproto.castrepeated"] = "";
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                    object[".gogoproto.nullable"] = message[".gogoproto.nullable"];
                if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                    object[".gogoproto.embed"] = message[".gogoproto.embed"];
                if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                    object[".gogoproto.customtype"] = message[".gogoproto.customtype"];
                if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                    object[".gogoproto.customname"] = message[".gogoproto.customname"];
                if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                    object[".gogoproto.jsontag"] = message[".gogoproto.jsontag"];
                if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                    object[".gogoproto.moretags"] = message[".gogoproto.moretags"];
                if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                    object[".gogoproto.casttype"] = message[".gogoproto.casttype"];
                if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                    object[".gogoproto.castkey"] = message[".gogoproto.castkey"];
                if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                    object[".gogoproto.castvalue"] = message[".gogoproto.castvalue"];
                if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                    object[".gogoproto.stdtime"] = message[".gogoproto.stdtime"];
                if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                    object[".gogoproto.stdduration"] = message[".gogoproto.stdduration"];
                if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                    object[".gogoproto.wktpointer"] = message[".gogoproto.wktpointer"];
                if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                    object[".gogoproto.castrepeated"] = message[".gogoproto.castrepeated"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allow_alias] EnumOptions allow_alias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
             * @property {boolean|null} [".gogoproto.goproto_enum_prefix"] EnumOptions .gogoproto.goproto_enum_prefix
             * @property {boolean|null} [".gogoproto.goproto_enum_stringer"] EnumOptions .gogoproto.goproto_enum_stringer
             * @property {boolean|null} [".gogoproto.enum_stringer"] EnumOptions .gogoproto.enum_stringer
             * @property {string|null} [".gogoproto.enum_customname"] EnumOptions .gogoproto.enum_customname
             * @property {boolean|null} [".gogoproto.enumdecl"] EnumOptions .gogoproto.enumdecl
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allow_alias.
             * @member {boolean} allow_alias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allow_alias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumOptions .gogoproto.goproto_enum_prefix.
             * @member {boolean} .gogoproto.goproto_enum_prefix
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_prefix"] = false;

            /**
             * EnumOptions .gogoproto.goproto_enum_stringer.
             * @member {boolean} .gogoproto.goproto_enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.goproto_enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_stringer.
             * @member {boolean} .gogoproto.enum_stringer
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_stringer"] = false;

            /**
             * EnumOptions .gogoproto.enum_customname.
             * @member {string} .gogoproto.enum_customname
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enum_customname"] = "";

            /**
             * EnumOptions .gogoproto.enumdecl.
             * @member {boolean} .gogoproto.enumdecl
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype[".gogoproto.enumdecl"] = false;

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.goproto_enum_prefix"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix"))
                    writer.uint32(/* id 62001, wireType 0 =*/496008).bool(message[".gogoproto.goproto_enum_prefix"]);
                if (message[".gogoproto.goproto_enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer"))
                    writer.uint32(/* id 62021, wireType 0 =*/496168).bool(message[".gogoproto.goproto_enum_stringer"]);
                if (message[".gogoproto.enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer"))
                    writer.uint32(/* id 62022, wireType 0 =*/496176).bool(message[".gogoproto.enum_stringer"]);
                if (message[".gogoproto.enum_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_customname"))
                    writer.uint32(/* id 62023, wireType 2 =*/496186).string(message[".gogoproto.enum_customname"]);
                if (message[".gogoproto.enumdecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl"))
                    writer.uint32(/* id 62024, wireType 0 =*/496192).bool(message[".gogoproto.enumdecl"]);
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allow_alias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 62001:
                        message[".gogoproto.goproto_enum_prefix"] = reader.bool();
                        break;
                    case 62021:
                        message[".gogoproto.goproto_enum_stringer"] = reader.bool();
                        break;
                    case 62022:
                        message[".gogoproto.enum_stringer"] = reader.bool();
                        break;
                    case 62023:
                        message[".gogoproto.enum_customname"] = reader.string();
                        break;
                    case 62024:
                        message[".gogoproto.enumdecl"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    if (typeof message.allow_alias !== "boolean")
                        return "allow_alias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    if (typeof message[".gogoproto.goproto_enum_prefix"] !== "boolean")
                        return ".gogoproto.goproto_enum_prefix: boolean expected";
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    if (typeof message[".gogoproto.goproto_enum_stringer"] !== "boolean")
                        return ".gogoproto.goproto_enum_stringer: boolean expected";
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    if (typeof message[".gogoproto.enum_stringer"] !== "boolean")
                        return ".gogoproto.enum_stringer: boolean expected";
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    if (!$util.isString(message[".gogoproto.enum_customname"]))
                        return ".gogoproto.enum_customname: string expected";
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    if (typeof message[".gogoproto.enumdecl"] !== "boolean")
                        return ".gogoproto.enumdecl: boolean expected";
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allow_alias != null)
                    message.allow_alias = Boolean(object.allow_alias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.goproto_enum_prefix"] != null)
                    message[".gogoproto.goproto_enum_prefix"] = Boolean(object[".gogoproto.goproto_enum_prefix"]);
                if (object[".gogoproto.goproto_enum_stringer"] != null)
                    message[".gogoproto.goproto_enum_stringer"] = Boolean(object[".gogoproto.goproto_enum_stringer"]);
                if (object[".gogoproto.enum_stringer"] != null)
                    message[".gogoproto.enum_stringer"] = Boolean(object[".gogoproto.enum_stringer"]);
                if (object[".gogoproto.enum_customname"] != null)
                    message[".gogoproto.enum_customname"] = String(object[".gogoproto.enum_customname"]);
                if (object[".gogoproto.enumdecl"] != null)
                    message[".gogoproto.enumdecl"] = Boolean(object[".gogoproto.enumdecl"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.allow_alias = false;
                    object.deprecated = false;
                    object[".gogoproto.goproto_enum_prefix"] = false;
                    object[".gogoproto.goproto_enum_stringer"] = false;
                    object[".gogoproto.enum_stringer"] = false;
                    object[".gogoproto.enum_customname"] = "";
                    object[".gogoproto.enumdecl"] = false;
                }
                if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                    object.allow_alias = message.allow_alias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                    object[".gogoproto.goproto_enum_prefix"] = message[".gogoproto.goproto_enum_prefix"];
                if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                    object[".gogoproto.goproto_enum_stringer"] = message[".gogoproto.goproto_enum_stringer"];
                if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                    object[".gogoproto.enum_stringer"] = message[".gogoproto.enum_stringer"];
                if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                    object[".gogoproto.enum_customname"] = message[".gogoproto.enum_customname"];
                if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                    object[".gogoproto.enumdecl"] = message[".gogoproto.enumdecl"];
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
             * @property {string|null} [".gogoproto.enumvalue_customname"] EnumValueOptions .gogoproto.enumvalue_customname
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * EnumValueOptions .gogoproto.enumvalue_customname.
             * @member {string} .gogoproto.enumvalue_customname
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype[".gogoproto.enumvalue_customname"] = "";

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".gogoproto.enumvalue_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumvalue_customname"))
                    writer.uint32(/* id 66001, wireType 2 =*/528010).string(message[".gogoproto.enumvalue_customname"]);
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 66001:
                        message[".gogoproto.enumvalue_customname"] = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    if (!$util.isString(message[".gogoproto.enumvalue_customname"]))
                        return ".gogoproto.enumvalue_customname: string expected";
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".gogoproto.enumvalue_customname"] != null)
                    message[".gogoproto.enumvalue_customname"] = String(object[".gogoproto.enumvalue_customname"]);
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".gogoproto.enumvalue_customname"] = "";
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                    object[".gogoproto.enumvalue_customname"] = message[".gogoproto.enumvalue_customname"];
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpreted_option = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions uninterpreted_option.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpreted_option = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                    for (let i = 0; i < message.uninterpreted_option.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                    $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                            message.uninterpreted_option = [];
                        message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 72295728:
                        message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                    if (!Array.isArray(message.uninterpreted_option))
                        return "uninterpreted_option: array expected";
                    for (let i = 0; i < message.uninterpreted_option.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                        if (error)
                            return "uninterpreted_option." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpreted_option) {
                    if (!Array.isArray(object.uninterpreted_option))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                    message.uninterpreted_option = [];
                    for (let i = 0; i < object.uninterpreted_option.length; ++i) {
                        if (typeof object.uninterpreted_option[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                        message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpreted_option = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpreted_option && message.uninterpreted_option.length) {
                    object.uninterpreted_option = [];
                    for (let j = 0; j < message.uninterpreted_option.length; ++j)
                        object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifier_value] UninterpretedOption identifier_value
             * @property {Long|null} [positive_int_value] UninterpretedOption positive_int_value
             * @property {Long|null} [negative_int_value] UninterpretedOption negative_int_value
             * @property {number|null} [double_value] UninterpretedOption double_value
             * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
             * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifier_value.
             * @member {string} identifier_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifier_value = "";

            /**
             * UninterpretedOption positive_int_value.
             * @member {Long} positive_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negative_int_value.
             * @member {Long} negative_int_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption double_value.
             * @member {number} double_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.double_value = 0;

            /**
             * UninterpretedOption string_value.
             * @member {Uint8Array} string_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.string_value = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregate_value.
             * @member {string} aggregate_value
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregate_value = "";

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (let i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifier_value = reader.string();
                        break;
                    case 4:
                        message.positive_int_value = reader.uint64();
                        break;
                    case 5:
                        message.negative_int_value = reader.int64();
                        break;
                    case 6:
                        message.double_value = reader.double();
                        break;
                    case 7:
                        message.string_value = reader.bytes();
                        break;
                    case 8:
                        message.aggregate_value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    if (!$util.isString(message.identifier_value))
                        return "identifier_value: string expected";
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                        return "positive_int_value: integer|Long expected";
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                        return "negative_int_value: integer|Long expected";
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    if (typeof message.double_value !== "number")
                        return "double_value: number expected";
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                        return "string_value: buffer expected";
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    if (!$util.isString(message.aggregate_value))
                        return "aggregate_value: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifier_value != null)
                    message.identifier_value = String(object.identifier_value);
                if (object.positive_int_value != null)
                    if ($util.Long)
                        (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                    else if (typeof object.positive_int_value === "string")
                        message.positive_int_value = parseInt(object.positive_int_value, 10);
                    else if (typeof object.positive_int_value === "number")
                        message.positive_int_value = object.positive_int_value;
                    else if (typeof object.positive_int_value === "object")
                        message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                if (object.negative_int_value != null)
                    if ($util.Long)
                        (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                    else if (typeof object.negative_int_value === "string")
                        message.negative_int_value = parseInt(object.negative_int_value, 10);
                    else if (typeof object.negative_int_value === "number")
                        message.negative_int_value = object.negative_int_value;
                    else if (typeof object.negative_int_value === "object")
                        message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                if (object.double_value != null)
                    message.double_value = Number(object.double_value);
                if (object.string_value != null)
                    if (typeof object.string_value === "string")
                        $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                    else if (object.string_value.length)
                        message.string_value = object.string_value;
                if (object.aggregate_value != null)
                    message.aggregate_value = String(object.aggregate_value);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifier_value = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positive_int_value = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negative_int_value = options.longs === String ? "0" : 0;
                    object.double_value = 0;
                    if (options.bytes === String)
                        object.string_value = "";
                    else {
                        object.string_value = [];
                        if (options.bytes !== Array)
                            object.string_value = $util.newBuffer(object.string_value);
                    }
                    object.aggregate_value = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                    object.identifier_value = message.identifier_value;
                if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                    if (typeof message.positive_int_value === "number")
                        object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                    else
                        object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                    if (typeof message.negative_int_value === "number")
                        object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                    else
                        object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                if (message.double_value != null && message.hasOwnProperty("double_value"))
                    object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                if (message.string_value != null && message.hasOwnProperty("string_value"))
                    object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                    object.aggregate_value = message.aggregate_value;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} name_part NamePart name_part
                 * @property {boolean} is_extension NamePart is_extension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart name_part.
                 * @member {string} name_part
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.name_part = "";

                /**
                 * NamePart is_extension.
                 * @member {boolean} is_extension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.is_extension = false;

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name_part = reader.string();
                            break;
                        case 2:
                            message.is_extension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("name_part"))
                        throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                    if (!message.hasOwnProperty("is_extension"))
                        throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.name_part))
                        return "name_part: string expected";
                    if (typeof message.is_extension !== "boolean")
                        return "is_extension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.name_part != null)
                        message.name_part = String(object.name_part);
                    if (object.is_extension != null)
                        message.is_extension = Boolean(object.is_extension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.name_part = "";
                        object.is_extension = false;
                    }
                    if (message.name_part != null && message.hasOwnProperty("name_part"))
                        object.name_part = message.name_part;
                    if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                        object.is_extension = message.is_extension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (let i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leading_comments] Location leading_comments
                 * @property {string|null} [trailing_comments] Location trailing_comments
                 * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leading_detached_comments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leading_comments.
                 * @member {string} leading_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_comments = "";

                /**
                 * Location trailing_comments.
                 * @member {string} trailing_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailing_comments = "";

                /**
                 * Location leading_detached_comments.
                 * @member {Array.<string>} leading_detached_comments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leading_detached_comments = $util.emptyArray;

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                    if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                    if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leading_comments = reader.string();
                            break;
                        case 4:
                            message.trailing_comments = reader.string();
                            break;
                        case 6:
                            if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                message.leading_detached_comments = [];
                            message.leading_detached_comments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        if (!$util.isString(message.leading_comments))
                            return "leading_comments: string expected";
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        if (!$util.isString(message.trailing_comments))
                            return "trailing_comments: string expected";
                    if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                        if (!Array.isArray(message.leading_detached_comments))
                            return "leading_detached_comments: array expected";
                        for (let i = 0; i < message.leading_detached_comments.length; ++i)
                            if (!$util.isString(message.leading_detached_comments[i]))
                                return "leading_detached_comments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leading_comments != null)
                        message.leading_comments = String(object.leading_comments);
                    if (object.trailing_comments != null)
                        message.trailing_comments = String(object.trailing_comments);
                    if (object.leading_detached_comments) {
                        if (!Array.isArray(object.leading_detached_comments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                        message.leading_detached_comments = [];
                        for (let i = 0; i < object.leading_detached_comments.length; ++i)
                            message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leading_detached_comments = [];
                    }
                    if (options.defaults) {
                        object.leading_comments = "";
                        object.trailing_comments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                        object.leading_comments = message.leading_comments;
                    if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                        object.trailing_comments = message.trailing_comments;
                    if (message.leading_detached_comments && message.leading_detached_comments.length) {
                        object.leading_detached_comments = [];
                        for (let j = 0; j < message.leading_detached_comments.length; ++j)
                            object.leading_detached_comments[j] = message.leading_detached_comments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (let i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [source_file] Annotation source_file
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation source_file.
                 * @member {string} source_file
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.source_file = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.source_file = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        if (!$util.isString(message.source_file))
                            return "source_file: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.source_file != null)
                        message.source_file = String(object.source_file);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.source_file = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.source_file != null && message.hasOwnProperty("source_file"))
                        object.source_file = message.source_file;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Any = (function() {

            /**
             * Properties of an Any.
             * @memberof google.protobuf
             * @interface IAny
             * @property {string|null} [type_url] Any type_url
             * @property {Uint8Array|null} [value] Any value
             */

            /**
             * Constructs a new Any.
             * @memberof google.protobuf
             * @classdesc Represents an Any.
             * @implements IAny
             * @constructor
             * @param {google.protobuf.IAny=} [properties] Properties to set
             */
            function Any(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Any type_url.
             * @member {string} type_url
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.type_url = "";

            /**
             * Any value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.Any
             * @instance
             */
            Any.prototype.value = $util.newBuffer([]);

            /**
             * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.IAny} message Any message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Any message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.type_url = reader.string();
                        break;
                    case 2:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Any message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Any
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Any} Any
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Any message.
             * @function verify
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates an Any message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Any
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Any} Any
             */
            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                let message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from an Any message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Any
             * @static
             * @param {google.protobuf.Any} message Any
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this Any to JSON.
             * @function toJSON
             * @memberof google.protobuf.Any
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Any;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {Long} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                let message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Timestamp;
        })();

        protobuf.Duration = (function() {

            /**
             * Properties of a Duration.
             * @memberof google.protobuf
             * @interface IDuration
             * @property {Long|null} [seconds] Duration seconds
             * @property {number|null} [nanos] Duration nanos
             */

            /**
             * Constructs a new Duration.
             * @memberof google.protobuf
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {google.protobuf.IDuration=} [properties] Properties to set
             */
            function Duration(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Duration seconds.
             * @member {Long} seconds
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Duration nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.nanos = 0;

            /**
             * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Duration message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.seconds = reader.int64();
                        break;
                    case 2:
                        message.nanos = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Duration message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Duration message.
             * @function verify
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Duration.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Duration} Duration
             */
            Duration.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Duration)
                    return object;
                let message = new $root.google.protobuf.Duration();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.Duration} message Duration
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Duration.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Duration to JSON.
             * @function toJSON
             * @memberof google.protobuf.Duration
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Duration.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Duration;
        })();

        return protobuf;
    })();

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             * @property {boolean|null} [fully_decode_reserved_expansion] Http fully_decode_reserved_expansion
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Http fully_decode_reserved_expansion.
             * @member {boolean} fully_decode_reserved_expansion
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.fully_decode_reserved_expansion = false;

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rules != null && message.rules.length)
                    for (let i = 0; i < message.rules.length; ++i)
                        $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.fully_decode_reserved_expansion != null && Object.hasOwnProperty.call(message, "fully_decode_reserved_expansion"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fully_decode_reserved_expansion);
                return writer;
            };

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.rules && message.rules.length))
                            message.rules = [];
                        message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    case 2:
                        message.fully_decode_reserved_expansion = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    if (typeof message.fully_decode_reserved_expansion !== "boolean")
                        return "fully_decode_reserved_expansion: boolean expected";
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                if (object.fully_decode_reserved_expansion != null)
                    message.fully_decode_reserved_expansion = Boolean(object.fully_decode_reserved_expansion);
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (options.defaults)
                    object.fully_decode_reserved_expansion = false;
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                    object.fully_decode_reserved_expansion = message.fully_decode_reserved_expansion;
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [body] HttpRule body
             * @property {string|null} [response_body] HttpRule response_body
             * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additional_bindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule response_body.
             * @member {string} response_body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.response_body = "";

            /**
             * HttpRule additional_bindings.
             * @member {Array.<google.api.IHttpRule>} additional_bindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additional_bindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                    $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.additional_bindings != null && message.additional_bindings.length)
                    for (let i = 0; i < message.additional_bindings.length; ++i)
                        $root.google.api.HttpRule.encode(message.additional_bindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.response_body != null && Object.hasOwnProperty.call(message, "response_body"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.response_body);
                return writer;
            };

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.selector = reader.string();
                        break;
                    case 2:
                        message.get = reader.string();
                        break;
                    case 3:
                        message.put = reader.string();
                        break;
                    case 4:
                        message.post = reader.string();
                        break;
                    case 5:
                        message["delete"] = reader.string();
                        break;
                    case 6:
                        message.patch = reader.string();
                        break;
                    case 8:
                        message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                        break;
                    case 7:
                        message.body = reader.string();
                        break;
                    case 12:
                        message.response_body = reader.string();
                        break;
                    case 11:
                        if (!(message.additional_bindings && message.additional_bindings.length))
                            message.additional_bindings = [];
                        message.additional_bindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    if (!$util.isString(message.response_body))
                        return "response_body: string expected";
                if (message.additional_bindings != null && message.hasOwnProperty("additional_bindings")) {
                    if (!Array.isArray(message.additional_bindings))
                        return "additional_bindings: array expected";
                    for (let i = 0; i < message.additional_bindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additional_bindings[i]);
                        if (error)
                            return "additional_bindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.response_body != null)
                    message.response_body = String(object.response_body);
                if (object.additional_bindings) {
                    if (!Array.isArray(object.additional_bindings))
                        throw TypeError(".google.api.HttpRule.additional_bindings: array expected");
                    message.additional_bindings = [];
                    for (let i = 0; i < object.additional_bindings.length; ++i) {
                        if (typeof object.additional_bindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additional_bindings: object expected");
                        message.additional_bindings[i] = $root.google.api.HttpRule.fromObject(object.additional_bindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additional_bindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                    object.response_body = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additional_bindings && message.additional_bindings.length) {
                    object.additional_bindings = [];
                    for (let j = 0; j < message.additional_bindings.length; ++j)
                        object.additional_bindings[j] = $root.google.api.HttpRule.toObject(message.additional_bindings[j], options);
                }
                if (message.response_body != null && message.hasOwnProperty("response_body"))
                    object.response_body = message.response_body;
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                return writer;
            };

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.kind = reader.string();
                        break;
                    case 2:
                        message.path = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    return google;
})();

export { $root as default };
